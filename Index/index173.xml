<?xml version="1.0" encoding="ISO-8859-1"?>
<add>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/edverg/matlab/matlabimages/ml5.html</field>
<field name="title">Einführung in Matlab ? Kap.V: Image processing Toolbox?</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/edverg/matlab/matlabimages/ml5.html</field>
<field name="content">Einführung in Matlab ? Kap.V: Image processing Toolbox? Einführung in Matlab ? Kap.V: Image processing Toolbox? Einführung in Matlab Fritz Wünsch, Stand 19.2.14 Kap.V: Die Image Processing Toolbox (? pdf ) In diesem Abschnitt gibt's eine Einführung in die wissenschaftliche Bildverarbeitung mit Hilfe der Image Processing Toolbox von Matlab. Dieses Thema ist in einer Vielzahl von Disziplinen von Bedeutung, z.B. in der medizinischen Bildverarbeitung, bei bildgebenden Verfahren in der Materialanalyse, in der (Mikro)biologie. Wir lernen das Image Tool kennen, um Bilder zu untersuchen, beschäftigen uns mit Bildtransformationen, um z.B. Verzerrungen herauszurechnen, mit Filtern in der Raum- und Frequenzdomäne und Fouriertransformation, mit Morphologie (Erosion, Dilatation), mit Kantendetektion und weiteren Verfahren. Vieles hier kann nur kurz angerissen und demonstriert werden, eine fundierte Behandlung der Thematik ist in dieser K?rze nat?rlich nicht m?glich. Dieses File ist ein sehr stark komprimierer Auszug aus dem User-Manual der Image-Processing-Toolbox, an einigen Stellen erg?nzt z.B. durch Wikipedia-Material. Bilder in Matlab Lesen und Schreiben von Bildern Bilder darstellen und untersuchen R?umliche Transformationen Filterung in der Orts- und Frequenz-Dom?ne, 2D-FFT Morphologische Operationen Analyse und Verbesserung von Bildern Was gibt's sonst noch in der Image Processing Toolbox? 1. Bilder in Matlab Bilder werden i.d.R. in ganz normalen Arrays abgespeichert; 1 Array-Element = 1 Pixel. Oft reichen 2dim. Arrays aus, f?r sog. Truecolor-Bilder ist eine dritte Dimension n?tig ('RGB'). Als Koordinatensysteme werden verwendet: Pixel-Koordinaten (links) und Raumkoordinaten (rechts) Typen von Bildern Image Type Interpretation Binary (Also known as a bilevel image) Logical array containing only 0s and 1s, interpreted as black and white, respectively. Indexed (Also known as a pseudocolor image) Array of class logical, uint8, uint16, single, or double whose pixel values are direct indices into a colormap. The colormap is an m-by-3 array of class double [0..1]. For single or double arrays, integer values range from [1, p]. For logical, uint8, or uint16 arrays, values range from [0, p-1] (p = length of the colormap) Grayscale (Also known as an intensity, gray scale, or gray level image) Array of class uint8, uint16, int16, single, or double whose pixel values specify intensity values. For single or double arrays, values range from [0, 1]. For uint8, values range from [0,255]. For uint16, values range from [0, 65535]. For int16, values range from [-32768, 32767]. Truecolor (Also known as an RGB image) m-by-n-by-3 array of class uint8, uint16, single, or double whose pixel values specify intensity values. For single or double arrays, values range from [0, 1]. For uint8, values range from [0, 255]. For uint16, values range from [0, 65535]. Binary Images (Abk?rzung: BW) Indexed Images (Pixel-Array+Colormap) An einer bestimmten Bildposition steht '5' im Pixel-Array. In der Colormap-Variable beim Index 5 steht der wirkliche RGB-Wert. Lesen des Bildes samt Colormap: [Bild,map]=imread('forest.tif');imshow(Bild,map)  ?ber die Option 'View' ? 'Property Editor' im Header des Bildes k?nnen andere Colormaps gew?hlt werden. Grayscale Images Grayscale Images sind i.d.R. ohne Colormap abgespeichert; Pixel-Eintrag=0: schwarz, =1: weiss Truecolor Images Truecolor Images verwenden keine Colormap!. Bild=imread('demo.jpg');Bild=imread('football.jpg'); Wandeln zwischen den Bildklassen Es gibt unterschiedliche Bildverarbeitungsmethoden in Matlab je nach Bildklasse. Beispiel: Digitales Filtern funktioniert nicht mit Pseudocolor-Bildern. Wichtige Routinen: gray2ind Convert a grayscale image to an indexed image. im2bw Convert a grayscale image, indexed image, or truecolor image, to a binary image, based on a luminance threshold. ind2grey Convert an indexed image to a grayscale image. ind2rgb Convert an indexed image to a truecolor image. rgb2grey Convert a truecolor image to a grayscale image. rgb2ind Convert a truecolor image to an indexed image. Beispiel: Bild=imread('demo.jpg');% lese truecolor image[IndexedBild,map]=rgb2ind(Bild,128);% wandle in indexed image %    mit 128 Colormap-Eintr?genimshow(IndexedBild,map)% Anzeige Bild-Arithmetik Im Prinzip kann man die ganz normalen arithmetischen Matlab-(Matrix-)Operationen verwenden. Es passiert aber sehr leicht ein Bereichs-Overflow. Daher besser dedizierte Operationen verwenden wie K = imlincomb(.5,Image1,.5,Image2);  2. Lesen und Schreiben von Bildern Informationen ?ber eine Bilddatei &amp;gt;&amp;gt; imfinfo('demo.jpg')       Filename: 'demo.jpg'    FileModDate: '14-Apr-2009 10:39:55'       FileSize: 30565         Format: 'jpg'  FormatVersion: ''          Width: 556         Height: 364       BitDepth: 24      ColorType: 'truecolor'FormatSignature: ''NumberOfSamples: 3   CodingMethod: 'Huffman'  CodingProcess: 'Sequential'        Comment: {} Welche Standard-Bilddatei-Formate werden unterst?tzt? &amp;gt;&amp;gt; imformats  EXT       ISA     INFO        READ      WRITE     ALPHA  DESCRIPTION                             ------------------------------------------------------------------------------------------------ bmp       isbmp   imbmpinfo   readbmp   writebmp  0      Windows Bitmap (BMP) cur       iscur   imcurinfo   readcur             1      Windows Cursor resources (CUR) fts fits  isfits  imfitsinfo  readfits            0      Flexible Image Transport System (FITS) gif       isgif   imgifinfo   readgif   writegif  0      Graphics Interchange Format (GIF) hdf       ishdf   imhdfinfo   readhdf   writehdf  0      Hierarchical Data Format (HDF) ico       isico   imicoinfo   readico             1      Windows Icon resources (ICO) jpg jpeg  isjpg   imjpginfo   readjpg   writejpg  0      Joint Photographic Experts Group (JPEG) pbm       ispbm   impnminfo   readpnm   writepnm  0      Portable Bitmap (PBM) pcx       ispcx   impcxinfo   readpcx   writepcx  0      Windows Paintbrush (PCX) pgm       ispgm   impnminfo   readpnm   writepnm  0      Portable Graymap (PGM) png       ispng   impnginfo   readpng   writepng  1      Portable Network Graphics (PNG) pnm       ispnm   impnminfo   readpnm   writepnm  0      Portable Any Map (PNM) ppm       isppm   impnminfo   readpnm   writepnm  0      Portable Pixmap (PPM) ras       isras   imrasinfo   readras   writeras  1      Sun Raster (RAS) tif tiff  istif   imtifinfo   readtif   writetif  0      Tagged Image File Format (TIFF) xwd       isxwd   imxwdinfo   readxwd   writexwd  0      X Window Dump (XWD) Als Matlab-Objekt wird ein Bild immer als Objekt einer der vier o.g. Bildklassen dargestellt, egal, ob die Datei jpg, tiff, png etc. war. RGB = imread('football.jpg');   % lese truecolor image[X,map] = imread('trees.tif');  % lese indexed image Die Bildarrays werden gem?? der Informationsmenge in der Datei gestaltet. JPG z.B. liefert ein uint8-Array, PNG und TIFF ein uint16. Schreiben von Bildern imwrite(Bild,'dateiname.jpg');           % schreibe truecolor imageimwrite(Bild,map,'dateiname.jpg');              % schreibe indexed imageimwrite(Bild,'dateiname.jpg','Quality','100');  % truecolor mit Optionen Nat?rlich kann man ein Tiff-File lesen und es dann als jpg abspeichern ... Anmerkung: Matlab unterst?tzt den im medizinischen Bereich sehr weit verbreiteten Standard DICOM (Digital Imaging and Communications in Medicine) (lesend und schreibend, siehe weiter unten) Auch diverse weitere spezielle Image-Typen werden unterst?tzt, z.B. High Dynamic range Images mit 32-Bit-Floatingpoint-RGB-Werten. 3. Bilder darstellen und untersuchen Display von Bildern mit image (aus dem Matlab-Core-System) imshow (Basisroutine, aus der Image Processing Toolbox; setzt automatisch Achsen-Eigenschaften u.?.) imtool (fortgeschrittenes Tool, aus der Image Processing Toolbox; setzt automatisch Achsen-Eigenschaften u.?.) Ein paar Anmerkungen: Standard-Verfahren: bringe Bild in Workspace mit bild=imread('dateiname'), dann erst anzeigen imshow('moon.tif') z.B. stellt das Bild direkt dar. In den Workspace gelangt es (u.U. modifiziert) erst mit bild=getimage. nat?rlich kann man in eine Figur 2 Bilder malen; sind es indexed images, sollten sie die gleiche Colormap benutzen, sonst gibt's meist Unsinn. Das Image Tool imtool('moon.tif') Ein paar integrierte Tools: Pixel Information tool ? for getting information about the pixel under the pointer Pixel Region tool ? for getting information about a group of pixels Distance tool ? for measuring the distance between two pixels Image Information tool ? for getting information about image and image file metadata Adjust Contrast tool and associated Window/Level tool ? for adjusting the contrast of the image displayed in the Image Tool and modifying the actual image data. You can save the adjusted data to the workspace or a file. Crop Image tool ? for defining a crop region on the image and cropping the image. You can save the cropped image to the workspace or a file. Display Range tool ? for determining the display range of the image data Colormap-Auswahl Importing und Exporting von Daten Drucken von Bildern In addition, the Image Tool provides several navigation aids that can help explore large images: Overview tool ? for determining what part of the image is currently visible in the Image Tool and changing this view. Pan tool ? for moving the image to view other parts of the image Zoom tool ? for getting a closer view of any part of the image. Scroll bars ? for navigating over the image. Justiere Kontrast und Helligkeit Interaktiv (sog. Window/Level-Tool): The following table summarizes how these mouse motions affect the size and position of the window in the Adjust Contrast tool. Mouse Motion Effect Horizontally to the left Shrinks the window from both sides. Horizontally to the right Expands the window from both sides. Vertically up Moves the window to the right over the histogram, increasing brightness. Vertically down Moves the window to the left over the image histogram, decreasing brightness. Sehr sch?ne Demo mit medizinischem Bild: &amp;gt;&amp;gt; I=dicomread('CT-MONO2-16-ankle.dcm');&amp;gt;&amp;gt; imtool(I)                     % Greyscale-Bild ohne Skalierung&amp;gt;&amp;gt; imtool(I,'DisplayRange',[])   % automatische Skalierung Movie Player Lade mal Satz von MR-Daten (Kopf): &amp;gt;&amp;gt; load mristack%mristack       256x256x21       1276256     uint8&amp;gt;&amp;gt; implay(mristack) Anmerkung: Nat?rlich k?nnen AVI-Movies erzeugt werden, die dann auch ohne Matlab ablaufen. Erstellen eines eigenen GUI (Graphical User Interface) f?r spezielle Aufgaben der Bildverarbeitung Die in imtool eingebauten Werkzeuge sind auch einzeln verf?gbar und und modular zusammenstellbar. Besonders nettes Beispiel: Creating an Angle Measurement Tool (zur zum Vermitteln eines ersten Eindruckes, Details werden hier nicht erkl?rt). The toolbox includes a set of functions that you can use to enable users of your image processing GUI to define a region-of-interest (ROI) on the target image. The functions implement drawing of various shapes of ROI, such as rectangles, ellipses, and polygons, and returning information about the coordinates that define the ROI. These ROI objects support methods that you can use to control aspects of its appearance and behavior. To illustrate how to use these ROI tools, this example creates a simple angle measurement tool This custom tool uses impoly to create a two-segment polyline on an image and displays the angle created by the two line segments in a title in the figure. Users of the tool can move the polyline anywhere on the image and view the angle formed by the two line segments. function my_angle_measurement_tool(im)% ------------------------------------% Create figure, setting up propertiesfigure('Name','My Angle Measurement Tool',...      'NumberTitle','off',...      'IntegerHandle','off');% Display image in the axes % Display imageimshow(im)% Get size of image.m = size(im,1);n = size(im,2);% Get center point of image for initial positioning.midy = ceil(m/2);  % rundenmidx = ceil(n/2);% Position first point vertically above the middle.firstx = midx;firsty = midy - ceil(m/4);lastx = midx + ceil(n/4);lasty = midy;% Create a two-segment right-angle polyline centered in the image.h = impoly(gca,[firstx,firsty;midx,midy;lastx,lasty],'Closed',false);api = iptgetapi(h); %  Get Application Programmer Interface (API) for handleinitial_position = api.getPosition()% Display initial positionupdateAngle(initial_position)% set up callback to update angle in title.api.addNewPositionCallback(@updateAngle);fcn = makeConstrainToRectFcn('impoly',get(gca,'XLim'),get(gca,'YLim'));api.setPositionConstraintFcn(fcn);% Callback function that calculates the angle and updates the title.% Function receives an array containing the current x,y position of% the three vertices.function updateAngle(p)% Create two vectors from the vertices.% v1 = [x1 - x2, y1 - y2]% v2 = [x3 - x2, Y3 - y2]v1 = [p(1,1)-p(2,1), p(1,2)-p(2,2)];v2 = [p(3,1)-p(2,1), p(3,2)-p(2,2)];% Find the angle.theta = acos(dot(v1,v2)/(norm(v1)*norm(v2)));% Convert it to degrees.angle_degrees = (theta * (180/pi));% Display the angle in the title of the figure.title(sprintf('(%1.0f) degrees',angle_degrees)) To use the angle measurement tool, pass it an image. I = imread('gantrycrane.png');my_angle_measurement_tool(I); The tool opens a figure window, displaying the image with the angle measure tool centered over the image in a right angle. Move the pointer over any of the vertices of the tool to measure any angle in the image. In the following figure, the tool is measuring an angle in the image. Note the size of the angle displayed in the title of the figure. 4. R?umliche Transformationen Resizing J = imresize(I,1.25); % x und y um Faktor 1.25J = imresize(I,[100 150])   % Output-Groesse 100x150 (u.U. verzerrt) Bei Vergr??erung wird Interpolation angewandt (per Default bikubisch), bei Verkleinerung Antialiasing, um harte Stufen und Moiré-Effekte zu reduzieren. Drehung J = imrotate(I,35,'bilinear');  % um 35Grad gegen Uhrzeigersinn Wieder Interpolation (im Beispiel explizit 'bilinear' angegeben); per Default wird neues Bild so gross, dass alle Pixel des gedrehten Bildes sichtbar sind. Cropping (Beschneiden) I = imread('circuit.tif'); imshow(I)J = imcrop(I,[60 40 100 90]);% feste Koordinatenimshow(J);J = imcrop(I);% interaktiv Allgemeine 2D-Raumtransformationen Diese umfassen affine (lineare) Transformationen und (Schr?g-)Projektionen. Transformation Type Description 'affine' Transformation that can include translation, rotation, scaling, and shearing. Straight lines remain straight, and parallel lines remain parallel, but rectangles might become parallelograms. 'projective' Transformation in which straight lines remain straight but parallel lines converge toward vanishing points. (The vanishing points can fall inside or outside the image -- even at infinity.) Affine Transform Example Transformation Matrix Translation tx specifies the displacement along the x axis ty specifies the displacement along the y axis. Scale sx specifies the scale factor along the x axis sy specifies the scale factor along the y axis. Shear shx specifies the shear factor along the x axis shy specifies the shear factor along the y axis. Rotation q specifies the angle of rotation. Das Matlab-Verfahren geht ganz allgemein so: Lege die 3x3-Transformationsmatrix fest oder definiere einen Satz von Ausgangs- und End-Punkten (3 bei affin, 4 bei Projektion) erzeuge mit Matlab-Befehl maketform "a multidimensional spatial transformation structure (called a TFORM struct)" F?hre die Transformation durch mit imtransform(Bild,tform) Beispiel: % Verschiebung um je 40 Punkte in X und Yxform = [ 1  0  0          0  1  0         40 40  1 ]tform_translate = maketform('affine',xform);cb_trans= imtransform(cb, tform_translate);          % mit Punktencb=checkerboard;imshow(cb)in_points = [11 11;21 11; 21 21]out_points = [51 51;61 51;61 61]tform = maketform('affine',in_points,out_points)cb_trans = imtransform(cb, tform); Anmerkung: Matlab beherrscht auch die Projektion eines 2dimensionalen Musters auf eine beliebige Oberfl?che, mit entsprechendem Resampling des Originals (ohne weitere Erl?uterung): I = checkerboard(20,1,1);figure; imshow(I)T = maketform('projective',[1 1; 41 1; 41 41;   1 41],...              [5 5; 40 5; 35 30; -10 30]);R = makeresampler('cubic','circular');K = imtransform(I,T,R,'Size',[100 100],'XYScale',1);figure, imshow(K) Bildregistrierung Auszug aus Wikipedia: Bildregistrierung ist ein wichtiger Prozess in der digitalen Bildverarbeitung und wird dazu benutzt, zwei oder mehrere Bilder derselben Szene bestm?glich in ?bereinstimmung miteinander zu bringen. Dabei wird eines der Bilder als Referenzbild festgelegt und die anderen Bilder sind dann die Objektbilder. Es wird dann eine Transformation berechnet, die die Objektbilder bestm?glich an das Referenzbild anpasst. Die zu registrierenden Bilder unterscheiden sich voneinander, weil sie von unterschiedlichen Positionen, zu unterschiedlichen Zeitpunkten oder mit unterschiedlichen Sensoren aufgenommen wurden. Bildregistrierungsverfahren sind vor allem in der medizinischen Bildverarbeitung h?ufig anzutreffen. Dort werden Bilder, die mit verschiedenen bildgebenden Verfahren gewonnen wurden, aneinander angeglichen. Somit k?nnen besser Erkenntnisse aus diesen Bildern gewonnen werden. So k?nnen z. B. MRT-Bilder, auf denen gut Weichteilgewebe, wie Gehirnstrukturen, dargestellt werden, mit PET-Bildern, die bestimmte Stoffwechselprozesse sichtbar machen, miteinander registriert und dann ?berlagert werden, um nachvollziehen zu k?nnen, in welchen Gehirnbereichen bestimmte Stoffwechselprozesse stattfinden. Ein weiteres Anwendungsbeispiel ist das Zusammenf?gen mehrerer Satellitenbilder zu einer gro?en Karte. Da die Erdoberfl?che rund ist und sich die Position des Satelliten von Bild zu Bild ?ndert, kommt es innerhalb der Bilder zu kleinen Verzerrungen, die mit Registrierungsverfahren aneinander angeglichen werden k?nnen. Das Ziel bei der Bildregistrierung ist es, eine Transformation T zu finden, die ein gegebenes Quellbild (Objektbild) F bestm?glich mit einem Zielbild (Referenzbild) G in ?bereinstimmung bringt. Die bestm?gliche ?bereinstimmung wird dabei durch ein Ma? D f?r die Gleichheit oder die Ungleichheit der Bilder charakterisiert. Bildregistrierung ist also ein Optimierungsproblem, da es darum geht D(T(F), G) zu minimieren (falls D die Ungleichheit misst) bzw. zu maximieren (falls D die Gleichheit misst). Achtung! Ab Matlab2013b Verfahren leicht modifiziert! % perfekt normiertes und entzerrtes Fotoorthophoto = imread('westconcordorthophoto.png'); figure, imshow(orthophoto) % Luftfoto, gedreht, perspektivisch verzerrt   unregistered = imread('westconcordaerial.png');      figure, imshow(unregistered) Methode: cpselect erlaubt es, Kontroll-Punkte interaktiv festzulegen und im Workspace abzulegen: cpselect(unregistered, orthophoto) fixedPoints =221.6250  189.8750200.6250  241.3750144.1250  286.3750181.8750  124.8750        movingPoints =        186.2500  167.2500176.2500  230.2500127.2500  292.2500137.7500  105.7500 cp2tform macht daraus einen Datenfit, um die optimale Transformation zu bestimmen. Dabei kann/muss der Typ der Transformation angegeben werden. Es gibt vier globale Transformationen, darunter 'affin' und 'projective'. Wenn damit das Ergebnis noch nicht gut genug ist, sind zus?tzlich lokale Transformationen sinnvoll. Die Zahl der notwendigen Punkte ist nat?rlich von der Art der Transformation abh?ngig. In diesem Beispiel: Verzerrung nur durch Kamera-Position, nicht durch Relief des Terrains, also reicht 'projective', das auch rotiert: &amp;gt;&amp;gt; mytform = cp2tform(movingPoints, fixedPoints, 'projective');&amp;gt;&amp;gt; registered = imtransform(unregistered, mytform);&amp;gt;&amp;gt; figure;&amp;gt;&amp;gt; imshow(registered)&amp;gt;&amp;gt; hold on&amp;gt;&amp;gt; h=imshow(orthophoto);&amp;gt;&amp;gt; set(h,'AlphaData',0.6);% justiere Transparenz (Sehr gutes) Ergebnis (auf Anhieb klappt's meist nicht so gut): 5. Filterung in der Orts- und Frequenz-Dom?ne, 2D-FFT Filterung ganz allgemein, um bestimmte Bild-Features zu verst?rken oder abzuschw?chen, wie z.B. Kanten. Filtern ist immer eine Nachbarschafts-Operation, ein Output-Pixel ist die gewichtete Summe der Input-Pixel in der Umgebung. Hier nur: lineare Gewichtung. Mathematische Implementierung ?ber Faltung: Dabei ist I(x,y) das Bild, K(u,v) der Filter(kernel). Das Design von guten Filtern ist eine absolute Kunst! daf?r gibt's speziell die Digital Signal Processing Toolbox. http://www.rn-wissen.de/index.php/Bildverarbeitung_Tutorial liefert eine sch?ne ?bersicht: Tabelle der Faltungskerne Faltungskern Beschreibung Unsch?rfeoperator, gl?ttet Kanten im Bild horizontaler Sobel-Operator, hebt waagerechte Kanten hervor vertikaler Sobel-Operator, hebt senkrechte Kanten hervor hebt Kanten in Nordostrichtung (schr?g rechts nach oben) hervor hebt Kanten in S?dostrichtung (schr?g rechts nach unten) hervor Zur Rechenmethode: 1dimensional schaut ja eine Faltung/Filterung so aus: M-1 ?   I i - j   K j   =   I' i   (M: L?nge des Filterkernels) j=0 Das heisst also, Element i des gefalteten Signals I' ergibt sich aus dem Originalsignal I und dem Filterkernel K gem?? I' 6 = ... + I 3 K 3 + I 4 K 2 + I 5 K 1 + I 6 K 0     (Faltung) Beim Aufsummieren muss man sozusagen den Filterkern von hinten lesen. Die Korrelation ist ein sehr ?hnliches Verfahren wie die Faltung, hier wird aber das zweite Element nicht umgedreht: I' 6 = ... + I 3 K 3 + I 4 K 4 + I 5 K 5 + I 6 K 6     (Korrelation) 2dimensional l?uft die Faltung so: For example, suppose the image is A = [17  24   1   8  15      23   5   7  14  16      4   6  13  20  22     10  12  19  21   3     11  18  25   2   9] and the convolution kernel is h = [8   1   6     3   5   7     4   9   2] The following figure shows how to compute the (2,4) output pixel using these steps: Rotate the convolution kernel 180 degrees about its center element. Slide the center element of the convolution kernel so that it lies on top of the (2,4) element of A. Multiply each weight in the rotated convolution kernel by the pixel of A underneath. Sum the individual products from step 3. Hence the (2,4) output pixel is imfilter ist die Matlab-Operation, um die Korrelation (imfilter(Bild,Kern)) bzw. Faltung (imfilter(Bild,Kern,'conv') mit einem Filter durchzuf?hren. Hier ein ziemlich unsinniges Beispiel - jedes Pixel ist einfach der Mittelwert der [5x5]-Umgebung: I = imread('coins.png');h = ones(5,5) / 25;I2 = imfilter(I,h);imshow(I), title('Original Image');figure, imshow(I2), title('Filtered Image') Anmerkung zu den Datentypen: intern arbeitet imfilter mit doppeltgenauen Realzahlen, das Ergebnis wird dann gerundet bzw. abgeschnitten auf den Ursprungstyp (bei uint8 z.B. gibt's auch nach der Filterung keine negativen Pixel). Erzeugung von Filterkernen mit fspecial (Signal processing Toolbox hierf?r nicht n?tig). Beispiel mit sog. unsharp masking filter, um den Kontrast zu erh?hen I = imread('moon.tif');h = fspecial('unsharp');I2 = imfilter(I,h);imshow(I), title('Original Image')figure, imshow(I2), title('Filtered Image') Anmerkung f?r Profis: zur Bildverarbeitung sind nur sog. finite impulse response filter (FIR) geeignet, wo die Outputpunkte die gewichtetet Summe von Input-Punkten sind. infinite impulse response filter, die bei der Berechnung der Output-Werte bereits vorher berechnete andere Outputwerte mit einbeziehen, sind viel schneller und werden ?fters bei eindimensionalen Signalen benutzt, f?r die Bildverarbeitung sind sie aber zu instabil. Filterung in der Frequenzdomaine Hier geht es darum, nicht einfach Bilder 'sch?ner' zu machen, sondern ganz spezifisch gewisse Frequenzbereiche zu unterdr?cken. Einfach im eindimensionalen Fall (Impulse Response = Filter Kernel) (Bilder aus http://www.dspguide.com/): Die Image processing Toolbox erlaubt das Design von 2dimensionalen Filtern mit definierter Frequenzcharakteristik auf mehrere Arten: gebe mit Hilfe einer Matrix von Punkten das gew?nschte Frequenzverhalten (z.B. Tiefpass) vor. Es wird ein Filterkern berechnet, der durch diese Punkte geht, dazwischen aber stark oszilliert. Verbesserung durch die sog. Windowing Method. ftrans2 erzeugt aus einem eindimensionalen Filter (z.B. berechnet mit Hilfe der Digital Signal Processing Toolbox) das entsprechende 2dimensionale Pendant. Die Scientific/Educational Matlab Database der TU München bietet ein Tool zur interaktiven Hoch- und Tiefpassfilterung von Bildern an. Das GUI ist nicht ganz stabil, trotzdem ist das Tool ganz nett: Fouriertransformation Berechnung der Frequenzanteile eines Signals mit der trickreichen Fast Fourier Transformation. Beispiel eindimensional: &amp;gt;&amp;gt; t=zeros(1,512);&amp;gt;&amp;gt; t(230:270)=1;&amp;gt;&amp;gt; ft=log(abs(fft(t)));&amp;gt;&amp;gt; plot(ft(1:256));&amp;gt;&amp;gt; plot(t); Die FT einer Rechteckfunktion ist die sog. sinc-Funktion sin(t)/t. Wird der Rechteckpuls in der Zeit/Orts-Domaine schmaler, laufen die Seitenb?nder der FT auseinander. 2dimensional analog: Eine Frequenz bezieht sich auf die x-Richtung, die andere auf die y-Richtung. f = zeros(30,30);f(5:24,13:17) = 1;imshow(f,'InitialMagnification','fit') Nun die r?umliche FT: &amp;gt;&amp;gt; F=fft2(f);&amp;gt;&amp;gt; F2=log(abs(F)); &amp;gt;&amp;gt; imshow(F2,[-1 5],'InitialMagnification','fit'); colormap(jet); colorbar Zwei Sachen kann man noch verbessern. Zun?chst: f?lle Eingangsbild mit Nullen auf 256x256 Pixel und mache dann die FT. Beides zusammen erledigt die Befehlsversion F=fft2(f,256,256). Das Ergebnis resultiert dann in einer besseren Frequenzaufl?sung: In dieser Darstellung sind die niedrigsten Ortsfrequenzen (eine Bildinformation ist praktisch ortsunabh?ngig oder ?ndert sich nur ganz langsam vom linken zum rechten und vom oberen zum unteren Bildrand) links oben dargestellt. Wenn das lieber in der Mitte dargestellt werden soll: F=fftshift(F). Paar weitere Beispiele: Wichtige Anmerkung aus der Digitalen Signalverarbeitung: A key property of the Fourier transform is that the multiplication of two Fourier transforms corresponds to the convolution of the associated spatial functions. This property, together with the fast Fourier transform, forms the basis for a fast convolution algorithm. Daher wird (v.a. bei l?ngeren Feldern) die Faltung durch Multiplikation der Fouriertransformierten durchgef?hrt. Beispiel: Feature Extraction mit Korrelation: Text mit verschiedenen Buchstaben in verschiedenen Orientierungen; suche alle waagrechten 'a'. Konzept: Bilde die Korrelation zwischen dem grossen Bild rechts und dem kleinen links: An Orten, wo Buchstaben liegen, gibts helle Flecken: Die Korrelation wird technisch durchgef?hrt im Frequenzraum: bilde FT des Text-Bildes sowie des mit Nullen aufgef?llten Bildes des Buchstaben a rotiere Buchstabenbild um 90 Grad f?r die Korrelation f?hre punktweise die Multiplikation durch bilde die inverse Transformation mit ifft &amp;gt;&amp;gt; bw = imread('text.png');&amp;gt;&amp;gt; a = bw(32:45,88:98);&amp;gt;&amp;gt; C = real(ifft2(fft2(bw) .* fft2(rot90(a,2),256,256)));&amp;gt;&amp;gt; imshow(C,[])  % Skalierung  Schaue nach, wo die Punkte besonders hell sind: max(C(:))    ans = 68.000thresh = 60; figure, imshow(C &amp;gt; thresh) Anmerkung Die Toolbox beherrscht noch diverse weitere Transformationen, z.B. die Diskrete Cosinus Transformation mit anderen Basisfunktionen als bei der Fouriertransformation. Der Vorteil ist, dass die wesentliche Bildinformation i.d.R. mit ganz wenig Koeffizienten &amp;gt;0 beschrieben werden; das Verfahren eignet sich also sehr gut zur Bildkompression. 6. Morphologische Operationen Morphologie fasst eine gro?e Menge von Bildverarbeitungsoperationen zusammen, die Bilder auf der Basis von Formen bearbeiten. Sehr fortgeschrittenes Beispiel: Separating touching objects in an image is one of the more difficult image processing operations Die grundlegenden morphologischen Prozesse sind Dilatation und Erosion (Bilder aus Wikipedia: Dilatation (oben) und Erosion (unten) mit Hilfe eines Kreises als strukturierendem Element): Dilatation f?gt also Pixel an Grenzen von Objekten hinzu, Erosion entfernt welche. Welche Pixel und wieviele es sind, wird definiert durch die Form und Gr??e des strukturierenden Elements. Konkret: Operation Rule Dilation The value of the output pixel is the maximum value of all the pixels in the input pixel's neighborhood. In a binary image, if any of the pixels is set to the value 1, the output pixel is set to 1. Erosion The value of the output pixel is the minimum value of all the pixels in the input pixel's neighborhood. In a binary image, if any of the pixels is set to 0, the output pixel is set to 0. Zum strukturienden Element (bestehend nur aus 1en und 0en): You typically choose a structuring element the same size and shape as the objects you want to process in the input image. For example, to find lines in an image, create a linear structuring element. Am besten nimmt man die Funktion strel. Beispiel: &amp;gt;&amp;gt; SE=strel('diamond',4) SE =  Flat STREL object containing 41 neighbors.Decomposition: 3 STREL objects containing a total of 13 neighbors  Neighborhoodilatieren mit imdilate(BW,SE) und erodieren mit imerode(BW,SE) kann man Grauwert- und Bin?rbilder (BW). Morphologisches ?ffnen eines Bildes bezeichnet die Erosion und anschlie?ende Dilatation eines Bildes mit dem gleichen strukturienden Element. Zweck: Erhaltung von Form und Gr??e von gr??eren Bildobjekten bei gleichzeitiger Unterdr?ckung von (kleinen) St?rungen. Beispiel: Mikroskopaufnahme eines Chips. Die Leiterbahnen sollen herausgefiltert werden, die Prozesorelemente als Bl?cke erhalten bleiben: BW1 = imread('circbw.tif');SE = strel('rectangle',[40 30]);BW2 = imerode(BW1,SE);% in EinzelschrittenBW3 = imdilate(BW2,SE);BW3 = imopen(BW1,SE);% Kurzversion imshow(BW3);       Nach der Erosion alleine hat das Bild so ausgeschaut: Als Skelettierung wird eine Klasse von Verfahren der Bildverarbeitung bezeichnet, bei der ein fl?chenhaftes Bildobjekt in eine 1 Bildpunkt breite Skelettlinie umgewandelt. Die Skelettierung wird beispielsweise eingesetzt, um Linien zu verd?nnen. Die verd?nnten Linien lassen sich gut vektorisieren. Auch kann ein Skelett zur Datenreduktion eingesetzt werden. Weitere Anwendungen finden sich unter anderem in der Medizin, Biologie, Schrift-, Muster- und Fingerabdruckerkennung. (aus Wikipedia) BW1 = imread('circbw.tif'); BW2 = bwmorph(BW1,'skel',Inf);imshow(BW1)figure, imshow(BW2) Abgrenzungen (Perimeter Determination) BW1 = imread('circbw.tif'); BW2 = bwperim(BW1);imshow(BW1)figure, imshow(BW2)                             Was gibt's noch? Morphological Reconstruction: automatische wiederholte Dilatation, solange, bis die Kontouren einer vorgegebenen Maske erreicht sind. Prozess basiert auf Konnektivit?t. Flood Filling Operations: f?llt st?rende 'L?cher' automatisch Finding Peaks and Valleys Distance Transform: bestimme Abst?nde zwischen Bildobjekten Labeling: finde zusammenh?ngende Objekte in einem Bild und bestimme deren Eigenschaften 7. Analyse und Verbesserung von Bildern Intensit?tsprofile Intensit?tsverlauf entlang eines Geradensegments (2D-Plot) oder eines Pfades aus vielen Geradenst?cken (3D-Plot): I = fitsread('solarspectra.fts');% lese astronomisches Bildimshow(I,[]);improfile% interaktiv Linie(n) eingeben Bei RGB-Bildern gibt's drei Kurven! Kontourplot I = imread('rice.png');        % greyscaleimshow(I)figure, imcontour(I,3)% 3 levels Kantendetektion Es wird mit raffinierten Methoden nach Orten gesucht, wo die Intensit?t sich schnell ?ndert. Am meisten verbreitet: Canny (2-stufiger Threshold f?r dicke und d?nne Linien) und (als Vorstufe) Sobel - Algorithmus, beide realisiert ?ber Faltung mit einem Flilterkernel (Canny mehrstufig). I = imread('coins.png');imshow(I)BW1 = edge(I,'sobel');BW2 = edge(I,'canny');imshow(BW1)figure, imshow(BW2) Markierung von Objektgrenzen Konzept: erzeuge zus?tzlich z.B. zum Greyscale-Bild eine schwarz/weiss-Version, lasse dann z.B. bwboundaries drauf los: B = bwboundaries(BW) traces the exterior boundaries of objects, as well as boundaries of holes inside these objects, in the binary image BW. I = imread('coins.png');imshow(I) BW = im2bw(I);imshow(BW) BW_filled = imfill(BW,'holes');        % sonst hat die eine M?nze L?cherboundaries = bwboundaries(BW_filled);% liefert cell Array zur?ckimshow(I); hold onfor k=1:10   b = boundaries{k};   plot(b(:,2),b(:,1),'g','LineWidth',3);   % parametric plot der Grenzenend Linien-Extraktion mit der Hough-Transformation Wikipedia schreibt: Die Hough-Transformation ist ein robustes globales Verfahren zur Erkennung von Geraden, Kreisen oder beliebigen anderen parametrisierbaren geometrischen Figuren in einem bin?ren Gradientenbild, also einem schwarz/wei? Bild, nach einer Kantenerkennung. Brut Force-Methode, untersuche alle Pixel einer Kante, baue die sog. Standard Hough Transformierte auf, die H?ufigkeiten im (rho,theta)-Raum notiert. rho ist dabei der Abstand vom Ursprung einer Geraden, theta der Winkel zwischen Geradensenkrechte und der x-Achse. Dann: Bestimmung der Peaks in diesem Parameterraum, die m?gliche Linien im Bild kennzeichnen. Am Ende werden daraus die Anfangs- und Endpunkte der Linien im Bild gefunden. I  = imread('circuit.tif');rotI = imrotate(I,33,'crop');% damit es interessanter wirdfig1 = imshow(rotI);BW = edge(rotI,'canny');figure, imshow(BW); &amp;gt;&amp;gt; [H,theta,rho] = hough(BW);&amp;gt;&amp;gt; P = houghpeaks(H,5,'threshold',ceil(0.3*max(H(:))));&amp;gt;&amp;gt; lines = houghlines(BW,theta,rho,P,'FillGap',5,'MinLength',7);figure, imshow(rotI), hold onmax_len = 0;for k = 1:length(lines)   xy = [lines(k).point1; lines(k).point2];   plot(xy(:,1),xy(:,2),'LineWidth',2,'Color','green');         % Plot beginnings and ends of lines   plot(xy(1,1),xy(1,2),'x','LineWidth',2,'Color','yellow');   plot(xy(2,1),xy(2,2),'x','LineWidth',2,'Color','red');                  % Determine the endpoints of the longest line segment   len = norm(lines(k).point1 - lines(k).point2);   if ( len &amp;gt; max_len)      max_len = len;      xy_long = xy;   endend                                       % highlight the longest line segmentplot(xy_long(:,1),xy_long(:,2),'LineWidth',2,'Color','red'); Noch viel komplexer: Texturanalyse - auch da liefert Matlab viele Tools mit Gamma-Korrektur Das Bild ist zu dunkel, obwohl imhist zeigt, dass sowohl dunkle als auch helle Elemente im Bild vorkommen. Lineares Strecken oder Verschieben im Helligkeitshistogramm bringt nichts, man muss das Histogramm nichtlinear bearbeiten: die Abbildung der Helligkeitswerte im Input- und Output-Bild erfolgt gewichtet in Richtung h?herer, hellerer Werte (Gamma&amp;lt;1) oder in Richtung niedrigerer, dunklerer Werte (Gamma&amp;gt;1). Hier: [X,map] = imread('forest.tif');I = ind2gray(X,map);J = imadjust(I,[],[],0.5);imshow(I)figure, imshow(J); Anmerkung: Es gibt in Matlab noch zahlreiche weitere Funktionen, um das Helligkeits-Histogramm von Bildern zu modifizieren. Bei Farbbildern kann man z.B. in die Farbseparation eingreifen:   ?  Entfernung von Rauschen Simple Filter wie z.B. lokale Mittelwertbildung bringen i.d.R. recht wenig, verschmieren aber daf?r scharfe Kanten. Besser ist adaptives Filtern. Hier wird ein spezielles lineares Filter (sog. Wiener-Filter) lokal sensitiv angewandt: an Stellen, wo Helligkeitsschwankungen gro? sind, wird wenig gefiltert, wo die Varianz klein ist, stark. RGB = imread('saturn.png');I = rgb2gray(RGB);% mache greyscale drausJ = imnoise(I,'gaussian',0,0.025);% k?nstlich verrauschenimshow(J);K = wiener2(J,[5 5]);figure, imshow(K);   ?   8. Was gibt's sonst noch in der Image Processing Toolbox? Regions of Interests ROIs sind Teile eines Bildes, die interaktiv oder durch Koordinaten, Kreise etc. bestimmt und dann durch Bin?rmasken definiert werden. Man kann dann z.B. nur hier filtern (z.B. Sch?rfen) oder auch auff?llen mit der Umgebungsfarbe. Deblurring bezeichnet das Herausrechnen von Unsch?rfe, verursacht z.B. durch Bewegung oder unscharfen Fokus:   ?   Das gest?rte Bild ergibt sich mathematisch aus dem ungest?rten, gefaltet mit einem sog. distortion operator. Um das ungest?rte Bild zu erhalten, muss man nur 'entfalten' (deconvolution). Die gro?e Kunst ist es, den distortion operator zu finden - so gut wie in der Demo geht es fast nie. Hilfreich ist es, wenn man die Ursache der Unsch?rfe kennt. Oft muss auch iteriert werden. Mit recht viel Aufwand schafft man folgende Reduzierung einer Falschfokussierung:   ?   Andere Farbr?ume Im Computer arbeitet man eigentlich immer im RGB-Farbraum (entweder ?ber true color oder mit RGB-Colormaps). K?nstler arbeiten gerne im HSV-Raum (hue=Farbton, saturation=S?ttigung, value=Hellwert/Dunkelstufe) (Bild aus Wikipedia):</field>
<field name="important">Einführung in Matlab ? Kap.V: Image processing Toolbox? Einführung in Matlab ? Kap.V: Image processing Toolbox? Einführung in Matlab Fritz Wünsch, Stand 19.2.14 Kap.V: Die Image Processing Toolbox (? pdf ) In diesem Abschnitt gibt's eine Einführung in die wissenschaftliche Bildverarbeitung mit Hilfe der Image Processing Toolbox von Matlab. Dieses Thema ist in einer Vielzahl von Disziplinen von Bedeutung, z.B. in der medizinischen Bildverarbeitung, bei bildgebenden Verfahren in der Materialanalyse, in der (Mikro)biologie. Wir lernen das Image Tool kennen, um Bilder zu untersuchen, beschäftigen uns mit Bildtransformationen, um z.B. Verzerrungen herauszurechnen, mit Filtern in der Raum- und Frequenzdomäne und Fouriertransformation, mit Morphologie (Erosion, Dilatation), mit Kantendetektion und weiteren Verfahren. Vieles hier kann nur kurz angerissen und demonstriert werden, eine fundierte Behandlung der Thematik ist in dieser K?rze nat?rlich nicht m?glich. Dieses File ist ein sehr stark komprimierer Auszug aus dem User-Manual der Image-Processing-Toolbox, an einigen Stellen erg?nzt z.B. durch Wikipedia-Material. Bilder in Matlab Lesen und Schreiben von Bildern Bilder darstellen und untersuchen R?umliche Transformationen Filterung in der Orts- und Frequenz-Dom?ne, 2D-FFT Morphologische Operationen Analyse und Verbesserung von Bildern Was gibt's sonst noch in der Image Processing Toolbox? 1. Bilder in Matlab Bilder werden i.d.R. in ganz normalen Arrays abgespeichert; 1 Array-Element = 1 Pixel. Oft reichen 2dim. Arrays aus, f?r sog. Truecolor-Bilder ist eine dritte Dimension n?tig ('RGB'). Als Koordinatensysteme werden verwendet: Pixel-Koordinaten (links) und Raumkoordinaten (rechts) Typen von Bildern Image Type Interpretation Binary (Also known as a bilevel image) Logical array containing only 0s and 1s, interpreted as black and white, respectively. Indexed (Also known as a pseudocolor image) Array of class logical, uint8, uint16, single, or double whose pixel values are direct indices into a colormap. The colormap is an m-by-3 array of class double [0..1]. For single or double arrays, integer values range from [1, p]. For logical, uint8, or uint16 arrays, values range from [0, p-1] (p = length of the colormap) Grayscale (Also known as an intensity, gray scale, or gray level image) Array of class uint8, uint16, int16, single, or double whose pixel values specify intensity values. For single or double arrays, values range from [0, 1]. For uint8, values range from [0,255]. For uint16, values range from [0, 65535]. For int16, values range from [-32768, 32767]. Truecolor (Also known as an RGB image) m-by-n-by-3 array of class uint8, uint16, single, or double whose pixel values specify intensity values. For single or double arrays, values range from [0, 1]. For uint8, values range from [0, 255]. For uint16, values range from [0, 65535]. Binary Images (Abk?rzung: BW) Indexed Images (Pixel-Array+Colormap) An einer bestimmten Bildposition steht '5' im Pixel-Array. In der Colormap-Variable beim Index 5 steht der wirkliche RGB-Wert. Lesen des Bildes samt Colormap: [Bild,map]=imread('forest.tif');imshow(Bild,map)  ?ber die Option 'View' ? 'Property Editor' im Header des Bildes k?nnen andere Colormaps gew?hlt werden. Grayscale Images Grayscale Images sind i.d.R. ohne Colormap abgespeichert; Pixel-Eintrag=0: schwarz, =1: weiss Truecolor Images Truecolor Images verwenden keine Colormap!. Bild=imread('demo.jpg');Bild=imread('football.jpg'); Wandeln zwischen den Bildklassen Es gibt unterschiedliche Bildverarbeitungsmethoden in Matlab je nach Bildklasse. Beispiel: Digitales Filtern funktioniert nicht mit Pseudocolor-Bildern. Wichtige Routinen: gray2ind Convert a grayscale image to an indexed image. im2bw Convert a grayscale image, indexed image, or truecolor image, to a binary image, based on a luminance threshold. ind2grey Convert an indexed image to a grayscale image. ind2rgb Convert an indexed image to a truecolor image. rgb2grey Convert a truecolor image to a grayscale image. rgb2ind Convert a truecolor image to an indexed image. Beispiel: Bild=imread('demo.jpg');% lese truecolor image[IndexedBild,map]=rgb2ind(Bild,128);% wandle in indexed image %    mit 128 Colormap-Eintr?genimshow(IndexedBild,map)% Anzeige Bild-Arithmetik Im Prinzip kann man die ganz normalen arithmetischen Matlab-(Matrix-)Operationen verwenden. Es passiert aber sehr leicht ein Bereichs-Overflow. Daher besser dedizierte Operationen verwenden wie K = imlincomb(.5,Image1,.5,Image2);  2. Lesen und Schreiben von Bildern Informationen ?ber eine Bilddatei &amp;gt;&amp;gt; imfinfo('demo.jpg')       Filename: 'demo.jpg'    FileModDate: '14-Apr-2009 10:39:55'       FileSize: 30565         Format: 'jpg'  FormatVersion: ''          Width: 556         Height: 364       BitDepth: 24      ColorType: 'truecolor'FormatSignature: ''NumberOfSamples: 3   CodingMethod: 'Huffman'  CodingProcess: 'Sequential'        Comment: {} Welche Standard-Bilddatei-Formate werden unterst?tzt? &amp;gt;&amp;gt; imformats  EXT       ISA     INFO        READ      WRITE     ALPHA  DESCRIPTION                             ------------------------------------------------------------------------------------------------ bmp       isbmp   imbmpinfo   readbmp   writebmp  0      Windows Bitmap (BMP) cur       iscur   imcurinfo   readcur             1      Windows Cursor resources (CUR) fts fits  isfits  imfitsinfo  readfits            0      Flexible Image Transport System (FITS) gif       isgif   imgifinfo   readgif   writegif  0      Graphics Interchange Format (GIF) hdf       ishdf   imhdfinfo   readhdf   writehdf  0      Hierarchical Data Format (HDF) ico       isico   imicoinfo   readico             1      Windows Icon resources (ICO) jpg jpeg  isjpg   imjpginfo   readjpg   writejpg  0      Joint Photographic Experts Group (JPEG) pbm       ispbm   impnminfo   readpnm   writepnm  0      Portable Bitmap (PBM) pcx       ispcx   impcxinfo   readpcx   writepcx  0      Windows Paintbrush (PCX) pgm       ispgm   impnminfo   readpnm   writepnm  0      Portable Graymap (PGM) png       ispng   impnginfo   readpng   writepng  1      Portable Network Graphics (PNG) pnm       ispnm   impnminfo   readpnm   writepnm  0      Portable Any Map (PNM) ppm       isppm   impnminfo   readpnm   writepnm  0      Portable Pixmap (PPM) ras       isras   imrasinfo   readras   writeras  1      Sun Raster (RAS) tif tiff  istif   imtifinfo   readtif   writetif  0      Tagged Image File Format (TIFF) xwd       isxwd   imxwdinfo   readxwd   writexwd  0      X Window Dump (XWD) Als Matlab-Objekt wird ein Bild immer als Objekt einer der vier o.g. Bildklassen dargestellt, egal, ob die Datei jpg, tiff, png etc. war. RGB = imread('football.jpg');   % lese truecolor image[X,map] = imread('trees.tif');  % lese indexed image Die Bildarrays werden gem?? der Informationsmenge in der Datei gestaltet. JPG z.B. liefert ein uint8-Array, PNG und TIFF ein uint16. Schreiben von Bildern imwrite(Bild,'dateiname.jpg');           % schreibe truecolor imageimwrite(Bild,map,'dateiname.jpg');              % schreibe indexed imageimwrite(Bild,'dateiname.jpg','Quality','100');  % truecolor mit Optionen Nat?rlich kann man ein Tiff-File lesen und es dann als jpg abspeichern ... Anmerkung: Matlab unterst?tzt den im medizinischen Bereich sehr weit verbreiteten Standard DICOM (Digital Imaging and Communications in Medicine) (lesend und schreibend, siehe weiter unten) Auch diverse weitere spezielle Image-Typen werden unterst?tzt, z.B. High Dynamic range Images mit 32-Bit-Floatingpoint-RGB-Werten. 3. Bilder darstellen und untersuchen Display von Bildern mit image (aus dem Matlab-Core-System) imshow (Basisroutine, aus der Image Processing Toolbox; setzt automatisch Achsen-Eigenschaften u.?.) imtool (fortgeschrittenes Tool, aus der Image Processing Toolbox; setzt automatisch Achsen-Eigenschaften u.?.) Ein paar Anmerkungen: Standard-Verfahren: bringe Bild in Workspace mit bild=imread('dateiname'), dann erst anzeigen imshow('moon.tif') z.B. stellt das Bild direkt dar. In den Workspace gelangt es (u.U. modifiziert) erst mit bild=getimage. nat?rlich kann man in eine Figur 2 Bilder malen; sind es indexed images, sollten sie die gleiche Colormap benutzen, sonst gibt's meist Unsinn. Das Image Tool imtool('moon.tif') Ein paar integrierte Tools: Pixel Information tool ? for getting information about the pixel under the pointer Pixel Region tool ? for getting information about a group of pixels Distance tool ? for measuring the distance between two pixels Image Information tool ? for getting information about image and image file metadata Adjust Contrast tool and associated Window/Level tool ? for adjusting the contrast of the image displayed in the Image Tool and modifying the actual image data. You can save the adjusted data to the workspace or a file. Crop Image tool ? for defining a crop region on the image and cropping the image. You can save the cropped image to the workspace or a file. Display Range tool ? for determining the display range of the image data Colormap-Auswahl Importing und Exporting von Daten Drucken von Bildern In addition, the Image Tool provides several navigation aids that can help explore large images: Overview tool ? for determining what part of the image is currently visible in the Image Tool and changing this view. Pan tool ? for moving the image to view other parts of the image Zoom tool ? for getting a closer view of any part of the image. Scroll bars ? for navigating over the image. Justiere Kontrast und Helligkeit Interaktiv (sog. Window/Level-Tool): The following table summarizes how these mouse motions affect the size and position of the window in the Adjust Contrast tool. Mouse Motion Effect Horizontally to the left Shrinks the window from both sides. Horizontally to the right Expands the window from both sides. Vertically up Moves the window to the right over the histogram, increasing brightness. Vertically down Moves the window to the left over the image histogram, decreasing brightness. Sehr sch?ne Demo mit medizinischem Bild: &amp;gt;&amp;gt; I=dicomread('CT-MONO2-16-ankle.dcm');&amp;gt;&amp;gt; imtool(I)                     % Greyscale-Bild ohne Skalierung&amp;gt;&amp;gt; imtool(I,'DisplayRange',[])   % automatische Skalierung Movie Player Lade mal Satz von MR-Daten (Kopf): &amp;gt;&amp;gt; load mristack%mristack       256x256x21       1276256     uint8&amp;gt;&amp;gt; implay(mristack) Anmerkung: Nat?rlich k?nnen AVI-Movies erzeugt werden, die dann auch ohne Matlab ablaufen. Erstellen eines eigenen GUI (Graphical User Interface) f?r spezielle Aufgaben der Bildverarbeitung Die in imtool eingebauten Werkzeuge sind auch einzeln verf?gbar und und modular zusammenstellbar. Besonders nettes Beispiel: Creating an Angle Measurement Tool (zur zum Vermitteln eines ersten Eindruckes, Details werden hier nicht erkl?rt). The toolbox includes a set of functions that you can use to enable users of your image processing GUI to define a region-of-interest (ROI) on the target image. The functions implement drawing of various shapes of ROI, such as rectangles, ellipses, and polygons, and returning information about the coordinates that define the ROI. These ROI objects support methods that you can use to control aspects of its appearance and behavior. To illustrate how to use these ROI tools, this example creates a simple angle measurement tool This custom tool uses impoly to create a two-segment polyline on an image and displays the angle created by the two line segments in a title in the figure. Users of the tool can move the polyline anywhere on the image and view the angle formed by the two line segments. function my_angle_measurement_tool(im)% ------------------------------------% Create figure, setting up propertiesfigure('Name','My Angle Measurement Tool',...      'NumberTitle','off',...      'IntegerHandle','off');% Display image in the axes % Display imageimshow(im)% Get size of image.m = size(im,1);n = size(im,2);% Get center point of image for initial positioning.midy = ceil(m/2);  % rundenmidx = ceil(n/2);% Position first point vertically above the middle.firstx = midx;firsty = midy - ceil(m/4);lastx = midx + ceil(n/4);lasty = midy;% Create a two-segment right-angle polyline centered in the image.h = impoly(gca,[firstx,firsty;midx,midy;lastx,lasty],'Closed',false);api = iptgetapi(h); %  Get Application Programmer Interface (API) for handleinitial_position = api.getPosition()% Display initial positionupdateAngle(initial_position)% set up callback to update angle in title.api.addNewPositionCallback(@updateAngle);fcn = makeConstrainToRectFcn('impoly',get(gca,'XLim'),get(gca,'YLim'));api.setPositionConstraintFcn(fcn);% Callback function that calculates the angle and updates the title.% Function receives an array containing the current x,y position of% the three vertices.function updateAngle(p)% Create two vectors from the vertices.% v1 = [x1 - x2, y1 - y2]% v2 = [x3 - x2, Y3 - y2]v1 = [p(1,1)-p(2,1), p(1,2)-p(2,2)];v2 = [p(3,1)-p(2,1), p(3,2)-p(2,2)];% Find the angle.theta = acos(dot(v1,v2)/(norm(v1)*norm(v2)));% Convert it to degrees.angle_degrees = (theta * (180/pi));% Display the angle in the title of the figure.title(sprintf('(%1.0f) degrees',angle_degrees)) To use the angle measurement tool, pass it an image. I = imread('gantrycrane.png');my_angle_measurement_tool(I); The tool opens a figure window, displaying the image with the angle measure tool centered over the image in a right angle. Move the pointer over any of the vertices of the tool to measure any angle in the image. In the following figure, the tool is measuring an angle in the image. Note the size of the angle displayed in the title of the figure. 4. R?umliche Transformationen Resizing J = imresize(I,1.25); % x und y um Faktor 1.25J = imresize(I,[100 150])   % Output-Groesse 100x150 (u.U. verzerrt) Bei Vergr??erung wird Interpolation angewandt (per Default bikubisch), bei Verkleinerung Antialiasing, um harte Stufen und Moiré-Effekte zu reduzieren. Drehung J = imrotate(I,35,'bilinear');  % um 35Grad gegen Uhrzeigersinn Wieder Interpolation (im Beispiel explizit 'bilinear' angegeben); per Default wird neues Bild so gross, dass alle Pixel des gedrehten Bildes sichtbar sind. Cropping (Beschneiden) I = imread('circuit.tif'); imshow(I)J = imcrop(I,[60 40 100 90]);% feste Koordinatenimshow(J);J = imcrop(I);% interaktiv Allgemeine 2D-Raumtransformationen Diese umfassen affine (lineare) Transformationen und (Schr?g-)Projektionen. Transformation Type Description 'affine' Transformation that can include translation, rotation, scaling, and shearing. Straight lines remain straight, and parallel lines remain parallel, but rectangles might become parallelograms. 'projective' Transformation in which straight lines remain straight but parallel lines converge toward vanishing points. (The vanishing points can fall inside or outside the image -- even at infinity.) Affine Transform Example Transformation Matrix Translation tx specifies the displacement along the x axis ty specifies the displacement along the y axis. Scale sx specifies the scale factor along the x axis sy specifies the scale factor along the y axis. Shear shx specifies the shear factor along the x axis shy specifies the shear factor along the y axis. Rotation q specifies the angle of rotation. Das Matlab-Verfahren geht ganz allgemein so: Lege die 3x3-Transformationsmatrix fest oder definiere einen Satz von Ausgangs- und End-Punkten (3 bei affin, 4 bei Projektion) erzeuge mit Matlab-Befehl maketform "a multidimensional spatial transformation structure (called a TFORM struct)" F?hre die Transformation durch mit imtransform(Bild,tform) Beispiel: % Verschiebung um je 40 Punkte in X und Yxform = [ 1  0  0          0  1  0         40 40  1 ]tform_translate = maketform('affine',xform);cb_trans= imtransform(cb, tform_translate);          % mit Punktencb=checkerboard;imshow(cb)in_points = [11 11;21 11; 21 21]out_points = [51 51;61 51;61 61]tform = maketform('affine',in_points,out_points)cb_trans = imtransform(cb, tform); Anmerkung: Matlab beherrscht auch die Projektion eines 2dimensionalen Musters auf eine beliebige Oberfl?che, mit entsprechendem Resampling des Originals (ohne weitere Erl?uterung): I = checkerboard(20,1,1);figure; imshow(I)T = maketform('projective',[1 1; 41 1; 41 41;   1 41],...              [5 5; 40 5; 35 30; -10 30]);R = makeresampler('cubic','circular');K = imtransform(I,T,R,'Size',[100 100],'XYScale',1);figure, imshow(K) Bildregistrierung Auszug aus Wikipedia: Bildregistrierung ist ein wichtiger Prozess in der digitalen Bildverarbeitung und wird dazu benutzt, zwei oder mehrere Bilder derselben Szene bestm?glich in ?bereinstimmung miteinander zu bringen. Dabei wird eines der Bilder als Referenzbild festgelegt und die anderen Bilder sind dann die Objektbilder. Es wird dann eine Transformation berechnet, die die Objektbilder bestm?glich an das Referenzbild anpasst. Die zu registrierenden Bilder unterscheiden sich voneinander, weil sie von unterschiedlichen Positionen, zu unterschiedlichen Zeitpunkten oder mit unterschiedlichen Sensoren aufgenommen wurden. Bildregistrierungsverfahren sind vor allem in der medizinischen Bildverarbeitung h?ufig anzutreffen. Dort werden Bilder, die mit verschiedenen bildgebenden Verfahren gewonnen wurden, aneinander angeglichen. Somit k?nnen besser Erkenntnisse aus diesen Bildern gewonnen werden. So k?nnen z. B. MRT-Bilder, auf denen gut Weichteilgewebe, wie Gehirnstrukturen, dargestellt werden, mit PET-Bildern, die bestimmte Stoffwechselprozesse sichtbar machen, miteinander registriert und dann ?berlagert werden, um nachvollziehen zu k?nnen, in welchen Gehirnbereichen bestimmte Stoffwechselprozesse stattfinden. Ein weiteres Anwendungsbeispiel ist das Zusammenf?gen mehrerer Satellitenbilder zu einer gro?en Karte. Da die Erdoberfl?che rund ist und sich die Position des Satelliten von Bild zu Bild ?ndert, kommt es innerhalb der Bilder zu kleinen Verzerrungen, die mit Registrierungsverfahren aneinander angeglichen werden k?nnen. Das Ziel bei der Bildregistrierung ist es, eine Transformation T zu finden, die ein gegebenes Quellbild (Objektbild) F bestm?glich mit einem Zielbild (Referenzbild) G in ?bereinstimmung bringt. Die bestm?gliche ?bereinstimmung wird dabei durch ein Ma? D f?r die Gleichheit oder die Ungleichheit der Bilder charakterisiert. Bildregistrierung ist also ein Optimierungsproblem, da es darum geht D(T(F), G) zu minimieren (falls D die Ungleichheit misst) bzw. zu maximieren (falls D die Gleichheit misst). Achtung! Ab Matlab2013b Verfahren leicht modifiziert! % perfekt normiertes und entzerrtes Fotoorthophoto = imread('westconcordorthophoto.png'); figure, imshow(orthophoto) % Luftfoto, gedreht, perspektivisch verzerrt   unregistered = imread('westconcordaerial.png');      figure, imshow(unregistered) Methode: cpselect erlaubt es, Kontroll-Punkte interaktiv festzulegen und im Workspace abzulegen: cpselect(unregistered, orthophoto) fixedPoints =221.6250  189.8750200.6250  241.3750144.1250  286.3750181.8750  124.8750        movingPoints =        186.2500  167.2500176.2500  230.2500127.2500  292.2500137.7500  105.7500 cp2tform macht daraus einen Datenfit, um die optimale Transformation zu bestimmen. Dabei kann/muss der Typ der Transformation angegeben werden. Es gibt vier globale Transformationen, darunter 'affin' und 'projective'. Wenn damit das Ergebnis noch nicht gut genug ist, sind zus?tzlich lokale Transformationen sinnvoll. Die Zahl der notwendigen Punkte ist nat?rlich von der Art der Transformation abh?ngig. In diesem Beispiel: Verzerrung nur durch Kamera-Position, nicht durch Relief des Terrains, also reicht 'projective', das auch rotiert: &amp;gt;&amp;gt; mytform = cp2tform(movingPoints, fixedPoints, 'projective');&amp;gt;&amp;gt; registered = imtransform(unregistered, mytform);&amp;gt;&amp;gt; figure;&amp;gt;&amp;gt; imshow(registered)&amp;gt;&amp;gt; hold on&amp;gt;&amp;gt; h=imshow(orthophoto);&amp;gt;&amp;gt; set(h,'AlphaData',0.6);% justiere Transparenz (Sehr gutes) Ergebnis (auf Anhieb klappt's meist nicht so gut): 5. Filterung in der Orts- und Frequenz-Dom?ne, 2D-FFT Filterung ganz allgemein, um bestimmte Bild-Features zu verst?rken oder abzuschw?chen, wie z.B. Kanten. Filtern ist immer eine Nachbarschafts-Operation, ein Output-Pixel ist die gewichtete Summe der Input-Pixel in der Umgebung. Hier nur: lineare Gewichtung. Mathematische Implementierung ?ber Faltung: Dabei ist I(x,y) das Bild, K(u,v) der Filter(kernel). Das Design von guten Filtern ist eine absolute Kunst! daf?r gibt's speziell die Digital Signal Processing Toolbox. http://www.rn-wissen.de/index.php/Bildverarbeitung_Tutorial liefert eine sch?ne ?bersicht: Tabelle der Faltungskerne Faltungskern Beschreibung Unsch?rfeoperator, gl?ttet Kanten im Bild horizontaler Sobel-Operator, hebt waagerechte Kanten hervor vertikaler Sobel-Operator, hebt senkrechte Kanten hervor hebt Kanten in Nordostrichtung (schr?g rechts nach oben) hervor hebt Kanten in S?dostrichtung (schr?g rechts nach unten) hervor Zur Rechenmethode: 1dimensional schaut ja eine Faltung/Filterung so aus: M-1 ?   I i - j   K j   =   I' i   (M: L?nge des Filterkernels) j=0 Das heisst also, Element i des gefalteten Signals I' ergibt sich aus dem Originalsignal I und dem Filterkernel K gem?? I' 6 = ... + I 3 K 3 + I 4 K 2 + I 5 K 1 + I 6 K 0     (Faltung) Beim Aufsummieren muss man sozusagen den Filterkern von hinten lesen. Die Korrelation ist ein sehr ?hnliches Verfahren wie die Faltung, hier wird aber das zweite Element nicht umgedreht: I' 6 = ... + I 3 K 3 + I 4 K 4 + I 5 K 5 + I 6 K 6     (Korrelation) 2dimensional l?uft die Faltung so: For example, suppose the image is A = [17  24   1   8  15      23   5   7  14  16      4   6  13  20  22     10  12  19  21   3     11  18  25   2   9] and the convolution kernel is h = [8   1   6     3   5   7     4   9   2] The following figure shows how to compute the (2,4) output pixel using these steps: Rotate the convolution kernel 180 degrees about its center element. Slide the center element of the convolution kernel so that it lies on top of the (2,4) element of A. Multiply each weight in the rotated convolution kernel by the pixel of A underneath. Sum the individual products from step 3. Hence the (2,4) output pixel is imfilter ist die Matlab-Operation, um die Korrelation (imfilter(Bild,Kern)) bzw. Faltung (imfilter(Bild,Kern,'conv') mit einem Filter durchzuf?hren. Hier ein ziemlich unsinniges Beispiel - jedes Pixel ist einfach der Mittelwert der [5x5]-Umgebung: I = imread('coins.png');h = ones(5,5) / 25;I2 = imfilter(I,h);imshow(I), title('Original Image');figure, imshow(I2), title('Filtered Image') Anmerkung zu den Datentypen: intern arbeitet imfilter mit doppeltgenauen Realzahlen, das Ergebnis wird dann gerundet bzw. abgeschnitten auf den Ursprungstyp (bei uint8 z.B. gibt's auch nach der Filterung keine negativen Pixel). Erzeugung von Filterkernen mit fspecial (Signal processing Toolbox hierf?r nicht n?tig). Beispiel mit sog. unsharp masking filter, um den Kontrast zu erh?hen I = imread('moon.tif');h = fspecial('unsharp');I2 = imfilter(I,h);imshow(I), title('Original Image')figure, imshow(I2), title('Filtered Image') Anmerkung f?r Profis: zur Bildverarbeitung sind nur sog. finite impulse response filter (FIR) geeignet, wo die Outputpunkte die gewichtetet Summe von Input-Punkten sind. infinite impulse response filter, die bei der Berechnung der Output-Werte bereits vorher berechnete andere Outputwerte mit einbeziehen, sind viel schneller und werden ?fters bei eindimensionalen Signalen benutzt, f?r die Bildverarbeitung sind sie aber zu instabil. Filterung in der Frequenzdomaine Hier geht es darum, nicht einfach Bilder 'sch?ner' zu machen, sondern ganz spezifisch gewisse Frequenzbereiche zu unterdr?cken. Einfach im eindimensionalen Fall (Impulse Response = Filter Kernel) (Bilder aus http://www.dspguide.com/): Die Image processing Toolbox erlaubt das Design von 2dimensionalen Filtern mit definierter Frequenzcharakteristik auf mehrere Arten: gebe mit Hilfe einer Matrix von Punkten das gew?nschte Frequenzverhalten (z.B. Tiefpass) vor. Es wird ein Filterkern berechnet, der durch diese Punkte geht, dazwischen aber stark oszilliert. Verbesserung durch die sog. Windowing Method. ftrans2 erzeugt aus einem eindimensionalen Filter (z.B. berechnet mit Hilfe der Digital Signal Processing Toolbox) das entsprechende 2dimensionale Pendant. Die Scientific/Educational Matlab Database der TU München bietet ein Tool zur interaktiven Hoch- und Tiefpassfilterung von Bildern an. Das GUI ist nicht ganz stabil, trotzdem ist das Tool ganz nett: Fouriertransformation Berechnung der Frequenzanteile eines Signals mit der trickreichen Fast Fourier Transformation. Beispiel eindimensional: &amp;gt;&amp;gt; t=zeros(1,512);&amp;gt;&amp;gt; t(230:270)=1;&amp;gt;&amp;gt; ft=log(abs(fft(t)));&amp;gt;&amp;gt; plot(ft(1:256));&amp;gt;&amp;gt; plot(t); Die FT einer Rechteckfunktion ist die sog. sinc-Funktion sin(t)/t. Wird der Rechteckpuls in der Zeit/Orts-Domaine schmaler, laufen die Seitenb?nder der FT auseinander. 2dimensional analog: Eine Frequenz bezieht sich auf die x-Richtung, die andere auf die y-Richtung. f = zeros(30,30);f(5:24,13:17) = 1;imshow(f,'InitialMagnification','fit') Nun die r?umliche FT: &amp;gt;&amp;gt; F=fft2(f);&amp;gt;&amp;gt; F2=log(abs(F)); &amp;gt;&amp;gt; imshow(F2,[-1 5],'InitialMagnification','fit'); colormap(jet); colorbar Zwei Sachen kann man noch verbessern. Zun?chst: f?lle Eingangsbild mit Nullen auf 256x256 Pixel und mache dann die FT. Beides zusammen erledigt die Befehlsversion F=fft2(f,256,256). Das Ergebnis resultiert dann in einer besseren Frequenzaufl?sung: In dieser Darstellung sind die niedrigsten Ortsfrequenzen (eine Bildinformation ist praktisch ortsunabh?ngig oder ?ndert sich nur ganz langsam vom linken zum rechten und vom oberen zum unteren Bildrand) links oben dargestellt. Wenn das lieber in der Mitte dargestellt werden soll: F=fftshift(F). Paar weitere Beispiele: Wichtige Anmerkung aus der Digitalen Signalverarbeitung: A key property of the Fourier transform is that the multiplication of two Fourier transforms corresponds to the convolution of the associated spatial functions. This property, together with the fast Fourier transform, forms the basis for a fast convolution algorithm. Daher wird (v.a. bei l?ngeren Feldern) die Faltung durch Multiplikation der Fouriertransformierten durchgef?hrt. Beispiel: Feature Extraction mit Korrelation: Text mit verschiedenen Buchstaben in verschiedenen Orientierungen; suche alle waagrechten 'a'. Konzept: Bilde die Korrelation zwischen dem grossen Bild rechts und dem kleinen links: An Orten, wo Buchstaben liegen, gibts helle Flecken: Die Korrelation wird technisch durchgef?hrt im Frequenzraum: bilde FT des Text-Bildes sowie des mit Nullen aufgef?llten Bildes des Buchstaben a rotiere Buchstabenbild um 90 Grad f?r die Korrelation f?hre punktweise die Multiplikation durch bilde die inverse Transformation mit ifft &amp;gt;&amp;gt; bw = imread('text.png');&amp;gt;&amp;gt; a = bw(32:45,88:98);&amp;gt;&amp;gt; C = real(ifft2(fft2(bw) .* fft2(rot90(a,2),256,256)));&amp;gt;&amp;gt; imshow(C,[])  % Skalierung  Schaue nach, wo die Punkte besonders hell sind: max(C(:))    ans = 68.000thresh = 60; figure, imshow(C &amp;gt; thresh) Anmerkung Die Toolbox beherrscht noch diverse weitere Transformationen, z.B. die Diskrete Cosinus Transformation mit anderen Basisfunktionen als bei der Fouriertransformation. Der Vorteil ist, dass die wesentliche Bildinformation i.d.R. mit ganz wenig Koeffizienten &amp;gt;0 beschrieben werden; das Verfahren eignet sich also sehr gut zur Bildkompression. 6. Morphologische Operationen Morphologie fasst eine gro?e Menge von Bildverarbeitungsoperationen zusammen, die Bilder auf der Basis von Formen bearbeiten. Sehr fortgeschrittenes Beispiel: Separating touching objects in an image is one of the more difficult image processing operations Die grundlegenden morphologischen Prozesse sind Dilatation und Erosion (Bilder aus Wikipedia: Dilatation (oben) und Erosion (unten) mit Hilfe eines Kreises als strukturierendem Element): Dilatation f?gt also Pixel an Grenzen von Objekten hinzu, Erosion entfernt welche. Welche Pixel und wieviele es sind, wird definiert durch die Form und Gr??e des strukturierenden Elements. Konkret: Operation Rule Dilation The value of the output pixel is the maximum value of all the pixels in the input pixel's neighborhood. In a binary image, if any of the pixels is set to the value 1, the output pixel is set to 1. Erosion The value of the output pixel is the minimum value of all the pixels in the input pixel's neighborhood. In a binary image, if any of the pixels is set to 0, the output pixel is set to 0. Zum strukturienden Element (bestehend nur aus 1en und 0en): You typically choose a structuring element the same size and shape as the objects you want to process in the input image. For example, to find lines in an image, create a linear structuring element. Am besten nimmt man die Funktion strel. Beispiel: &amp;gt;&amp;gt; SE=strel('diamond',4) SE =  Flat STREL object containing 41 neighbors.Decomposition: 3 STREL objects containing a total of 13 neighbors  Neighborhoodilatieren mit imdilate(BW,SE) und erodieren mit imerode(BW,SE) kann man Grauwert- und Bin?rbilder (BW). Morphologisches ?ffnen eines Bildes bezeichnet die Erosion und anschlie?ende Dilatation eines Bildes mit dem gleichen strukturienden Element. Zweck: Erhaltung von Form und Gr??e von gr??eren Bildobjekten bei gleichzeitiger Unterdr?ckung von (kleinen) St?rungen. Beispiel: Mikroskopaufnahme eines Chips. Die Leiterbahnen sollen herausgefiltert werden, die Prozesorelemente als Bl?cke erhalten bleiben: BW1 = imread('circbw.tif');SE = strel('rectangle',[40 30]);BW2 = imerode(BW1,SE);% in EinzelschrittenBW3 = imdilate(BW2,SE);BW3 = imopen(BW1,SE);% Kurzversion imshow(BW3);       Nach der Erosion alleine hat das Bild so ausgeschaut: Als Skelettierung wird eine Klasse von Verfahren der Bildverarbeitung bezeichnet, bei der ein fl?chenhaftes Bildobjekt in eine 1 Bildpunkt breite Skelettlinie umgewandelt. Die Skelettierung wird beispielsweise eingesetzt, um Linien zu verd?nnen. Die verd?nnten Linien lassen sich gut vektorisieren. Auch kann ein Skelett zur Datenreduktion eingesetzt werden. Weitere Anwendungen finden sich unter anderem in der Medizin, Biologie, Schrift-, Muster- und Fingerabdruckerkennung. (aus Wikipedia) BW1 = imread('circbw.tif'); BW2 = bwmorph(BW1,'skel',Inf);imshow(BW1)figure, imshow(BW2) Abgrenzungen (Perimeter Determination) BW1 = imread('circbw.tif'); BW2 = bwperim(BW1);imshow(BW1)figure, imshow(BW2)                             Was gibt's noch? Morphological Reconstruction: automatische wiederholte Dilatation, solange, bis die Kontouren einer vorgegebenen Maske erreicht sind. Prozess basiert auf Konnektivit?t. Flood Filling Operations: f?llt st?rende 'L?cher' automatisch Finding Peaks and Valleys Distance Transform: bestimme Abst?nde zwischen Bildobjekten Labeling: finde zusammenh?ngende Objekte in einem Bild und bestimme deren Eigenschaften 7. Analyse und Verbesserung von Bildern Intensit?tsprofile Intensit?tsverlauf entlang eines Geradensegments (2D-Plot) oder eines Pfades aus vielen Geradenst?cken (3D-Plot): I = fitsread('solarspectra.fts');% lese astronomisches Bildimshow(I,[]);improfile% interaktiv Linie(n) eingeben Bei RGB-Bildern gibt's drei Kurven! Kontourplot I = imread('rice.png');        % greyscaleimshow(I)figure, imcontour(I,3)% 3 levels Kantendetektion Es wird mit raffinierten Methoden nach Orten gesucht, wo die Intensit?t sich schnell ?ndert. Am meisten verbreitet: Canny (2-stufiger Threshold f?r dicke und d?nne Linien) und (als Vorstufe) Sobel - Algorithmus, beide realisiert ?ber Faltung mit einem Flilterkernel (Canny mehrstufig). I = imread('coins.png');imshow(I)BW1 = edge(I,'sobel');BW2 = edge(I,'canny');imshow(BW1)figure, imshow(BW2) Markierung von Objektgrenzen Konzept: erzeuge zus?tzlich z.B. zum Greyscale-Bild eine schwarz/weiss-Version, lasse dann z.B. bwboundaries drauf los: B = bwboundaries(BW) traces the exterior boundaries of objects, as well as boundaries of holes inside these objects, in the binary image BW. I = imread('coins.png');imshow(I) BW = im2bw(I);imshow(BW) BW_filled = imfill(BW,'holes');        % sonst hat die eine M?nze L?cherboundaries = bwboundaries(BW_filled);% liefert cell Array zur?ckimshow(I); hold onfor k=1:10   b = boundaries{k};   plot(b(:,2),b(:,1),'g','LineWidth',3);   % parametric plot der Grenzenend Linien-Extraktion mit der Hough-Transformation Wikipedia schreibt: Die Hough-Transformation ist ein robustes globales Verfahren zur Erkennung von Geraden, Kreisen oder beliebigen anderen parametrisierbaren geometrischen Figuren in einem bin?ren Gradientenbild, also einem schwarz/wei? Bild, nach einer Kantenerkennung. Brut Force-Methode, untersuche alle Pixel einer Kante, baue die sog. Standard Hough Transformierte auf, die H?ufigkeiten im (rho,theta)-Raum notiert. rho ist dabei der Abstand vom Ursprung einer Geraden, theta der Winkel zwischen Geradensenkrechte und der x-Achse. Dann: Bestimmung der Peaks in diesem Parameterraum, die m?gliche Linien im Bild kennzeichnen. Am Ende werden daraus die Anfangs- und Endpunkte der Linien im Bild gefunden. I  = imread('circuit.tif');rotI = imrotate(I,33,'crop');% damit es interessanter wirdfig1 = imshow(rotI);BW = edge(rotI,'canny');figure, imshow(BW); &amp;gt;&amp;gt; [H,theta,rho] = hough(BW);&amp;gt;&amp;gt; P = houghpeaks(H,5,'threshold',ceil(0.3*max(H(:))));&amp;gt;&amp;gt; lines = houghlines(BW,theta,rho,P,'FillGap',5,'MinLength',7);figure, imshow(rotI), hold onmax_len = 0;for k = 1:length(lines)   xy = [lines(k).point1; lines(k).point2];   plot(xy(:,1),xy(:,2),'LineWidth',2,'Color','green');         % Plot beginnings and ends of lines   plot(xy(1,1),xy(1,2),'x','LineWidth',2,'Color','yellow');   plot(xy(2,1),xy(2,2),'x','LineWidth',2,'Color','red');                  % Determine the endpoints of the longest line segment   len = norm(lines(k).point1 - lines(k).point2);   if ( len &amp;gt; max_len)      max_len = len;      xy_long = xy;   endend                                       % highlight the longest line segmentplot(xy_long(:,1),xy_long(:,2),'LineWidth',2,'Color','red'); Noch viel komplexer: Texturanalyse - auch da liefert Matlab viele Tools mit Gamma-Korrektur Das Bild ist zu dunkel, obwohl imhist zeigt, dass sowohl dunkle als auch helle Elemente im Bild vorkommen. Lineares Strecken oder Verschieben im Helligkeitshistogramm bringt nichts, man muss das Histogramm nichtlinear bearbeiten: die Abbildung der Helligkeitswerte im Input- und Output-Bild erfolgt gewichtet in Richtung h?herer, hellerer Werte (Gamma&amp;lt;1) oder in Richtung niedrigerer, dunklerer Werte (Gamma&amp;gt;1). Hier: [X,map] = imread('forest.tif');I = ind2gray(X,map);J = imadjust(I,[],[],0.5);imshow(I)figure, imshow(J); Anmerkung: Es gibt in Matlab noch zahlreiche weitere Funktionen, um das Helligkeits-Histogramm von Bildern zu modifizieren. Bei Farbbildern kann man z.B. in die Farbseparation eingreifen:   ?  Entfernung von Rauschen Simple Filter wie z.B. lokale Mittelwertbildung bringen i.d.R. recht wenig, verschmieren aber daf?r scharfe Kanten. Besser ist adaptives Filtern. Hier wird ein spezielles lineares Filter (sog. Wiener-Filter) lokal sensitiv angewandt: an Stellen, wo Helligkeitsschwankungen gro? sind, wird wenig gefiltert, wo die Varianz klein ist, stark. RGB = imread('saturn.png');I = rgb2gray(RGB);% mache greyscale drausJ = imnoise(I,'gaussian',0,0.025);% k?nstlich verrauschenimshow(J);K = wiener2(J,[5 5]);figure, imshow(K);   ?   8. Was gibt's sonst noch in der Image Processing Toolbox? Regions of Interests ROIs sind Teile eines Bildes, die interaktiv oder durch Koordinaten, Kreise etc. bestimmt und dann durch Bin?rmasken definiert werden. Man kann dann z.B. nur hier filtern (z.B. Sch?rfen) oder auch auff?llen mit der Umgebungsfarbe. Deblurring bezeichnet das Herausrechnen von Unsch?rfe, verursacht z.B. durch Bewegung oder unscharfen Fokus:   ?   Das gest?rte Bild ergibt sich mathematisch aus dem ungest?rten, gefaltet mit einem sog. distortion operator. Um das ungest?rte Bild zu erhalten, muss man nur 'entfalten' (deconvolution). Die gro?e Kunst ist es, den distortion operator zu finden - so gut wie in der Demo geht es fast nie. Hilfreich ist es, wenn man die Ursache der Unsch?rfe kennt. Oft muss auch iteriert werden. Mit recht viel Aufwand schafft man folgende Reduzierung einer Falschfokussierung:   ?   Andere Farbr?ume Im Computer arbeitet man eigentlich immer im RGB-Farbraum (entweder ?ber true color oder mit RGB-Colormaps). K?nstler arbeiten gerne im HSV-Raum (hue=Farbton, saturation=S?ttigung, value=Hellwert/Dunkelstufe) (Bild aus Wikipedia):</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/edverg/matlab/ml1.html</field>
<field name="title">Einführung in Matlab ? Kap.I: Grundlagen</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/edverg/matlab/ml1.html</field>
<field name="content">Einführung in Matlab ? Kap.I: Grundlagen Einführung in Matlab ? Kap.I: Grundlagen Einführung in Matlab Fritz Wünsch, Stand 19.2.14 Kap.I: Grundlagen (? pdf ) Um was geht es? Matlab an der Uni Regensburg Die ersten Schritte Die Online-Hilfe Grundlegendes Matrizen-Handling Matrix-Subscripts Ausdrücke Weitere Vektor- und Matrizen-Operationen Logical Subscripting Input- und Output-Kontrolle 1. Um was geht es? Ein Auszug aus Wikipedia - Matlab: MATLAB ist eine kommerzielle, plattformunabhängige Software des Unternehmens The MathWorks, Inc. zur Lösung mathematischer Probleme und zur grafischen Darstellung der Ergebnisse. MATLAB ist primär für numerische Berechnungen mithilfe von Matrizen ausgelegt, woher sich auch der Name ableitet: MATrix LABoratory. MATLAB dient im Gegensatz zu Computeralgebrasystemen nicht der symbolischen, sondern primär der numerischen (zahlenmäßigen) Lösung von Problemen. Die Software wird in Industrie und an Hochschulen vor allem für numerische Simulation sowie Datenerfassung, Datenanalyse und -auswertung eingesetzt. Programmiert wird unter MATLAB in einer proprietären Programmiersprache, die interpretiert wird. Kleinere Programme können als so genannte Skripts oder Funktionen zu atomaren Einheiten verpackt werden, was das Erstellen von anwendungsorientierten Werkzeugkisten (Toolboxes) erlaubt. Viele solcher Pakete sind auch kommerziell erhältlich. Durch die vereinfachte, mathematisch orientierte Syntax der MATLAB-Skriptsprache und die umfangreichen Funktionsbibliotheken für Statistik, Signalverarbeitung, Bildverarbeitung u.v.m. ist die Erstellung entsprechender Programme wesentlich einfacher möglich als z.B. unter C. Ferner gibt es Schnittstellen, um C-Code einzubinden, sowie einen Übersetzer, mit dem aus einem Skript unabhängig von MATLAB lauffähiger C-Code erstellt werden kann. Damit können mathematisch aufwendige Module für C-Projekte in der MATLAB-Umgebung entwickelt und getestet werden. Historie: MATLAB wurde Ende der 1970er Jahre an der Universität New Mexico entwickelt, um den Studenten die Fortran-Bibliotheken LINPACK und EISPACK für lineare Algebra von einer Kommandozeile aus ohne Programmier-Kenntnisse in Fortran zugänglich zu machen. 1984 wurde The MathWorks gegründet und MATLAB zu einem kommerziellen Produkt gemacht, zusammen mit einer ersten Funktions-Sammlung, der Control System Toolbox; Anwender vor allem in der Regelungstechnik. Heute beinhaltet MATLAB die BLAS- und LAPACK-Libraries. Nur als Randanmerkung: die Fa. Mathworks vertreibt auch Simulink. Dieses Produkt wird hier im Kurs nicht behandelt, ist an der Uni Regensburg in sehr geringem Umfang nur an der Wirtschafts-Fakultät im Einsatz: Simulink ist eine Software des Herstellers The MathWorks zur Modellierung von Systemen (technisch, physikalisch, finanzmathematisch, ...). Simulink ist ein Zusatzprodukt zu MATLAB und benötigt dieses zum Ausführen. (siehe Wikipedia) Und noch eine Randanmerkung: Comsol ist eine Software zur Simulation physikalischer Vorgänge, die mittels Differenzialgleichungen beschrieben werden können. ... Das Programm basiert auf der sogenannten Finite-Elemente-Methode (FEM) und wird in Forschung, Lehre und Entwicklung eingesetzt. ... Es entstand aus einer Toolbox für MATLAB, der Partial Differential Equation (PDE) Toolbox. COMSOL Multiphysics bietet eine bidirektionale Schnittstelle zu MATLAB und Simulink, welche eine Skriptsteuerung von COMSOL Multiphysics über die MATLAB-Skriptsprache ermöglicht. (siehe Wikipedia) Wer COMSOL mal anschauen möchte: in der Physik-Arbeitsgruppe Prof.Repp ist es im Einsatz. 2. Matlab an der Uni Regensburg Reine Lehrlizenzen sind recht preiswert, wir haben daher für die Windows-CIP-Pools 50 Lizenzen des Core-Systems sowie je 10 Toolboxes Image Processing und Signal Processing beschafft (aus Studienbeiträgen der Psychologie und der Physik). Forschunglizenzen sind teuer! An der UR gibt's es 38, im März 14 sollen weitere 25 hinzugekauft werden ( ? Doku zu unseren Forschungslizenzen). Bitte Matlab immer beenden, wenn es gerade nicht mehr benötigt wird, und nie mehr als eine Lizenz belegen! Wer gerade welche Forschungslizenz belegt, kann abgefragt werden über   licstat matlab   an einer beliebigen Linux-Maschine auf dem Campus. Für die Forschung haben wir auch folgende Toolboxes: 5   Curve fitting toolboxes 15   Image Processing toolboxes 5   Optimization toolboxes 5   Partial differential equations toolboxes 9   Signal processing toolboxes 5   Statistics toolboxes 3   Parallel Computing Toolbox 2   Global Optimization Toolbox 2   Model-Based Calibration Toolbox 2   Neural Network Toolbox 2   Symbolic Math Toolbox 1   MATLAB Compiler 1   Bioinformatics toolbox 2   Simulink Aktuell ist MATLAB R2013b (andere Bezeichnung: 8.2) vom Herbst 2013 (i.d.R. gibt es zwei Versionen pro Jahr). Unter Linux ist diese Version jedoch nur bei einem 64Bit-System verfügbar, das letzte 32Bit-System ist hier die Version R2011b (oder 7.13). Eine Studentenversion von Matlab R2014a kostete am 14.4.2014 69?. Enthalten sind hier MATLAB, Simulink, Control System Toolbox, Simulink Control Design, Image Processing Toolbox, Optimization Toolbox, Signal Processing Toolbox, DSP System Toolbox, Statistics Toolbox, Symbolic Math Toolbox, Data Acquisition Toolbox and Instrument Control Toolbox. Matlab allein kostete 35?. Welche Matlab-Toolboxen der Fa. Mathworks erhältlich sind, ist unter diesem Link nachzulesen. Studenten zahlen für die meisten Toolboxes nur 20? extra. Octave - Freie Alternative Gerade für zu Hause bietet sich GNU-Octave an. Es ist weitgehend zu MATLAB kompatibel, die Graphik basiert aber auf gnuplot. Mehr Infos: Wikipedia - GNU Octave www.gnu.org: Octave Von G.S. habe ich den Hinweis auf FreeMat bekommen ? er ist sehr zufrieden damit! 3. Die ersten Schritte Nach dem Start von Matlab erscheint folgender Bildschirm (Details hängen von der Version ab, alles im Kurs Besprochene funktioniert auch schon mit der Version 2007b; hier die Version 2012b): In der Mitte ist das Command Window. Wir haben bereits eine simple 3x3-Matrix A eingegeben. Als nächstes haben wir eingetippt: B=sqrt(A). Wir sehen, dass von jedem Element die Wurzel gezogen wird - das ist die Matrix-Orientierung von Matlab! Eine einfache Zahl ist eine 1x1-Matrix. Rechts unten ist die Command History zu sehen, in der man blättern und per Mausclick frühere Befehle nochmals ausführen kann. Außerdem gibt's noch links oben ein Directory-Listing, rechts oben werden alle benutzen Variablen dargestellt (der sog. Workspace ). Die Fenster sind beliebig konfigurierbar!. Hier noch ein etwas vollerer Workspace: Der erste Plot Tippen wir mal ein: &amp;gt;&amp;gt; t=1:100;  % ein Strichpunkt unterdrueckt Bildschirm-Ausgabe&amp;gt;&amp;gt; plot(sin(t/2/pi)) Durch den schrägen Pfeil rechts oben kann der Plot an das Matlab-Hauptfenster angedockt werden, was oft sehr praktisch ist. Jeder Plot kann interaktiv bearbeitet werden, siehe Menü-Symbole. M-Files Alle Matlab-Befehle können direkt im Command Window eingegeben werden, was besonders zum Testen ideal ist. Später werden wir die Befehle mit einem Editor in ein sog. M-File eingeben, das kann in einem Rutsch interpretiert wird. Unser Matlab-Kurs In dem einwöchigen Kurs werden die Grundlagen bereitgestellt und eingeübt, um mit Matlab mathematische Probleme aus Studium und Forschung lösen zu können. Natürlich wird auch später noch intensiv die Obline-Hilfe konsultiert werden müssen (siehe nächster Punkt). Oft werden auch einige numerische Kenntnisse gefragt sein, die an dieser Stelle nicht vermittelt werden können. Einen guten Einstieg zur anwendungsorientierten Numerik mit Matlab bietet z.B. das Kapitel 10 von MATLAB 7: Eine Einführung; Christoph W. Überhuber et.al., Springer-Verlag 4. Die Online-Hilfe Über (Ressources ?) Help ? Product Help bzw. Documentation (so war der Weg bei älteren Versionen; bei der aktuellen findet man's leichter; oder einfach die Taste F1) gibt's eine detaillierte Online-Hilfe für Matlab an sich und alle gekauften Toolboxes. Außerdem gibt's eine Fülle an Demos. Im folgenden Bild ist die ausführliche Hilfsseite zu sinh gezeigt, hier in der Version 2012a. Eine Kurzversion erhält man, wenn man help sinh eintippt. 5. Grundlegendes Matrizen-Handling Eingabe einer Matrix zeilenweise; die Spalten sind durch Blank oder , getrennt, jede Zeile durch ; oder CR abgeschlossen, alle Elemente in eckigen Klammern: &amp;gt;&amp;gt; A=[16 3 2 13; 5 10 11 8; 9 6 7 12; 4 15 14 1]A =    16     3     2    13     5    10    11     8     9     6     7    12     4    15    14     1 So können wir Zeilen- und Spaltenvektoren erzeugen: &amp;gt;&amp;gt; x=[1,2,3]x =     1     2     3&amp;gt;&amp;gt; y=[1;2;3]y =     1     2     3 Matlab ist casesensitive! Variablennamen mit ä, ß etc. sind nicht erlaubt! Alles hinter % sind Kommentare. Zwei Befehle können - durch , getrennt - in einer Zeile stehen: &amp;gt;&amp;gt; b=a+5, c=x-3 A.'   transponiert eine Matrix, A'   bildet die Adjungierte (komplexe Einheit: i oder j) &amp;gt;&amp;gt; B=[1+i 2-i; 3+2*i i]   1.0000 + 1.0000i   2.0000 - 1.0000i   3.0000 + 2.0000i        0 + 1.0000i&amp;gt;&amp;gt; Bad=B'Bad =   1.0000 - 1.0000i   3.0000 - 2.0000i   2.0000 + 1.0000i        0 - 1.0000i&amp;gt;&amp;gt; Btrans=B.'Btrans =   1.0000 + 1.0000i   3.0000 + 2.0000i   2.0000 - 1.0000i        0 + 1.0000i Beispiele für weitere Matrixoperationen: A =    16     3     2    13     5    10    11     8     9     6     7    12     4    15    14     1 sum(A) liefert als Zeilenvektor jeweils die Summe aller Spaltenelemente (MATLAB hat eine Vorliebe für die Spalten einer Matrix ...). Wenn man einer Matlab-Antwort keinen Variablennamen zuweist, bekommt sie automatisch den Namen ans. &amp;gt;&amp;gt; sum(A)ans = 34    34    34    34 diag(A) liefert einen (Spalten-)vektor aus den Diagnonalelementen einer Matrix: &amp;gt;&amp;gt; diag(A)ans =    16    10     7     1 Hinweis: clc (clear command window) schafft oft Übersicht ... 6. Matrix-Subscripts A(i,j) bezeichnet das Element in Zeile i und Spalte j. abgespeichert sind Matrizen spaltenweise. Z.B. bei einer 4x4-Matrix geht auch folgende Schreibweise: A(1) ? entspricht A(1,1)A(4) ? enstpricht A(4,1)A(5) ? entspricht A(1,2) usw. Durch Zuordnung zu einem Element ausserhalb der (bisherigen) Matrix wird die Matrix automatisch erweitert. Nicht explizit belegte Elemente werden auf 0 gesetzt. &amp;gt;&amp;gt; X=AX =    16     3     2    13     5    10    11     8     9     6     7    12     4    15    14     1&amp;gt;&amp;gt; X(4,5)=17X =    16     3     2    13  |  0     5    10    11     8  |  0     9     6     7    12  |  0     4    15    14     1  | 17 Ganz wichtig Doppelpunkt-Operator : . Mit ihm lassen sich implizite Schleifen realisieren, die extrem schnell abgearbeitet werden. Erste Anwendung: 1:10 ist ein Zeilenvektor aus den Ganzzahlen von 1 bis 10; auch andere Abstände als 1 sind möglich wie -7 oder pi/4: &amp;gt;&amp;gt; 1:10ans =     1     2     3     4     5     6     7     8     9    10&amp;gt;&amp;gt; 100:-7:50ans =   100    93    86    79    72    65    58    51&amp;gt;&amp;gt; 0:pi/4:pians =         0    0.7854    1.5708    2.3562    3.1416 Subskripts mit einem Doppelpunkt beziehen sich auf Teile einer Matrix: A(1:k,j) bezeichnet die ersten k Elemente der j-ten Spalte, : alleine alle Elemente einer Zeile oder Spalte, end kennzeichnet die letzte Spalte oder Zeile. &amp;gt;&amp;gt; AA =    16     3     2    13     5    10    11     8     9     6     7    12     4    15    14     1&amp;gt;&amp;gt; A(1,:)ans =    16     3     2    13&amp;gt;&amp;gt; A(:,1)ans =    16     5     9     4&amp;gt;&amp;gt; A(:,end)ans =    13     8    12     1 A( : , [1 3 2 4] ) vertauscht Spalten 2 und 3 7. Ausdrücke Es gibt keine Typ-Deklaration von Variablen und keine Dimensionierung. Bei einer Zuweisung wird der Inhalt geändert und bei Bedarf auch Speicherplatz alloziert. Falls b noch nicht bekannt ist: die Anweisung b=17 erzeugt eine 1x1-Matrix und belegt sie mit der angegebenen Zahl. Konstanten können in Integer-, Dezimal- oder wissenschaftlicher Darstellung eingegeben werden. Interne Zahlendarstellung und Rechnung immer als float long gemäß IEEE-Norm (8 Bytes), Genauigkeit 16 Dezimalstellen, Bereich 10-308 ... 10308. Selbst die Zahl "1" wird so dargestellt: &amp;gt;&amp;gt; a=1&amp;gt;&amp;gt; format hex&amp;gt;&amp;gt; aa =   3ff0000000000000&amp;gt;&amp;gt; int32(a)ans =   00000001 Echte Integer-Darstellung ist zwar in Matlab möglich, wird aber nur selten verwendet, und dann auch nicht immer so, wie man es von vielen Programmiersprachen gewohnt ist. Literatur: z.B. wieder MATLAB 7: Eine Einführung; Christoph W. Überhuber et. al.; Springer-Verlag. Bei Bildern und in der Digitalen Signalverarbeitung greift man oft auf echte Integer-Darstellung und -Verarbeitung zurück. Matlab kennt unzählige Funktionen zur elementaren und fortgeschrittenen Mathematik und zur Matrizen-Rechnung, siehe help elfun, help specfun, help elmat. Wo notwendig und sinnvoll, wird komplex gerechnet. &amp;gt;&amp;gt; conj(1+3i)ans =   1.0000 - 3.0000i Grundlegende Funktionen liegen aus Effizienz-Gründen im Maschinencode vor (Beispiel: Fouriertransformation fft ), andere in Matlab-Code als M-Files ? letztere können mit type ausgedruckt und natürlich auch modifiziert werden, z.B. mit dem Befehl edit (Beispiel Faltung conv oder was Umfangreicheres: ode23 ). Einige spezielle Konstanten sind pi, i, j sowie eps=2-52 (relative Floatingpoint-Genauigkeit), realmin=2-52, realmax=(2-eps)21023 sowie Inf (infinity) und NaN (not a number, z.B. 0/0). Alle Funktionsnamen können überschrieben werden, clear löscht die Belegung wieder (selektiv einen bestimmten Namen oder auch alles): &amp;gt;&amp;gt; cos=17cos =    17&amp;gt;&amp;gt; cos(3)??? Index exceeds matrix dimensions.&amp;gt;&amp;gt; clear cos&amp;gt;&amp;gt; cos(3)ans =   -0.9900&amp;gt;&amp;gt; i=17% auch die imaginäre Einheit kann überschrieben werden!i =    17&amp;gt;&amp;gt; j=23% das ist wohl ungeschickt ...j =    23&amp;gt;&amp;gt; c1=1+2*i% keine Möglichkeit mehr für komplexe Eingabec1 =    35&amp;gt;&amp;gt; clear i% jetzt geht's wieder&amp;gt;&amp;gt; c1=1+2*ic1 =   1.0000 + 2.0000i 8. Weitere Vektor- und Matrizen-Operationen Z=zeros(4) erzeugt eine leere 4x4-Matrix, Z=zeros(1,4) einen leeren Zeilenvektor, Z=zeros(2,4) eine leere 2x4-Matrix Z. Überall, wo sinnvoll, funktioniert der Aufruf der Funktionen mit einem oder zwei Parametern. Analog dazu: Z=17*ones(7) erzeugt eine 7x7-Matrix, alle Elemente sind 17. Ausserdem: Y = eye(n) returns the n-by-n identity matrix. X=randn(4): randn returns a pseudorandom, scalar value drawn from a normal distribution with mean 0 and standard deviation 1. X = randn(n) returns an n-by-n matrix of values derived as describe above. (gleichverteilte Zufallszahlen mit rand ) X =   -0.4326   -1.1465    0.3273   -0.5883   -1.6656    1.1909    0.1746    2.1832    0.1253    1.1892   -0.1867   -0.1364    0.2877   -0.0376    0.7258    0.1139&amp;gt;&amp;gt; Y=fix(X)% truncate auf ganze ZahlenY =     0    -1     0     0    -1     1     0     2     0     1     0     0     0     0     0     0&amp;gt;&amp;gt; Z=round(X)% gerundet Z =     0    -1     0    -1    -2     1     0     2     0     1     0     0     0     0     1     0 y = linspace(a,b,n) generates a row vector y of n points linearly spaced between and including a and b y = logspace(a,b,n) generates a row vector y of n logarithmically spaced points between decades 10^a and 10^b. Ein paar weitere Matrix- bzw. Vektor-Operation, die man immer wieder mal braucht: max: largest elements in array; Standard-Verfahren: if A is a matrix, max(A) treats the columns of A as vectors, returning a row vector containing the maximum element from each column. min: smallest elements in array d = size(X) returns the sizes of each dimension of array X in a vector d the rank function provides an estimate of the number of linearly independent rows or columns of a full matrix. vector and matrix norms: n = norm(A) (unterschiedlichster Art, siehe Online-Hilfe) sort: sort array elements in ascending or descending order; if A is a matrix, sort each column of A mean: mean value of array std, var, median: standard deviation, variance, median value Daten aus Files: load demo.dat erzeugt und belegt eine Matrix mit Namen demo, wenn demo.dat ein normales Textfile ist (Zahlen getrennt durch Blanks, Zeilen durch Return getrennt, jede Zeile hat gleiche Zahl von Elementen) pc54419:~&amp;gt; cat demo.dat    1.0668    0.2944   -0.6918   -1.4410    0.0593   -1.3362    0.8580    0.5711   -0.0956    0.7143    1.2540   -0.3999   -0.8323    1.6236   -1.5937    0.6900 Zur Info: If the filename has no extension, load looks for a file named filename.mat and treats it as a binary MAT-file. If filename has an extension other than .mat, load treats the file as ASCII data. Umgekehrt: save dateiname C F erzeugt eine Datei dateiname.mat im Binärformat mit den Variablen C und F. demo2 sucht die M-Datei mit Matlab-Code demo2.m und führt ihn aus. Da könnte z.B. drin stehen: demo = [    1.0668    0.2944   -0.6918   -1.4410    0.0593   -1.3362    0.8580    0.5711   -0.0956    0.7143    1.2540   -0.3999   -0.8323    1.6236   -1.5937    0.6900  ]; Nach der Eingabe von demo2 ist die Matrix demo erzeugt und belegt. Wer es noch nicht bemerkt hat: der Strichpunkt ; nach einem Matlab-Befehl bedeutet, dass der Befehl stumm ohne Ausgabe des Resultats abgearbeitet wird. Verknüpfung von Matrizen mit [ ]: &amp;gt;&amp;gt; A=magic(4)  % spezielle 'magische' Matrix erzeugenA =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; B=[A A+32; A+48 A+16]  % mache 8x8-Matrix darausB =    16     2     3    13  |  48    34    35    45     5    11    10     8  |  37    43    42    40     9     7     6    12  |  41    39    38    44     4    14    15     1  |  36    46    47    33    ---------------------------------------------    64    50    51    61  |  32    18    19    29    53    59    58    56  |  21    27    26    24    57    55    54    60  |  25    23    22    28    52    62    63    49  |  20    30    31    17 Zeilen und Spalten löschen: X =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; X(:,2)=[ ]   % alle Zeilen der zweiten Spalte werden leer X =    16     3    13     5    10     8     9     6    12     4    15     1&amp;gt;&amp;gt; X(1,2)=[ ]  % geht nicht, würde Matrix zersägen ??? Subscripted assignment dimension mismatch.&amp;gt;&amp;gt; X(2:2:10)=[ ]  % betrachte Matrix als Vektor, lösche Element 2,4,6,8,10X =    16     9     3     6    13    12     1 Durch den Löschvorgang kann Matlab die Daten natürlich nicht mehr als 4x3-Matrix darstellen, sie sind jetzt eine 1x7-Matrix, also ein Zeilenvektor. Addition (und Subtraktion) von Matrizen: &amp;gt;&amp;gt; A+A'ans =    32     7    12    17     7    22    17    22    12    17    12    27    17    22    27     2 Addition einer Matrix und ihrer Adjungierten gibt immer eine symmetrische Matrix. Matrix-Multiplikation: &amp;gt;&amp;gt; A'*Aans =   378   206   212   360   206   370   368   212   212   368   370   206   360   212   206   378 Matrix-Multiplikation der Adjungierten mit dem Original gibt auch wieder eine symmetrische Matrix. Vektor-Multiplikation: &amp;gt;&amp;gt; k=[1 0 -2]k =     1     0    -2&amp;gt;&amp;gt; l=[-3 3 7]l =    -3     3     7&amp;gt;&amp;gt; k*l% geht nicht!??? Error using ==&amp;gt; mtimesInner matrix dimensions must agree.&amp;gt;&amp;gt; k*l'% Skalarproduktans =   -17&amp;gt;&amp;gt; k'*l% dyadisches Produkt, Tensorproduktans =    -3     3     7     0     0     0     6    -6   -14 Determinante und Inverse: A =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; det(A)ans =     0&amp;gt;&amp;gt; inv(A)% die sollte es gar nicht gebenWarning: Matrix is close to singular or badly scaled.         Results may be inaccurate. RCOND = 1.306145e-17.ans =% Matlab merkt immerhin, dass da was faul ist   1.0e+14 *    0.9382    2.8147   -2.8147   -0.9382..... Matrix-Division: Für quadratische Matrizen A und B ist die Division definiert über A / B = A * B-1 Analog ist die Links-Division \ definiert über A \ B = A-1 * B. Anwendung: löse Gleichungssystem C * x = y oder x = C-1 * y = C \ y : &amp;gt;&amp;gt; C=[1 0 -1; 3 1 0; 0 0 1] % die ist nicht-singulärC =     1     0    -1     3     1     0     0     0     1&amp;gt;&amp;gt; y=[0 1 -3]% die Inhomogenitäty =     0     1    -3&amp;gt;&amp;gt; x=C\y% da passen die Dimensionen nicht zusammen!??? Error using ==&amp;gt; mldivideMatrix dimensions must agree.&amp;gt;&amp;gt; y=[0 1 -3]'% wir brauchen einen Spaltenvektor!y =     0     1    -3&amp;gt;&amp;gt; x=C\y% jetzt geht'sx =    -3    10    -3&amp;gt;&amp;gt; kontrolle=C*x% nachkontrollieren --&amp;gt; alles okkontrolle =     0     1    -3 Was ist, wenn A keine quadratische Matrix ist? In der Anleitung steht dazu: If A is an m-by-n matrix with m ~= n and B is a column vector with m components, or a matrix with several such columns, then X = A\B is the solution in the least squares sense to the under- or overdetermined system of equations AX = B (d.h. also, abs(AX-B) wird minimiert). Am zweiten Tag gibt's ein Beispiel dazu. Elementweise Array-Operationen:   .*   ./   .^ (Multiplizieren, Dividieren, Potenzieren): &amp;gt;&amp;gt; AA =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; A.*Aans =   256     4     9   169    25   121   100    64    81    49    36   144    16   196   225     1 Charakteristisches Polynom (poly), Eigenwerte und Eigenvektoren (eig): Finde die Werte w und die Vektoren v, für die gilt: A  v = w v. Die Eigenwerte sind die Nullstellen des charakteristischen Polynoms det(A - w  1). &amp;gt;&amp;gt; poly(A)ans =   1.0e+03 *    0.0010   -0.0340   -0.0800    2.7200   -0.0000% Charakteristisches Polynom = 1*w4 - 34*w3 - 80*w2 + 2720*w; &amp;gt;&amp;gt; eig(A)% nur die Eigenwerteans =   34.0000    8.9443   -8.9443    0.0000&amp;gt;&amp;gt; [v,w]=eig(A)  % spezielle Schreibweise mit 2 Ergebnisarraysv =% Eigenvektoren   -0.5000   -0.8236    0.3764   -0.2236   -0.5000    0.4236    0.0236   -0.6708   -0.5000    0.0236    0.4236    0.6708   -0.5000    0.3764   -0.8236    0.2236w =% Eigenwerte   34.0000         0         0         0         0    8.9443         0         0         0         0   -8.9443         0         0         0         0    0.0000&amp;gt;&amp;gt; A*v(:,1) % Verifikation beim ersten Eigenvektorans =  -17.0000  -17.0000  -17.0000  -17.0000 Tabellen-Erzeugung mit den Array-Operationen: &amp;gt;&amp;gt; n=(0:9)'n =     0     1     ....     8     9&amp;gt;&amp;gt; pows=[n n.^2 2.^n]pows =     0     0     1     1     1     2     ....     8    64   256     9    81   512&amp;gt;&amp;gt; x=(1:0.1:2)'x =    1.0000    1.1000    ....    1.9000    2.0000&amp;gt;&amp;gt; logs=[x log10(x)]logs =    1.0000         0    1.1000    0.0414    ....    1.9000    0.2788    2.0000    0.3010 Matrizen und Skalare: &amp;gt;&amp;gt; AA =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; B=A-8.5B =    7.5000   -6.5000   -5.5000    4.5000   -3.5000    2.5000    1.5000   -0.5000    0.5000   -1.5000   -2.5000    3.5000   -4.5000    5.5000    6.5000   -7.5000&amp;gt;&amp;gt; B(1:2,2:3)=NaN  % setze Teilbereich bestimmten WertB =    7.5000       NaN       NaN    4.5000   -3.5000       NaN       NaN   -0.5000    0.5000   -1.5000   -2.5000    3.5000   -4.5000    5.5000    6.5000   -7.5000 9. Logical Subscripting Konzepte: &amp;gt;&amp;gt; AA =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; isprime(A)  % was sind Primzahlen?ans =     0     1     1     1     1     1     0     0     0     1     0     0     0     0     0     0  &amp;gt;&amp;gt; x=[2.1 3.5 4.7 NaN 2.0 -3.8 4.17 NaN 2]x =    2.1000    3.5000    4.7000       NaN    2.0000   -3.8000    4.1700       NaN    2.0000&amp;gt;&amp;gt; isfinite(x)ans =     1     1     1     0     1     1     1     0     1     &amp;gt;&amp;gt; x(isfinite(x))ans =    2.1000    3.5000    4.7000    2.0000   -3.8000    4.1700    2.0000         &amp;gt;&amp;gt; x=x(isfinite(x))x =    2.1000    3.5000    4.7000    2.0000   -3.8000    4.1700    2.0000&amp;gt;&amp;gt; z=x(abs(x-mean(x))&amp;lt;=std(x)) % Ausreisser raus!z =    2.1000    3.5000    4.7000    2.0000    4.1700    2.0000 find - Funktion: suche die Indices, deren zugehörige Arrayelemente einer bestimmten Bedingung genügen: &amp;gt;&amp;gt; AA =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; k=find(isprime(A))'k =     2     5     6     7     9    13    % das sind die Indices&amp;gt;&amp;gt; A(k)ans =     5     2    11     7     3    13    % und das die zugehörigen Array-Elemente&amp;gt;&amp;gt; A(k)=NaN          % erhalte die Matrixstuktur und besetze diese Elemente A =    16   NaN   NaN   NaN   NaN   NaN    10     8     9   NaN     6    12     4    14    15     1 10. Input- und Output-Kontrolle Output-Formatierungen &amp;gt;&amp;gt; x=[4/3 1.2345e-6]x = 1.3333    0.0000% Vorsicht! kleine Zahl als 0 dargestellt! &amp;gt;&amp;gt; format shortx = 1.3333    0.0000&amp;gt;&amp;gt; format short ex = 1.3333e+00   1.2345e-06&amp;gt;&amp;gt; format short gx = 1.3333   1.2345e-06&amp;gt;&amp;gt; format longX = 1.333333333333333   0.000001234500000&amp;gt;&amp;gt; format long ex = 1.333333333333333e+00     1.234500000000000e-06&amp;gt;&amp;gt; format long gx = 1.33333333333333                1.2345e-06&amp;gt;&amp;gt; format ratx = 4/3            1/810045&amp;gt;&amp;gt; format hexx = 3ff5555555555555   3eb4b6231abfd271&amp;gt;&amp;gt; x=1&amp;gt;&amp;gt; format hex&amp;gt;&amp;gt; x   x = 3ff0000000000000 format allein stellt auf das Standardformat short zurück. Beachte die Hexadezimal-Darstellung der Zahl 1: auch ganze Zahlen werden i.d.R. als 8-Byte-Realzahlen gemäß IEEE-Norm abgespeichert. Weitere Input-/Output-Kontrollfeatures format compact sorgt insgesamt für kompakteren Output (weniger Leerzeilen). sprintf, fprintf bietet C-ähnliche Formatsteuerung: &amp;gt;&amp;gt; fprintf('%16.6f %12.4g \n',pi,exp(1))        3.141593        2.718  ... bedeutet, dass die Eingabe in der nächsten Zeile weitergeht: &amp;gt;&amp;gt; hr=1+1/2+1/4+1/8 ...+1/16+1/32+1/64hr = 1.9844 Command Line Editing: übliche Editor-Befehle</field>
<field name="important">Einführung in Matlab ? Kap.I: Grundlagen Einführung in Matlab ? Kap.I: Grundlagen Einführung in Matlab Fritz Wünsch, Stand 19.2.14 Kap.I: Grundlagen (? pdf ) Um was geht es? Matlab an der Uni Regensburg Die ersten Schritte Die Online-Hilfe Grundlegendes Matrizen-Handling Matrix-Subscripts Ausdrücke Weitere Vektor- und Matrizen-Operationen Logical Subscripting Input- und Output-Kontrolle 1. Um was geht es? Ein Auszug aus Wikipedia - Matlab: MATLAB ist eine kommerzielle, plattformunabhängige Software des Unternehmens The MathWorks, Inc. zur Lösung mathematischer Probleme und zur grafischen Darstellung der Ergebnisse. MATLAB ist primär für numerische Berechnungen mithilfe von Matrizen ausgelegt, woher sich auch der Name ableitet: MATrix LABoratory. MATLAB dient im Gegensatz zu Computeralgebrasystemen nicht der symbolischen, sondern primär der numerischen (zahlenmäßigen) Lösung von Problemen. Die Software wird in Industrie und an Hochschulen vor allem für numerische Simulation sowie Datenerfassung, Datenanalyse und -auswertung eingesetzt. Programmiert wird unter MATLAB in einer proprietären Programmiersprache, die interpretiert wird. Kleinere Programme können als so genannte Skripts oder Funktionen zu atomaren Einheiten verpackt werden, was das Erstellen von anwendungsorientierten Werkzeugkisten (Toolboxes) erlaubt. Viele solcher Pakete sind auch kommerziell erhältlich. Durch die vereinfachte, mathematisch orientierte Syntax der MATLAB-Skriptsprache und die umfangreichen Funktionsbibliotheken für Statistik, Signalverarbeitung, Bildverarbeitung u.v.m. ist die Erstellung entsprechender Programme wesentlich einfacher möglich als z.B. unter C. Ferner gibt es Schnittstellen, um C-Code einzubinden, sowie einen Übersetzer, mit dem aus einem Skript unabhängig von MATLAB lauffähiger C-Code erstellt werden kann. Damit können mathematisch aufwendige Module für C-Projekte in der MATLAB-Umgebung entwickelt und getestet werden. Historie: MATLAB wurde Ende der 1970er Jahre an der Universität New Mexico entwickelt, um den Studenten die Fortran-Bibliotheken LINPACK und EISPACK für lineare Algebra von einer Kommandozeile aus ohne Programmier-Kenntnisse in Fortran zugänglich zu machen. 1984 wurde The MathWorks gegründet und MATLAB zu einem kommerziellen Produkt gemacht, zusammen mit einer ersten Funktions-Sammlung, der Control System Toolbox; Anwender vor allem in der Regelungstechnik. Heute beinhaltet MATLAB die BLAS- und LAPACK-Libraries. Nur als Randanmerkung: die Fa. Mathworks vertreibt auch Simulink. Dieses Produkt wird hier im Kurs nicht behandelt, ist an der Uni Regensburg in sehr geringem Umfang nur an der Wirtschafts-Fakultät im Einsatz: Simulink ist eine Software des Herstellers The MathWorks zur Modellierung von Systemen (technisch, physikalisch, finanzmathematisch, ...). Simulink ist ein Zusatzprodukt zu MATLAB und benötigt dieses zum Ausführen. (siehe Wikipedia) Und noch eine Randanmerkung: Comsol ist eine Software zur Simulation physikalischer Vorgänge, die mittels Differenzialgleichungen beschrieben werden können. ... Das Programm basiert auf der sogenannten Finite-Elemente-Methode (FEM) und wird in Forschung, Lehre und Entwicklung eingesetzt. ... Es entstand aus einer Toolbox für MATLAB, der Partial Differential Equation (PDE) Toolbox. COMSOL Multiphysics bietet eine bidirektionale Schnittstelle zu MATLAB und Simulink, welche eine Skriptsteuerung von COMSOL Multiphysics über die MATLAB-Skriptsprache ermöglicht. (siehe Wikipedia) Wer COMSOL mal anschauen möchte: in der Physik-Arbeitsgruppe Prof.Repp ist es im Einsatz. 2. Matlab an der Uni Regensburg Reine Lehrlizenzen sind recht preiswert, wir haben daher für die Windows-CIP-Pools 50 Lizenzen des Core-Systems sowie je 10 Toolboxes Image Processing und Signal Processing beschafft (aus Studienbeiträgen der Psychologie und der Physik). Forschunglizenzen sind teuer! An der UR gibt's es 38, im März 14 sollen weitere 25 hinzugekauft werden ( ? Doku zu unseren Forschungslizenzen). Bitte Matlab immer beenden, wenn es gerade nicht mehr benötigt wird, und nie mehr als eine Lizenz belegen! Wer gerade welche Forschungslizenz belegt, kann abgefragt werden über   licstat matlab   an einer beliebigen Linux-Maschine auf dem Campus. Für die Forschung haben wir auch folgende Toolboxes: 5   Curve fitting toolboxes 15   Image Processing toolboxes 5   Optimization toolboxes 5   Partial differential equations toolboxes 9   Signal processing toolboxes 5   Statistics toolboxes 3   Parallel Computing Toolbox 2   Global Optimization Toolbox 2   Model-Based Calibration Toolbox 2   Neural Network Toolbox 2   Symbolic Math Toolbox 1   MATLAB Compiler 1   Bioinformatics toolbox 2   Simulink Aktuell ist MATLAB R2013b (andere Bezeichnung: 8.2) vom Herbst 2013 (i.d.R. gibt es zwei Versionen pro Jahr). Unter Linux ist diese Version jedoch nur bei einem 64Bit-System verfügbar, das letzte 32Bit-System ist hier die Version R2011b (oder 7.13). Eine Studentenversion von Matlab R2014a kostete am 14.4.2014 69?. Enthalten sind hier MATLAB, Simulink, Control System Toolbox, Simulink Control Design, Image Processing Toolbox, Optimization Toolbox, Signal Processing Toolbox, DSP System Toolbox, Statistics Toolbox, Symbolic Math Toolbox, Data Acquisition Toolbox and Instrument Control Toolbox. Matlab allein kostete 35?. Welche Matlab-Toolboxen der Fa. Mathworks erhältlich sind, ist unter diesem Link nachzulesen. Studenten zahlen für die meisten Toolboxes nur 20? extra. Octave - Freie Alternative Gerade für zu Hause bietet sich GNU-Octave an. Es ist weitgehend zu MATLAB kompatibel, die Graphik basiert aber auf gnuplot. Mehr Infos: Wikipedia - GNU Octave www.gnu.org: Octave Von G.S. habe ich den Hinweis auf FreeMat bekommen ? er ist sehr zufrieden damit! 3. Die ersten Schritte Nach dem Start von Matlab erscheint folgender Bildschirm (Details hängen von der Version ab, alles im Kurs Besprochene funktioniert auch schon mit der Version 2007b; hier die Version 2012b): In der Mitte ist das Command Window. Wir haben bereits eine simple 3x3-Matrix A eingegeben. Als nächstes haben wir eingetippt: B=sqrt(A). Wir sehen, dass von jedem Element die Wurzel gezogen wird - das ist die Matrix-Orientierung von Matlab! Eine einfache Zahl ist eine 1x1-Matrix. Rechts unten ist die Command History zu sehen, in der man blättern und per Mausclick frühere Befehle nochmals ausführen kann. Außerdem gibt's noch links oben ein Directory-Listing, rechts oben werden alle benutzen Variablen dargestellt (der sog. Workspace ). Die Fenster sind beliebig konfigurierbar!. Hier noch ein etwas vollerer Workspace: Der erste Plot Tippen wir mal ein: &amp;gt;&amp;gt; t=1:100;  % ein Strichpunkt unterdrueckt Bildschirm-Ausgabe&amp;gt;&amp;gt; plot(sin(t/2/pi)) Durch den schrägen Pfeil rechts oben kann der Plot an das Matlab-Hauptfenster angedockt werden, was oft sehr praktisch ist. Jeder Plot kann interaktiv bearbeitet werden, siehe Menü-Symbole. M-Files Alle Matlab-Befehle können direkt im Command Window eingegeben werden, was besonders zum Testen ideal ist. Später werden wir die Befehle mit einem Editor in ein sog. M-File eingeben, das kann in einem Rutsch interpretiert wird. Unser Matlab-Kurs In dem einwöchigen Kurs werden die Grundlagen bereitgestellt und eingeübt, um mit Matlab mathematische Probleme aus Studium und Forschung lösen zu können. Natürlich wird auch später noch intensiv die Obline-Hilfe konsultiert werden müssen (siehe nächster Punkt). Oft werden auch einige numerische Kenntnisse gefragt sein, die an dieser Stelle nicht vermittelt werden können. Einen guten Einstieg zur anwendungsorientierten Numerik mit Matlab bietet z.B. das Kapitel 10 von MATLAB 7: Eine Einführung; Christoph W. Überhuber et.al., Springer-Verlag 4. Die Online-Hilfe Über (Ressources ?) Help ? Product Help bzw. Documentation (so war der Weg bei älteren Versionen; bei der aktuellen findet man's leichter; oder einfach die Taste F1) gibt's eine detaillierte Online-Hilfe für Matlab an sich und alle gekauften Toolboxes. Außerdem gibt's eine Fülle an Demos. Im folgenden Bild ist die ausführliche Hilfsseite zu sinh gezeigt, hier in der Version 2012a. Eine Kurzversion erhält man, wenn man help sinh eintippt. 5. Grundlegendes Matrizen-Handling Eingabe einer Matrix zeilenweise; die Spalten sind durch Blank oder , getrennt, jede Zeile durch ; oder CR abgeschlossen, alle Elemente in eckigen Klammern: &amp;gt;&amp;gt; A=[16 3 2 13; 5 10 11 8; 9 6 7 12; 4 15 14 1]A =    16     3     2    13     5    10    11     8     9     6     7    12     4    15    14     1 So können wir Zeilen- und Spaltenvektoren erzeugen: &amp;gt;&amp;gt; x=[1,2,3]x =     1     2     3&amp;gt;&amp;gt; y=[1;2;3]y =     1     2     3 Matlab ist casesensitive! Variablennamen mit ä, ß etc. sind nicht erlaubt! Alles hinter % sind Kommentare. Zwei Befehle können - durch , getrennt - in einer Zeile stehen: &amp;gt;&amp;gt; b=a+5, c=x-3 A.'   transponiert eine Matrix, A'   bildet die Adjungierte (komplexe Einheit: i oder j) &amp;gt;&amp;gt; B=[1+i 2-i; 3+2*i i]   1.0000 + 1.0000i   2.0000 - 1.0000i   3.0000 + 2.0000i        0 + 1.0000i&amp;gt;&amp;gt; Bad=B'Bad =   1.0000 - 1.0000i   3.0000 - 2.0000i   2.0000 + 1.0000i        0 - 1.0000i&amp;gt;&amp;gt; Btrans=B.'Btrans =   1.0000 + 1.0000i   3.0000 + 2.0000i   2.0000 - 1.0000i        0 + 1.0000i Beispiele für weitere Matrixoperationen: A =    16     3     2    13     5    10    11     8     9     6     7    12     4    15    14     1 sum(A) liefert als Zeilenvektor jeweils die Summe aller Spaltenelemente (MATLAB hat eine Vorliebe für die Spalten einer Matrix ...). Wenn man einer Matlab-Antwort keinen Variablennamen zuweist, bekommt sie automatisch den Namen ans. &amp;gt;&amp;gt; sum(A)ans = 34    34    34    34 diag(A) liefert einen (Spalten-)vektor aus den Diagnonalelementen einer Matrix: &amp;gt;&amp;gt; diag(A)ans =    16    10     7     1 Hinweis: clc (clear command window) schafft oft Übersicht ... 6. Matrix-Subscripts A(i,j) bezeichnet das Element in Zeile i und Spalte j. abgespeichert sind Matrizen spaltenweise. Z.B. bei einer 4x4-Matrix geht auch folgende Schreibweise: A(1) ? entspricht A(1,1)A(4) ? enstpricht A(4,1)A(5) ? entspricht A(1,2) usw. Durch Zuordnung zu einem Element ausserhalb der (bisherigen) Matrix wird die Matrix automatisch erweitert. Nicht explizit belegte Elemente werden auf 0 gesetzt. &amp;gt;&amp;gt; X=AX =    16     3     2    13     5    10    11     8     9     6     7    12     4    15    14     1&amp;gt;&amp;gt; X(4,5)=17X =    16     3     2    13  |  0     5    10    11     8  |  0     9     6     7    12  |  0     4    15    14     1  | 17 Ganz wichtig Doppelpunkt-Operator : . Mit ihm lassen sich implizite Schleifen realisieren, die extrem schnell abgearbeitet werden. Erste Anwendung: 1:10 ist ein Zeilenvektor aus den Ganzzahlen von 1 bis 10; auch andere Abstände als 1 sind möglich wie -7 oder pi/4: &amp;gt;&amp;gt; 1:10ans =     1     2     3     4     5     6     7     8     9    10&amp;gt;&amp;gt; 100:-7:50ans =   100    93    86    79    72    65    58    51&amp;gt;&amp;gt; 0:pi/4:pians =         0    0.7854    1.5708    2.3562    3.1416 Subskripts mit einem Doppelpunkt beziehen sich auf Teile einer Matrix: A(1:k,j) bezeichnet die ersten k Elemente der j-ten Spalte, : alleine alle Elemente einer Zeile oder Spalte, end kennzeichnet die letzte Spalte oder Zeile. &amp;gt;&amp;gt; AA =    16     3     2    13     5    10    11     8     9     6     7    12     4    15    14     1&amp;gt;&amp;gt; A(1,:)ans =    16     3     2    13&amp;gt;&amp;gt; A(:,1)ans =    16     5     9     4&amp;gt;&amp;gt; A(:,end)ans =    13     8    12     1 A( : , [1 3 2 4] ) vertauscht Spalten 2 und 3 7. Ausdrücke Es gibt keine Typ-Deklaration von Variablen und keine Dimensionierung. Bei einer Zuweisung wird der Inhalt geändert und bei Bedarf auch Speicherplatz alloziert. Falls b noch nicht bekannt ist: die Anweisung b=17 erzeugt eine 1x1-Matrix und belegt sie mit der angegebenen Zahl. Konstanten können in Integer-, Dezimal- oder wissenschaftlicher Darstellung eingegeben werden. Interne Zahlendarstellung und Rechnung immer als float long gemäß IEEE-Norm (8 Bytes), Genauigkeit 16 Dezimalstellen, Bereich 10-308 ... 10308. Selbst die Zahl "1" wird so dargestellt: &amp;gt;&amp;gt; a=1&amp;gt;&amp;gt; format hex&amp;gt;&amp;gt; aa =   3ff0000000000000&amp;gt;&amp;gt; int32(a)ans =   00000001 Echte Integer-Darstellung ist zwar in Matlab möglich, wird aber nur selten verwendet, und dann auch nicht immer so, wie man es von vielen Programmiersprachen gewohnt ist. Literatur: z.B. wieder MATLAB 7: Eine Einführung; Christoph W. Überhuber et. al.; Springer-Verlag. Bei Bildern und in der Digitalen Signalverarbeitung greift man oft auf echte Integer-Darstellung und -Verarbeitung zurück. Matlab kennt unzählige Funktionen zur elementaren und fortgeschrittenen Mathematik und zur Matrizen-Rechnung, siehe help elfun, help specfun, help elmat. Wo notwendig und sinnvoll, wird komplex gerechnet. &amp;gt;&amp;gt; conj(1+3i)ans =   1.0000 - 3.0000i Grundlegende Funktionen liegen aus Effizienz-Gründen im Maschinencode vor (Beispiel: Fouriertransformation fft ), andere in Matlab-Code als M-Files ? letztere können mit type ausgedruckt und natürlich auch modifiziert werden, z.B. mit dem Befehl edit (Beispiel Faltung conv oder was Umfangreicheres: ode23 ). Einige spezielle Konstanten sind pi, i, j sowie eps=2-52 (relative Floatingpoint-Genauigkeit), realmin=2-52, realmax=(2-eps)21023 sowie Inf (infinity) und NaN (not a number, z.B. 0/0). Alle Funktionsnamen können überschrieben werden, clear löscht die Belegung wieder (selektiv einen bestimmten Namen oder auch alles): &amp;gt;&amp;gt; cos=17cos =    17&amp;gt;&amp;gt; cos(3)??? Index exceeds matrix dimensions.&amp;gt;&amp;gt; clear cos&amp;gt;&amp;gt; cos(3)ans =   -0.9900&amp;gt;&amp;gt; i=17% auch die imaginäre Einheit kann überschrieben werden!i =    17&amp;gt;&amp;gt; j=23% das ist wohl ungeschickt ...j =    23&amp;gt;&amp;gt; c1=1+2*i% keine Möglichkeit mehr für komplexe Eingabec1 =    35&amp;gt;&amp;gt; clear i% jetzt geht's wieder&amp;gt;&amp;gt; c1=1+2*ic1 =   1.0000 + 2.0000i 8. Weitere Vektor- und Matrizen-Operationen Z=zeros(4) erzeugt eine leere 4x4-Matrix, Z=zeros(1,4) einen leeren Zeilenvektor, Z=zeros(2,4) eine leere 2x4-Matrix Z. Überall, wo sinnvoll, funktioniert der Aufruf der Funktionen mit einem oder zwei Parametern. Analog dazu: Z=17*ones(7) erzeugt eine 7x7-Matrix, alle Elemente sind 17. Ausserdem: Y = eye(n) returns the n-by-n identity matrix. X=randn(4): randn returns a pseudorandom, scalar value drawn from a normal distribution with mean 0 and standard deviation 1. X = randn(n) returns an n-by-n matrix of values derived as describe above. (gleichverteilte Zufallszahlen mit rand ) X =   -0.4326   -1.1465    0.3273   -0.5883   -1.6656    1.1909    0.1746    2.1832    0.1253    1.1892   -0.1867   -0.1364    0.2877   -0.0376    0.7258    0.1139&amp;gt;&amp;gt; Y=fix(X)% truncate auf ganze ZahlenY =     0    -1     0     0    -1     1     0     2     0     1     0     0     0     0     0     0&amp;gt;&amp;gt; Z=round(X)% gerundet Z =     0    -1     0    -1    -2     1     0     2     0     1     0     0     0     0     1     0 y = linspace(a,b,n) generates a row vector y of n points linearly spaced between and including a and b y = logspace(a,b,n) generates a row vector y of n logarithmically spaced points between decades 10^a and 10^b. Ein paar weitere Matrix- bzw. Vektor-Operation, die man immer wieder mal braucht: max: largest elements in array; Standard-Verfahren: if A is a matrix, max(A) treats the columns of A as vectors, returning a row vector containing the maximum element from each column. min: smallest elements in array d = size(X) returns the sizes of each dimension of array X in a vector d the rank function provides an estimate of the number of linearly independent rows or columns of a full matrix. vector and matrix norms: n = norm(A) (unterschiedlichster Art, siehe Online-Hilfe) sort: sort array elements in ascending or descending order; if A is a matrix, sort each column of A mean: mean value of array std, var, median: standard deviation, variance, median value Daten aus Files: load demo.dat erzeugt und belegt eine Matrix mit Namen demo, wenn demo.dat ein normales Textfile ist (Zahlen getrennt durch Blanks, Zeilen durch Return getrennt, jede Zeile hat gleiche Zahl von Elementen) pc54419:~&amp;gt; cat demo.dat    1.0668    0.2944   -0.6918   -1.4410    0.0593   -1.3362    0.8580    0.5711   -0.0956    0.7143    1.2540   -0.3999   -0.8323    1.6236   -1.5937    0.6900 Zur Info: If the filename has no extension, load looks for a file named filename.mat and treats it as a binary MAT-file. If filename has an extension other than .mat, load treats the file as ASCII data. Umgekehrt: save dateiname C F erzeugt eine Datei dateiname.mat im Binärformat mit den Variablen C und F. demo2 sucht die M-Datei mit Matlab-Code demo2.m und führt ihn aus. Da könnte z.B. drin stehen: demo = [    1.0668    0.2944   -0.6918   -1.4410    0.0593   -1.3362    0.8580    0.5711   -0.0956    0.7143    1.2540   -0.3999   -0.8323    1.6236   -1.5937    0.6900  ]; Nach der Eingabe von demo2 ist die Matrix demo erzeugt und belegt. Wer es noch nicht bemerkt hat: der Strichpunkt ; nach einem Matlab-Befehl bedeutet, dass der Befehl stumm ohne Ausgabe des Resultats abgearbeitet wird. Verknüpfung von Matrizen mit [ ]: &amp;gt;&amp;gt; A=magic(4)  % spezielle 'magische' Matrix erzeugenA =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; B=[A A+32; A+48 A+16]  % mache 8x8-Matrix darausB =    16     2     3    13  |  48    34    35    45     5    11    10     8  |  37    43    42    40     9     7     6    12  |  41    39    38    44     4    14    15     1  |  36    46    47    33    ---------------------------------------------    64    50    51    61  |  32    18    19    29    53    59    58    56  |  21    27    26    24    57    55    54    60  |  25    23    22    28    52    62    63    49  |  20    30    31    17 Zeilen und Spalten löschen: X =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; X(:,2)=[ ]   % alle Zeilen der zweiten Spalte werden leer X =    16     3    13     5    10     8     9     6    12     4    15     1&amp;gt;&amp;gt; X(1,2)=[ ]  % geht nicht, würde Matrix zersägen ??? Subscripted assignment dimension mismatch.&amp;gt;&amp;gt; X(2:2:10)=[ ]  % betrachte Matrix als Vektor, lösche Element 2,4,6,8,10X =    16     9     3     6    13    12     1 Durch den Löschvorgang kann Matlab die Daten natürlich nicht mehr als 4x3-Matrix darstellen, sie sind jetzt eine 1x7-Matrix, also ein Zeilenvektor. Addition (und Subtraktion) von Matrizen: &amp;gt;&amp;gt; A+A'ans =    32     7    12    17     7    22    17    22    12    17    12    27    17    22    27     2 Addition einer Matrix und ihrer Adjungierten gibt immer eine symmetrische Matrix. Matrix-Multiplikation: &amp;gt;&amp;gt; A'*Aans =   378   206   212   360   206   370   368   212   212   368   370   206   360   212   206   378 Matrix-Multiplikation der Adjungierten mit dem Original gibt auch wieder eine symmetrische Matrix. Vektor-Multiplikation: &amp;gt;&amp;gt; k=[1 0 -2]k =     1     0    -2&amp;gt;&amp;gt; l=[-3 3 7]l =    -3     3     7&amp;gt;&amp;gt; k*l% geht nicht!??? Error using ==&amp;gt; mtimesInner matrix dimensions must agree.&amp;gt;&amp;gt; k*l'% Skalarproduktans =   -17&amp;gt;&amp;gt; k'*l% dyadisches Produkt, Tensorproduktans =    -3     3     7     0     0     0     6    -6   -14 Determinante und Inverse: A =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; det(A)ans =     0&amp;gt;&amp;gt; inv(A)% die sollte es gar nicht gebenWarning: Matrix is close to singular or badly scaled.         Results may be inaccurate. RCOND = 1.306145e-17.ans =% Matlab merkt immerhin, dass da was faul ist   1.0e+14 *    0.9382    2.8147   -2.8147   -0.9382..... Matrix-Division: Für quadratische Matrizen A und B ist die Division definiert über A / B = A * B-1 Analog ist die Links-Division \ definiert über A \ B = A-1 * B. Anwendung: löse Gleichungssystem C * x = y oder x = C-1 * y = C \ y : &amp;gt;&amp;gt; C=[1 0 -1; 3 1 0; 0 0 1] % die ist nicht-singulärC =     1     0    -1     3     1     0     0     0     1&amp;gt;&amp;gt; y=[0 1 -3]% die Inhomogenitäty =     0     1    -3&amp;gt;&amp;gt; x=C\y% da passen die Dimensionen nicht zusammen!??? Error using ==&amp;gt; mldivideMatrix dimensions must agree.&amp;gt;&amp;gt; y=[0 1 -3]'% wir brauchen einen Spaltenvektor!y =     0     1    -3&amp;gt;&amp;gt; x=C\y% jetzt geht'sx =    -3    10    -3&amp;gt;&amp;gt; kontrolle=C*x% nachkontrollieren --&amp;gt; alles okkontrolle =     0     1    -3 Was ist, wenn A keine quadratische Matrix ist? In der Anleitung steht dazu: If A is an m-by-n matrix with m ~= n and B is a column vector with m components, or a matrix with several such columns, then X = A\B is the solution in the least squares sense to the under- or overdetermined system of equations AX = B (d.h. also, abs(AX-B) wird minimiert). Am zweiten Tag gibt's ein Beispiel dazu. Elementweise Array-Operationen:   .*   ./   .^ (Multiplizieren, Dividieren, Potenzieren): &amp;gt;&amp;gt; AA =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; A.*Aans =   256     4     9   169    25   121   100    64    81    49    36   144    16   196   225     1 Charakteristisches Polynom (poly), Eigenwerte und Eigenvektoren (eig): Finde die Werte w und die Vektoren v, für die gilt: A  v = w v. Die Eigenwerte sind die Nullstellen des charakteristischen Polynoms det(A - w  1). &amp;gt;&amp;gt; poly(A)ans =   1.0e+03 *    0.0010   -0.0340   -0.0800    2.7200   -0.0000% Charakteristisches Polynom = 1*w4 - 34*w3 - 80*w2 + 2720*w; &amp;gt;&amp;gt; eig(A)% nur die Eigenwerteans =   34.0000    8.9443   -8.9443    0.0000&amp;gt;&amp;gt; [v,w]=eig(A)  % spezielle Schreibweise mit 2 Ergebnisarraysv =% Eigenvektoren   -0.5000   -0.8236    0.3764   -0.2236   -0.5000    0.4236    0.0236   -0.6708   -0.5000    0.0236    0.4236    0.6708   -0.5000    0.3764   -0.8236    0.2236w =% Eigenwerte   34.0000         0         0         0         0    8.9443         0         0         0         0   -8.9443         0         0         0         0    0.0000&amp;gt;&amp;gt; A*v(:,1) % Verifikation beim ersten Eigenvektorans =  -17.0000  -17.0000  -17.0000  -17.0000 Tabellen-Erzeugung mit den Array-Operationen: &amp;gt;&amp;gt; n=(0:9)'n =     0     1     ....     8     9&amp;gt;&amp;gt; pows=[n n.^2 2.^n]pows =     0     0     1     1     1     2     ....     8    64   256     9    81   512&amp;gt;&amp;gt; x=(1:0.1:2)'x =    1.0000    1.1000    ....    1.9000    2.0000&amp;gt;&amp;gt; logs=[x log10(x)]logs =    1.0000         0    1.1000    0.0414    ....    1.9000    0.2788    2.0000    0.3010 Matrizen und Skalare: &amp;gt;&amp;gt; AA =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; B=A-8.5B =    7.5000   -6.5000   -5.5000    4.5000   -3.5000    2.5000    1.5000   -0.5000    0.5000   -1.5000   -2.5000    3.5000   -4.5000    5.5000    6.5000   -7.5000&amp;gt;&amp;gt; B(1:2,2:3)=NaN  % setze Teilbereich bestimmten WertB =    7.5000       NaN       NaN    4.5000   -3.5000       NaN       NaN   -0.5000    0.5000   -1.5000   -2.5000    3.5000   -4.5000    5.5000    6.5000   -7.5000 9. Logical Subscripting Konzepte: &amp;gt;&amp;gt; AA =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; isprime(A)  % was sind Primzahlen?ans =     0     1     1     1     1     1     0     0     0     1     0     0     0     0     0     0  &amp;gt;&amp;gt; x=[2.1 3.5 4.7 NaN 2.0 -3.8 4.17 NaN 2]x =    2.1000    3.5000    4.7000       NaN    2.0000   -3.8000    4.1700       NaN    2.0000&amp;gt;&amp;gt; isfinite(x)ans =     1     1     1     0     1     1     1     0     1     &amp;gt;&amp;gt; x(isfinite(x))ans =    2.1000    3.5000    4.7000    2.0000   -3.8000    4.1700    2.0000         &amp;gt;&amp;gt; x=x(isfinite(x))x =    2.1000    3.5000    4.7000    2.0000   -3.8000    4.1700    2.0000&amp;gt;&amp;gt; z=x(abs(x-mean(x))&amp;lt;=std(x)) % Ausreisser raus!z =    2.1000    3.5000    4.7000    2.0000    4.1700    2.0000 find - Funktion: suche die Indices, deren zugehörige Arrayelemente einer bestimmten Bedingung genügen: &amp;gt;&amp;gt; AA =    16     2     3    13     5    11    10     8     9     7     6    12     4    14    15     1&amp;gt;&amp;gt; k=find(isprime(A))'k =     2     5     6     7     9    13    % das sind die Indices&amp;gt;&amp;gt; A(k)ans =     5     2    11     7     3    13    % und das die zugehörigen Array-Elemente&amp;gt;&amp;gt; A(k)=NaN          % erhalte die Matrixstuktur und besetze diese Elemente A =    16   NaN   NaN   NaN   NaN   NaN    10     8     9   NaN     6    12     4    14    15     1 10. Input- und Output-Kontrolle Output-Formatierungen &amp;gt;&amp;gt; x=[4/3 1.2345e-6]x = 1.3333    0.0000% Vorsicht! kleine Zahl als 0 dargestellt! &amp;gt;&amp;gt; format shortx = 1.3333    0.0000&amp;gt;&amp;gt; format short ex = 1.3333e+00   1.2345e-06&amp;gt;&amp;gt; format short gx = 1.3333   1.2345e-06&amp;gt;&amp;gt; format longX = 1.333333333333333   0.000001234500000&amp;gt;&amp;gt; format long ex = 1.333333333333333e+00     1.234500000000000e-06&amp;gt;&amp;gt; format long gx = 1.33333333333333                1.2345e-06&amp;gt;&amp;gt; format ratx = 4/3            1/810045&amp;gt;&amp;gt; format hexx = 3ff5555555555555   3eb4b6231abfd271&amp;gt;&amp;gt; x=1&amp;gt;&amp;gt; format hex&amp;gt;&amp;gt; x   x = 3ff0000000000000 format allein stellt auf das Standardformat short zurück. Beachte die Hexadezimal-Darstellung der Zahl 1: auch ganze Zahlen werden i.d.R. als 8-Byte-Realzahlen gemäß IEEE-Norm abgespeichert. Weitere Input-/Output-Kontrollfeatures format compact sorgt insgesamt für kompakteren Output (weniger Leerzeilen). sprintf, fprintf bietet C-ähnliche Formatsteuerung: &amp;gt;&amp;gt; fprintf('%16.6f %12.4g \n',pi,exp(1))        3.141593        2.718  ... bedeutet, dass die Eingabe in der nächsten Zeile weitergeht: &amp;gt;&amp;gt; hr=1+1/2+1/4+1/8 ...+1/16+1/32+1/64hr = 1.9844 Command Line Editing: übliche Editor-Befehle</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/edverg/matlab/ml3.html</field>
<field name="title">Einführung in Matlab ? Kap.III: Programmierung</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/edverg/matlab/ml3.html</field>
<field name="content">Einführung in Matlab ? Kap.III: Programmierung Einführung in Matlab ? Kap.III: Programmierung Einführung in Matlab Fritz Wünsch, Stand 19.2.14 Kap.III: Programmierung (? pdf ) Anmerkung: Wenn es eine passende eingebaute Matrix-Operation gibt, sollte Programmierung unbedingt vermieden werden ? explizite Schleifen wie for sind alles andere als schnell. if-Abfrage, Gleichheit switch - case for, while, break, continue Ein- und Ausgabe am Bildschirm Weitere Datenstrukturen Funktionen 1. if-Abfrage, Gleichheit &amp;gt;&amp;gt; a=4a = 4&amp;gt;&amp;gt; if (a&amp;gt;=6) b=3elseif (a&amp;gt;0) b=2else b=0endb = 2 Die if-Bedingung ist nicht erfüllt, daher wird die elseif-Bedingung ausgeführt, die wahr ist. elseif darf beliebig oft auftauchen (eher vermeiden!), else nur einmal; beide sind optional. "NOT" wird durch ~ dargestellt, also z.B. if rem(n,2)~=0 ... (wenn n nicht durch 2 ganzzahlig teilbar ist...). Es gibt keine dedizierten boolsche Variablen. Die Zahl 0 ist "falsch", alles andere ist "wahr". Natürlich gibt es die logischen Operatoren   ~   &amp;     |   ('not', 'and', 'or'). Achtung: Matrizen-Vergleiche liefern immer eine Matrix als Ergebnis zurück! &amp;gt;&amp;gt; a=7;&amp;gt;&amp;gt; if a==7 b=3; % Vergleich mit == bei Skalaren trivial!endb =  3&amp;gt;&amp;gt; A=magic(3)% nun eine MatrixA =     8     1     6     3     5     7     4     9     2&amp;gt;&amp;gt; B=A&amp;gt;&amp;gt; B(2,2)=1&amp;gt;&amp;gt; A==B   % bei Matrizen ist A==B eine neue Matrix! ans =     1     1     1     1     0     1     1     1     1&amp;gt;&amp;gt; C=B&amp;gt;&amp;gt; if (C==B) 'Matrizen gleich' % "C==B" ist Matrix komplett mit 1, also 'true'endans = Matrizen gleich&amp;gt;&amp;gt; if (A~=B) 'Matrizen ungleich' % das funktioniert NICHT! Kein Antwort!end&amp;gt;&amp;gt; A~=B % denn DAS ist NICHT 'true'ans =     0     0     0     0     1     0     0     0     0&amp;gt;&amp;gt; if ~isequal(A,B) b=17endb = 17 Matrizenvergleiche sollten also am besten so erfolgen: isequal: Test arrays for equality any: Determine whether any array elements are nonzero all: Determine whether all array elements are nonzero 2. switch - case &amp;gt;&amp;gt; a=4a = 4&amp;gt;&amp;gt; switch a% Zeilenumbrüche sind nötig!     case 1b=15     case 3b=2     case {2,4}b=14/a     otherwiseb=0endb = 3.5000 Achtung! Kein fall through wie z.B. bei C, nur die erste zutreffende Bedingung wird ausgeführt. otherwise ist optional. Zusammenfassung mehrerer Fälle: sog. cell array { } (s. weiter unten). 3. for, while, break, continue for-Schleife zum abzählbaren Wiederholen eines Blockes von Anweisungen: &amp;gt;&amp;gt; n=3; m=3;&amp;gt;&amp;gt; for i=1:m     for j=1:n        H(i,j)=1/(i+j);     end   end&amp;gt;&amp;gt; HH =    0.5000    0.3333    0.2500    0.3333    0.2500    0.2000    0.2500    0.2000    0.1667&amp;gt;&amp;gt; for i=1.1:0.1:1.5% Schrittweite &amp;lt;&amp;gt;1 erlaubt!iendi = 1.1000i = 1.2000...i = 1.5000 while-Schleife am besten dann, wenn bei einer Bedingung abgebrochen werden soll. Zunächst aber ganz simples Beispiel: finde die ersten Fibonacci-Zahlen: &amp;gt;&amp;gt; fib=ones(1,10)fib =     1     1     1     1     1     1     1     1     1     1&amp;gt;&amp;gt; i=3i = 3&amp;gt;&amp;gt; while (i&amp;lt;=10)    fib(i)=fib(i-1)+fib(i-2);    i=i+1;   end&amp;gt;&amp;gt; fibfib =     1     1     2     3     5     8    13    21    34    55 Jetzt komplizierteres Beispiel: finde Nullstelle einer Funktion numerisch durch sukzessive Approximation &amp;gt;&amp;gt; a=0; fa=-Inf;&amp;gt;&amp;gt; b=3; fb= Inf;&amp;gt;&amp;gt; while b-a &amp;gt; eps*b  % solange die beiden Grenzen noch nicht fast gleich      x=(a+b)/2;      fx=x^3-2*x-5;      if sign(fx) == sign(fa)         a=x; fa=fx;  % Mittelpunkt des Intervalls wird neue linke Grenze      else         b=x; fb=fx;      end % Ende von if   end % Ende von while&amp;gt;&amp;gt; xx = 2.0946&amp;gt;&amp;gt; fzero('x^3-2*x-5',2)% Kontrolleans =    2.0946 break, um die (innerste) for- oder while-Schleife zu verlassen: &amp;gt;&amp;gt; i=1;&amp;gt;&amp;gt; while (i&amp;lt;=1)% Vorsicht! Endlosschleife!       i=i-0.1   end &amp;gt;&amp;gt; i=1;&amp;gt;&amp;gt; while (i&amp;lt;=1)       i=i-0.1         if i&amp;lt;0 break % Notausstieg         end   end continue springt zur nächsten Iteration der for- oder while-Schleife, in der es auftaucht. Beispiel, das auch ein paar Elemente der Filebearbeitung zeigt: durchsuche den Code des Matlab-Programmes magic.m und zähle alle Zeilen ausser Leerzeilen oder Zeilen, die das Kommentarzeichen % schon in der ersten Spalte haben: fid = fopen('magic.m','r');  % fopen öfnet die Datei, hier zum Lesen count = 0;while ~feof(fid)     % solange File noch nicht zu Ende      line = fgetl(fid);       % hole eine Zeile    % strncmp: compare first n charcters    if isempty(line) | strncmp(line,'%',1)  % |  logical or         continue    end    count = count + 1;enddisp(sprintf('%d lines',count));31 lines 4. Ein- und Ausgabe am Bildschirm Wir haben gerade gesehen: sprintf('%d lines',count) druckt formatiert aus. Mit disp wird nur das Argument an sich ausgegeben, keine Sachen aussenherum: &amp;gt;&amp;gt; sprintf('%d lines',count)ans =31 lines&amp;gt;&amp;gt; disp(sprintf('%d lines',count));31 lines Benutzereingaben kann man mit input(text) abfragen: &amp;gt;&amp;gt; b=input('Bitte Zahl eingeben: ');Bitte Zahl eingeben: 3.14*i + 17&amp;gt;&amp;gt; bb =  17.0000 + 3.1400i&amp;gt;&amp;gt; b=input('Bitte Zahl eingeben: ');% es kann auch gerechnet werdenBitte Zahl eingeben: sqrt(2)*3+1&amp;gt;&amp;gt; bb =      5.2426 5. Weitere Datenstrukturen Mehrdimensionale Arrays Erzeugung ganz einfach z.B. durch Aufruf von zeros, ones, rand, randn (gleichförmig oder normalverteilte Zufallszahlen) mit mehr als 2 Argumenten: &amp;gt;&amp;gt; rand(2,2,2)ans(:,:,1) =    0.9575    0.1576    0.9649    0.9706ans(:,:,2) =    0.9572    0.8003    0.4854    0.1419 Cell Arrays In { } stehen mehrere Objekte (ruhig unterschiedlicher Art), exakter gesprochen, Kopien der angegeben Objekte. Beispiel: ein Cell Array aus 8 Elementen, die Elemente sind magische Matrizen der Größe 1,2,...8. Man sieht auch die Adressierung der einzelnen Elemente: &amp;gt;&amp;gt; M=cell(8,1);         % erzeuge leeres Cell Array&amp;gt;&amp;gt; for n=1:8      M{n}=magic(n);    % belege es jetztend&amp;gt;&amp;gt; MM =       % das ganze Cell-Array      [         1]    [2x2 double]    [3x3 double]    [4x4 double]    [5x5 double]    [6x6 double]    [7x7 double]    [8x8 double]&amp;gt;&amp;gt; M{3}   % das dritte Elementans =     8     1     6     3     5     7     4     9     2 Zeichen und Text &amp;gt;&amp;gt; s='Hallo'   % interne Speicherung als 1x5 - Zeichen-Matrix (Vektor)s = Hallo&amp;gt;&amp;gt; a=double('Hallo')   % jetzt als Zahlen-Array mit ASCII-Code a =    72    97   108   108   111&amp;gt;&amp;gt; s=char(a)% und wieder zurückwandelns = Hallo&amp;gt;&amp;gt; h=[s, ' Welt']% neues Array of texth = Hallo Welt-----------------------------------------------------------------------------------&amp;gt;&amp;gt; F=reshape(32:127,16,6)   % Integer-Array 32...127 als Matrix mit &amp;gt;&amp;gt; %    16 Zeilen und 6 SpaltenF =    32    48    64    80    96   112    33    49    65    81    97   113    34    50    66    82    98   114    35    51    67    83    99   115    36    52    68    84   100   116    37    53    69    85   101   117    38    54    70    86   102   118    39    55    71    87   103   119    40    56    72    88   104   120    41    57    73    89   105   121    42    58    74    90   106   122    43    59    75    91   107   123    44    60    76    92   108   124    45    61    77    93   109   125    46    62    78    94   110   126    47    63    79    95   111   127&amp;gt;&amp;gt; char(F')% Standard-ASCIIans = !"#$%&amp;'()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}&amp;gt;&amp;gt; char(F'+128)% das hängt vom eingestellten Zeichensatz ab ans = ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ Strukturen &amp;gt;&amp;gt; P.Vorname='Fritz';&amp;gt;&amp;gt; P.Name='Maier';&amp;gt;&amp;gt; P.Tel='1234 5678';&amp;gt;&amp;gt; PP =     Vorname: 'Fritz'       Name: 'Maier'        Tel: '1234 5678'&amp;gt;&amp;gt; P(1)ans =     Vorname: 'Fritz'       Name: 'Maier'        Tel: '1234 5678'&amp;gt;&amp;gt; P(2)??? Index exceeds matrix dimensions.&amp;gt;&amp;gt; P(2)=struct('Vorname','Maria','Name','Müller','Tel','0160 7654567');&amp;gt;&amp;gt; P(2)ans =     Vorname: 'Maria'       Name: 'Müller'        Tel: '0160 7654567'P = 1x2 struct array with fields:    Vorname    Name    Tel&amp;gt;&amp;gt; P(1).Vornameans = Fritz&amp;gt;&amp;gt; P.Vornameans = Fritzans = Maria&amp;gt;&amp;gt; [P.Vorname]ans = FritzMaria 6. Funktionen Über Desktop - Editor - New M-File machen wir mal den eingebauten Editor auf, geben die folgenden Zeilen ein und speichern das ganze unter myfunc.m (jeder andere Editor geht aber genauso, der Name des Files muss aber dem Funktionsnamen entsprechen): Im Matlab-System ist jetzt die neue Funktion bekannt: &amp;gt;&amp;gt; type myfunc% myfunc.m% Eine Funktion nur als Demofunction out=myfunc(in)out = sin(in)*exp(-in)&amp;gt;&amp;gt; help myfunc  % gib die Kommentarzeilen am Anfang des Files aus   myfunc.m   Eine Funktion nur als Demo Anmerkungen: Mit der Zuweisung des Rückgabewertes (hier out) wird die Funktion beendet. Ein Return ist i.d.R. nicht nötig. in, out sind willkürliche Namen, jeder beliebige Variablennamen darf verwendet werden. Beliebige Schachtelung von Funktionen erlaubt Falls Funktionsnamen als Parameter verwendet werden, schaut die Kodierung so aus: function out = myint(f)...endmyint(@sin)% Aufruf  Rekursiver Aufruf ist möglich. Hier ein ganz extremes Bespiel für eine rekursive Funktion (als Übungsaufgabe gibt's die rekursive Berechnung der Fibonacci-Funktion): die Ackermann-Funktion a(n,m) (n,m ganzzahlig ? 0) ist folgendermassen definiert:               m+1             falls n=0      a(n,m) = a(n-1,1)        falls n&amp;gt;0, m=0              a(n-1,a(n,m-1)) sonst Lösung: % Ackermann-Funktion acker(n,m)function out=acker(n,m)if (n==0) out=m+1;elseif (m==0) out=acker(n-1,1);else out=acker(n-1,acker(n,m-1));end&amp;gt;&amp;gt; acker(1,1)ans = 3&amp;gt;&amp;gt; acker(2,2)ans = 7&amp;gt;&amp;gt; acker(3,2)ans = 29&amp;gt;&amp;gt; acker(3,3)ans = 61 Alle Parameter sind lokal, ausser sie werden explizit mit global deklariert (gleich hinter dem function - Befehl). Beispiel aus der Online-Hilfe mit der (eingebauten) Stoppuhr: Here is the code for the functions tic and toc. These functions manipulatea stopwatch-like timer. The global variable TICTOC is shared by the two functions, but it is invisible in the base workspace or in any other functions that do not declare it.function tic%    TIC Start a stopwatch timer.%        TIC; any stuff; TOC%    prints the time required.global TICTOCTICTOC = clock;function t = toc%    TOC Read the stopwatch timer.%    TOC prints the elapsed time since TIC was used.%    t = TOC; saves elapsed time in t, does not print.global TICTOCif nargout &amp;lt; 1    elapsed_time = etime(clock, TICTOC)    else        t = etime(clock, TICTOC);end anders als z.B. in C können mehrere Werte zurückgegeben werden, dafür wird [ ] benötigt: % stat.mfunction [mean,stdev]=stat(x)n=length(x);mean=sum(x)/n;stdev=sqrt(sum((x-mean).^2)/n); Aufruf: &amp;gt;&amp;gt; x=rand(1,100);&amp;gt;&amp;gt; [m,s]=stat(x)% 2 Rückgabewertem = 0.5280s = 0.2955&amp;gt;&amp;gt; d=stat(x)% 1 Rückgabewert geht auch! Genommen wird Nr.1d = 0.5280 Eine variable Anzahl von Argumenten ist möglich (siehe Doku zu nargin, nargout ) Mit type funame, wie schon gesehen, bzw. mit dbtype funame (mit Zeilennummern) können Funktionen (eigene und System-Funktionen im m-Code) ausgedruckt werden. Ein m-File kann neben der sog. primary function (die erste im File) weitere subfunctions enthalten. Die stehen aber nur innerhalb des m-Files zur Verfügung. Funktionen werden beim ersten Aufruf in ausführbaren Code übersetzt. Jeder weitere Aufruf geht dann deutlich schneller. Funktionen, die mit Matrizen arbeiten, sind dann schnell, wenn Speicher nicht dynamisch alloziert wird. Also am besten Matrizen immer schon statisch deklarieren mit z.B. B=ones(50,50). Es gibt kurze sog. anonyme Funktionen, die nicht in einem m-File gespeichert werden müssen, sondern direkt auf Kommandozeilenebene eingegeben werden: &amp;gt;&amp;gt; qu = @(x) x.^2;% quadriere&amp;gt;&amp;gt; b=qu(17)b = 289&amp;gt;&amp;gt; n=1:10n = 1     2     3     4     5     6     7     8     9    10&amp;gt;&amp;gt; qu(n)ans = 1     4     9    16    25    36    49    64    81   100 Anmerkung: wie wir gesehen haben, dürfen in m-Files auch ganz "normale" Matlab-Befehle stehen, nicht nur Unterprogramme. Das nennt man dann Skript. Zitat von http://www.mathworks.de/de/help/matlab/matlab_oop/why-use-object-oriented-design.html: When Should You Start Creating Object-Oriented Programs: Objects are well integrated into the MATLAB language, regardless of whether you are writing simple functions, working interactively in the command window, or creating large applications. Simple programming tasks are easily implemented as simple functions, but as the magnitude and complexity of your tasks increase, functions become more complex and difficult to manage. As functions become too large, you might break them into smaller functions and pass data from one to the other. However, as the number of functions becomes large, designing and managing the data passed to functions becomes difficult and error prone. At this point, you should consider moving your MATLAB programming tasks to object-oriented designs.</field>
<field name="important">Einführung in Matlab ? Kap.III: Programmierung Einführung in Matlab ? Kap.III: Programmierung Einführung in Matlab Fritz Wünsch, Stand 19.2.14 Kap.III: Programmierung (? pdf ) Anmerkung: Wenn es eine passende eingebaute Matrix-Operation gibt, sollte Programmierung unbedingt vermieden werden ? explizite Schleifen wie for sind alles andere als schnell. if-Abfrage, Gleichheit switch - case for, while, break, continue Ein- und Ausgabe am Bildschirm Weitere Datenstrukturen Funktionen 1. if-Abfrage, Gleichheit &amp;gt;&amp;gt; a=4a = 4&amp;gt;&amp;gt; if (a&amp;gt;=6) b=3elseif (a&amp;gt;0) b=2else b=0endb = 2 Die if-Bedingung ist nicht erfüllt, daher wird die elseif-Bedingung ausgeführt, die wahr ist. elseif darf beliebig oft auftauchen (eher vermeiden!), else nur einmal; beide sind optional. "NOT" wird durch ~ dargestellt, also z.B. if rem(n,2)~=0 ... (wenn n nicht durch 2 ganzzahlig teilbar ist...). Es gibt keine dedizierten boolsche Variablen. Die Zahl 0 ist "falsch", alles andere ist "wahr". Natürlich gibt es die logischen Operatoren   ~   &amp;     |   ('not', 'and', 'or'). Achtung: Matrizen-Vergleiche liefern immer eine Matrix als Ergebnis zurück! &amp;gt;&amp;gt; a=7;&amp;gt;&amp;gt; if a==7 b=3; % Vergleich mit == bei Skalaren trivial!endb =  3&amp;gt;&amp;gt; A=magic(3)% nun eine MatrixA =     8     1     6     3     5     7     4     9     2&amp;gt;&amp;gt; B=A&amp;gt;&amp;gt; B(2,2)=1&amp;gt;&amp;gt; A==B   % bei Matrizen ist A==B eine neue Matrix! ans =     1     1     1     1     0     1     1     1     1&amp;gt;&amp;gt; C=B&amp;gt;&amp;gt; if (C==B) 'Matrizen gleich' % "C==B" ist Matrix komplett mit 1, also 'true'endans = Matrizen gleich&amp;gt;&amp;gt; if (A~=B) 'Matrizen ungleich' % das funktioniert NICHT! Kein Antwort!end&amp;gt;&amp;gt; A~=B % denn DAS ist NICHT 'true'ans =     0     0     0     0     1     0     0     0     0&amp;gt;&amp;gt; if ~isequal(A,B) b=17endb = 17 Matrizenvergleiche sollten also am besten so erfolgen: isequal: Test arrays for equality any: Determine whether any array elements are nonzero all: Determine whether all array elements are nonzero 2. switch - case &amp;gt;&amp;gt; a=4a = 4&amp;gt;&amp;gt; switch a% Zeilenumbrüche sind nötig!     case 1b=15     case 3b=2     case {2,4}b=14/a     otherwiseb=0endb = 3.5000 Achtung! Kein fall through wie z.B. bei C, nur die erste zutreffende Bedingung wird ausgeführt. otherwise ist optional. Zusammenfassung mehrerer Fälle: sog. cell array { } (s. weiter unten). 3. for, while, break, continue for-Schleife zum abzählbaren Wiederholen eines Blockes von Anweisungen: &amp;gt;&amp;gt; n=3; m=3;&amp;gt;&amp;gt; for i=1:m     for j=1:n        H(i,j)=1/(i+j);     end   end&amp;gt;&amp;gt; HH =    0.5000    0.3333    0.2500    0.3333    0.2500    0.2000    0.2500    0.2000    0.1667&amp;gt;&amp;gt; for i=1.1:0.1:1.5% Schrittweite &amp;lt;&amp;gt;1 erlaubt!iendi = 1.1000i = 1.2000...i = 1.5000 while-Schleife am besten dann, wenn bei einer Bedingung abgebrochen werden soll. Zunächst aber ganz simples Beispiel: finde die ersten Fibonacci-Zahlen: &amp;gt;&amp;gt; fib=ones(1,10)fib =     1     1     1     1     1     1     1     1     1     1&amp;gt;&amp;gt; i=3i = 3&amp;gt;&amp;gt; while (i&amp;lt;=10)    fib(i)=fib(i-1)+fib(i-2);    i=i+1;   end&amp;gt;&amp;gt; fibfib =     1     1     2     3     5     8    13    21    34    55 Jetzt komplizierteres Beispiel: finde Nullstelle einer Funktion numerisch durch sukzessive Approximation &amp;gt;&amp;gt; a=0; fa=-Inf;&amp;gt;&amp;gt; b=3; fb= Inf;&amp;gt;&amp;gt; while b-a &amp;gt; eps*b  % solange die beiden Grenzen noch nicht fast gleich      x=(a+b)/2;      fx=x^3-2*x-5;      if sign(fx) == sign(fa)         a=x; fa=fx;  % Mittelpunkt des Intervalls wird neue linke Grenze      else         b=x; fb=fx;      end % Ende von if   end % Ende von while&amp;gt;&amp;gt; xx = 2.0946&amp;gt;&amp;gt; fzero('x^3-2*x-5',2)% Kontrolleans =    2.0946 break, um die (innerste) for- oder while-Schleife zu verlassen: &amp;gt;&amp;gt; i=1;&amp;gt;&amp;gt; while (i&amp;lt;=1)% Vorsicht! Endlosschleife!       i=i-0.1   end &amp;gt;&amp;gt; i=1;&amp;gt;&amp;gt; while (i&amp;lt;=1)       i=i-0.1         if i&amp;lt;0 break % Notausstieg         end   end continue springt zur nächsten Iteration der for- oder while-Schleife, in der es auftaucht. Beispiel, das auch ein paar Elemente der Filebearbeitung zeigt: durchsuche den Code des Matlab-Programmes magic.m und zähle alle Zeilen ausser Leerzeilen oder Zeilen, die das Kommentarzeichen % schon in der ersten Spalte haben: fid = fopen('magic.m','r');  % fopen öfnet die Datei, hier zum Lesen count = 0;while ~feof(fid)     % solange File noch nicht zu Ende      line = fgetl(fid);       % hole eine Zeile    % strncmp: compare first n charcters    if isempty(line) | strncmp(line,'%',1)  % |  logical or         continue    end    count = count + 1;enddisp(sprintf('%d lines',count));31 lines 4. Ein- und Ausgabe am Bildschirm Wir haben gerade gesehen: sprintf('%d lines',count) druckt formatiert aus. Mit disp wird nur das Argument an sich ausgegeben, keine Sachen aussenherum: &amp;gt;&amp;gt; sprintf('%d lines',count)ans =31 lines&amp;gt;&amp;gt; disp(sprintf('%d lines',count));31 lines Benutzereingaben kann man mit input(text) abfragen: &amp;gt;&amp;gt; b=input('Bitte Zahl eingeben: ');Bitte Zahl eingeben: 3.14*i + 17&amp;gt;&amp;gt; bb =  17.0000 + 3.1400i&amp;gt;&amp;gt; b=input('Bitte Zahl eingeben: ');% es kann auch gerechnet werdenBitte Zahl eingeben: sqrt(2)*3+1&amp;gt;&amp;gt; bb =      5.2426 5. Weitere Datenstrukturen Mehrdimensionale Arrays Erzeugung ganz einfach z.B. durch Aufruf von zeros, ones, rand, randn (gleichförmig oder normalverteilte Zufallszahlen) mit mehr als 2 Argumenten: &amp;gt;&amp;gt; rand(2,2,2)ans(:,:,1) =    0.9575    0.1576    0.9649    0.9706ans(:,:,2) =    0.9572    0.8003    0.4854    0.1419 Cell Arrays In { } stehen mehrere Objekte (ruhig unterschiedlicher Art), exakter gesprochen, Kopien der angegeben Objekte. Beispiel: ein Cell Array aus 8 Elementen, die Elemente sind magische Matrizen der Größe 1,2,...8. Man sieht auch die Adressierung der einzelnen Elemente: &amp;gt;&amp;gt; M=cell(8,1);         % erzeuge leeres Cell Array&amp;gt;&amp;gt; for n=1:8      M{n}=magic(n);    % belege es jetztend&amp;gt;&amp;gt; MM =       % das ganze Cell-Array      [         1]    [2x2 double]    [3x3 double]    [4x4 double]    [5x5 double]    [6x6 double]    [7x7 double]    [8x8 double]&amp;gt;&amp;gt; M{3}   % das dritte Elementans =     8     1     6     3     5     7     4     9     2 Zeichen und Text &amp;gt;&amp;gt; s='Hallo'   % interne Speicherung als 1x5 - Zeichen-Matrix (Vektor)s = Hallo&amp;gt;&amp;gt; a=double('Hallo')   % jetzt als Zahlen-Array mit ASCII-Code a =    72    97   108   108   111&amp;gt;&amp;gt; s=char(a)% und wieder zurückwandelns = Hallo&amp;gt;&amp;gt; h=[s, ' Welt']% neues Array of texth = Hallo Welt-----------------------------------------------------------------------------------&amp;gt;&amp;gt; F=reshape(32:127,16,6)   % Integer-Array 32...127 als Matrix mit &amp;gt;&amp;gt; %    16 Zeilen und 6 SpaltenF =    32    48    64    80    96   112    33    49    65    81    97   113    34    50    66    82    98   114    35    51    67    83    99   115    36    52    68    84   100   116    37    53    69    85   101   117    38    54    70    86   102   118    39    55    71    87   103   119    40    56    72    88   104   120    41    57    73    89   105   121    42    58    74    90   106   122    43    59    75    91   107   123    44    60    76    92   108   124    45    61    77    93   109   125    46    62    78    94   110   126    47    63    79    95   111   127&amp;gt;&amp;gt; char(F')% Standard-ASCIIans = !"#$%&amp;'()*+,-./0123456789:;&amp;lt;=&amp;gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}&amp;gt;&amp;gt; char(F'+128)% das hängt vom eingestellten Zeichensatz ab ans = ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ Strukturen &amp;gt;&amp;gt; P.Vorname='Fritz';&amp;gt;&amp;gt; P.Name='Maier';&amp;gt;&amp;gt; P.Tel='1234 5678';&amp;gt;&amp;gt; PP =     Vorname: 'Fritz'       Name: 'Maier'        Tel: '1234 5678'&amp;gt;&amp;gt; P(1)ans =     Vorname: 'Fritz'       Name: 'Maier'        Tel: '1234 5678'&amp;gt;&amp;gt; P(2)??? Index exceeds matrix dimensions.&amp;gt;&amp;gt; P(2)=struct('Vorname','Maria','Name','Müller','Tel','0160 7654567');&amp;gt;&amp;gt; P(2)ans =     Vorname: 'Maria'       Name: 'Müller'        Tel: '0160 7654567'P = 1x2 struct array with fields:    Vorname    Name    Tel&amp;gt;&amp;gt; P(1).Vornameans = Fritz&amp;gt;&amp;gt; P.Vornameans = Fritzans = Maria&amp;gt;&amp;gt; [P.Vorname]ans = FritzMaria 6. Funktionen Über Desktop - Editor - New M-File machen wir mal den eingebauten Editor auf, geben die folgenden Zeilen ein und speichern das ganze unter myfunc.m (jeder andere Editor geht aber genauso, der Name des Files muss aber dem Funktionsnamen entsprechen): Im Matlab-System ist jetzt die neue Funktion bekannt: &amp;gt;&amp;gt; type myfunc% myfunc.m% Eine Funktion nur als Demofunction out=myfunc(in)out = sin(in)*exp(-in)&amp;gt;&amp;gt; help myfunc  % gib die Kommentarzeilen am Anfang des Files aus   myfunc.m   Eine Funktion nur als Demo Anmerkungen: Mit der Zuweisung des Rückgabewertes (hier out) wird die Funktion beendet. Ein Return ist i.d.R. nicht nötig. in, out sind willkürliche Namen, jeder beliebige Variablennamen darf verwendet werden. Beliebige Schachtelung von Funktionen erlaubt Falls Funktionsnamen als Parameter verwendet werden, schaut die Kodierung so aus: function out = myint(f)...endmyint(@sin)% Aufruf  Rekursiver Aufruf ist möglich. Hier ein ganz extremes Bespiel für eine rekursive Funktion (als Übungsaufgabe gibt's die rekursive Berechnung der Fibonacci-Funktion): die Ackermann-Funktion a(n,m) (n,m ganzzahlig ? 0) ist folgendermassen definiert:               m+1             falls n=0      a(n,m) = a(n-1,1)        falls n&amp;gt;0, m=0              a(n-1,a(n,m-1)) sonst Lösung: % Ackermann-Funktion acker(n,m)function out=acker(n,m)if (n==0) out=m+1;elseif (m==0) out=acker(n-1,1);else out=acker(n-1,acker(n,m-1));end&amp;gt;&amp;gt; acker(1,1)ans = 3&amp;gt;&amp;gt; acker(2,2)ans = 7&amp;gt;&amp;gt; acker(3,2)ans = 29&amp;gt;&amp;gt; acker(3,3)ans = 61 Alle Parameter sind lokal, ausser sie werden explizit mit global deklariert (gleich hinter dem function - Befehl). Beispiel aus der Online-Hilfe mit der (eingebauten) Stoppuhr: Here is the code for the functions tic and toc. These functions manipulatea stopwatch-like timer. The global variable TICTOC is shared by the two functions, but it is invisible in the base workspace or in any other functions that do not declare it.function tic%    TIC Start a stopwatch timer.%        TIC; any stuff; TOC%    prints the time required.global TICTOCTICTOC = clock;function t = toc%    TOC Read the stopwatch timer.%    TOC prints the elapsed time since TIC was used.%    t = TOC; saves elapsed time in t, does not print.global TICTOCif nargout &amp;lt; 1    elapsed_time = etime(clock, TICTOC)    else        t = etime(clock, TICTOC);end anders als z.B. in C können mehrere Werte zurückgegeben werden, dafür wird [ ] benötigt: % stat.mfunction [mean,stdev]=stat(x)n=length(x);mean=sum(x)/n;stdev=sqrt(sum((x-mean).^2)/n); Aufruf: &amp;gt;&amp;gt; x=rand(1,100);&amp;gt;&amp;gt; [m,s]=stat(x)% 2 Rückgabewertem = 0.5280s = 0.2955&amp;gt;&amp;gt; d=stat(x)% 1 Rückgabewert geht auch! Genommen wird Nr.1d = 0.5280 Eine variable Anzahl von Argumenten ist möglich (siehe Doku zu nargin, nargout ) Mit type funame, wie schon gesehen, bzw. mit dbtype funame (mit Zeilennummern) können Funktionen (eigene und System-Funktionen im m-Code) ausgedruckt werden. Ein m-File kann neben der sog. primary function (die erste im File) weitere subfunctions enthalten. Die stehen aber nur innerhalb des m-Files zur Verfügung. Funktionen werden beim ersten Aufruf in ausführbaren Code übersetzt. Jeder weitere Aufruf geht dann deutlich schneller. Funktionen, die mit Matrizen arbeiten, sind dann schnell, wenn Speicher nicht dynamisch alloziert wird. Also am besten Matrizen immer schon statisch deklarieren mit z.B. B=ones(50,50). Es gibt kurze sog. anonyme Funktionen, die nicht in einem m-File gespeichert werden müssen, sondern direkt auf Kommandozeilenebene eingegeben werden: &amp;gt;&amp;gt; qu = @(x) x.^2;% quadriere&amp;gt;&amp;gt; b=qu(17)b = 289&amp;gt;&amp;gt; n=1:10n = 1     2     3     4     5     6     7     8     9    10&amp;gt;&amp;gt; qu(n)ans = 1     4     9    16    25    36    49    64    81   100 Anmerkung: wie wir gesehen haben, dürfen in m-Files auch ganz "normale" Matlab-Befehle stehen, nicht nur Unterprogramme. Das nennt man dann Skript. Zitat von http://www.mathworks.de/de/help/matlab/matlab_oop/why-use-object-oriented-design.html: When Should You Start Creating Object-Oriented Programs: Objects are well integrated into the MATLAB language, regardless of whether you are writing simple functions, working interactively in the command window, or creating large applications. Simple programming tasks are easily implemented as simple functions, but as the magnitude and complexity of your tasks increase, functions become more complex and difficult to manage. As functions become too large, you might break them into smaller functions and pass data from one to the other. However, as the number of functions becomes large, designing and managing the data passed to functions becomes difficult and error prone. At this point, you should consider moving your MATLAB programming tasks to object-oriented designs.</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/edverg/matlab/ml4.html</field>
<field name="title">Einführung in Matlab ? Kap.IV: Was gibt es sonst noch?</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/edverg/matlab/ml4.html</field>
<field name="content">Einführung in Matlab ? Kap.IV: Was gibt es sonst noch? Einführung in Matlab ? Kap.IV: Was gibt es sonst noch? Einführung in Matlab Fritz Wünsch, Stand 19.2.14 Kap.IV: Was gibt es sonst noch? (? pdf ) In diesem Abschnitt werden weitere wichtige Features des MATLAB-Core-Systems besprochen, so dass Sie einen einigermassen flächendeckenden Überblick bekommen. Befehle aus Toolboxes werden explizit nicht angesprochen. Zur Übersicht: laut MATLAB-Dokumentation gibt es die folgenden Funktionsgruppen: Desktop Tools and Development Environment Startup, Command Window, help, editing and debugging, tuning, other general functions Mathematics Arrays and matrices, linear algebra, other areas of mathematics Data Analysis Basic data operations, descriptive statistics, covariance and correlation, filtering and convolution, numerical derivatives and integrals, Fourier transforms, time series analysis Programming and Data Types Function/expression evaluation, program control, function handles, object oriented programming, error handling, operators, data types, dates and times, timers File I/O General and low-level file I/O, plus specific file formats, like audio, spreadsheet, HDF, images Graphics Line plots, annotating graphs, specialized plots, images, printing, Handle Graphics, 3-D Visualization, Surface and mesh plots, view control, lighting and transparency, volume visualization Creating Graphical User Interfaces GUIDE, programming graphical user interfaces External Interfaces Interfaces to DLLs, Java, COM and ActiveX, Web services, and serial port devices, and C and Fortran routines Die folgenden Punkte greifen wir uns heraus: Function functions (Nullstellen, Numerische Integration) Differentialgleichungen Signalverarbeitung, FFT Dünne Matrizen Handle Graphics und der Weg ins Chaos ... Movies Graphischer Input Bilder C-orientierte File-Ein- und Ausgabe Die MATLAB-Umgebung 1. Function functions Details siehe Doku: Mathematik ? Function Functions Hier geht es um MATLAB-Funktionen, die als Parameter eine mathematische Funktion erwarten. Gesehen haben wir schon fplot zum direkten Plotten einer Funktion. Nullstellen einer (kontinuierlichen) Funktion mit fzero &amp;gt;&amp;gt; x = fzero(@sin,3)% Nullstellen des eingebauten Sinus % in der Nähe von 3x =    3.1416&amp;gt;&amp;gt; x = fzero(@cos,[1 2])% Nullstellen des eingebauten Sinus % im Intervall [1 2]x =    1.5708&amp;gt;&amp;gt; f = @(x)x.^3-2*x-5;% Nullstellen einer anonymen Funktion &amp;gt;&amp;gt; z = fzero(f,2)z =    2.0946&amp;gt;&amp;gt; z = roots([1 0 -2 -5])% hier würde auch der Befehl roots%('Polynomial Roots') gehen% Parameter: Koeffizienten des Polynoms z=   2.0946   -1.0473 + 1.1359i   -1.0473 - 1.1359i Anmerkung: auch folgende Notation ist bei function functions möglich: &amp;gt;&amp;gt; a = 'sin'&amp;gt;&amp;gt; fzero(a,3)&amp;gt;&amp;gt; fzero('x.^3-2*x-5',2)&amp;gt;&amp;gt; fzero(@(x) x.^3-2*x-5,2) Numerische Integration mit quad Es gibt verschiedene mathematische Methoden, z.B. kennt Matlab u.a. trapz, quad, integral Auch Doppel- und Dreifachintegrale lassen sich berechnen. Hier nur ein Beispiel mit der rekursiven, adaptiven Simpson-Regel (Genauigkeit 10 -6): &amp;gt;&amp;gt; F = @(x)1./(x.^3-2*x-5);&amp;gt;&amp;gt; Q = quad(F,0,2) % integriere zwischen 0 und 2Q=  -0.4605 2. Differentialgleichungen mit ode23 Details siehe Doku: Mathematik ? Differential Equations Es gibt diverse Routinen zur Lösung von Differentialgleichungen, für partielle sogar eine eigene Toolbox. Hier nur das Standard-Werkzeug ode23 mit dem Runge-Kutta-Verfahren für ein System linearer DGLs   dy/dt = f(t,y):  [T,Y] = ode23(odefun,tspan,y0)  % auch explizite Optionen möglich! Parameter: odefun: Funktions-Handle für die rechte Seite der DGL (M-File) tspan: Intervall der Lösung, also z.B. [0 10] y0: Vektor mit den Anfangsbedingungen Rückgabewert T: Zeilenvektor mit den einzelnen Zeitpunkten Rückgabewert Y: Matrix mit dem Lösungsvektor Die Bedienung ist nicht ganz trivial, daher am besten konkretes Beispiel: Physikalisches Pendel. Eigentlich wird es beschrieben durch eine lineare DGL 2.Ordnung mit Ort x, Geschwindigkeit v=dx/dt und Beschleunigung dx2/dt2: d2x/dt2 = dv/dt = - 0.5*sin(x(t)) Diese eine DGL ist aber äquivalent zu einem System aus zwei linearen DGLs erster Ordnung: Vektor y = ( y(1), y(2) ) = (Ort x, Geschwindigkeit v) Geschwindigkeit: dx/dt = v, also dy(1) = y(2) Ort: d 2x/dt 2 = dv/dt = -0.5*sin(x(t)), also dy(2) = -0.5*sin(y(1)) Damit muss odefun so ausschauen: %pendel.mfunction dy=pendel(t,y)dy=zeros(2,1);              % mache leeren Spaltenvektordy(1)=y(2);dy(2)=-0.5*sin(y(1)); Löse jetzt das DGL-System für die Anfangsbedingung v=0, einmal mit großer Anfangsauslenkung, dann mit kleiner: &amp;gt;&amp;gt; [T,Y]=ode23('pendel',[0 20],[2.9 0]);% hohe Auslenkung bei t=0&amp;gt;&amp;gt; plot(T,Y(:,1),T,Y(:,2),'--')% nicht harmonisch&amp;gt;&amp;gt; title('Ort und Geschwindigkeit als Funktion der Zeit')&amp;gt;&amp;gt; legend('Ort','Geschwindigkeit')&amp;gt;&amp;gt; plot(Y(:,1),Y(:,2))&amp;gt;&amp;gt; title('Phasenportraet')&amp;gt;&amp;gt; [T,Y]=ode23('pendel',[0 20],[1 0]);% kleine Anfangsauslenkung&amp;gt;&amp;gt; plot(T,Y(:,1),T,Y(:,2),'--')&amp;gt;&amp;gt; title('Harmonische Schwingung bei kleinen Auslenkungen') 3. Signalverarbeitung, FFT Wir hatten bereits die Faltung kennengelernt: &amp;gt;&amp;gt; glatt=convn(c3,fenster,'same'); Sehr viele Funktionalitäten aus diesem Bereich sind in der DSP-Toolbox enthalten, z.B. das Design von schnellen Digitalen Filtern oder der Befehl filter: Filter data with recursive (IIR) or nonrecursive (FIR) filter. Hier nur die diskrete Fast Fourier Transformation (FFT), die schon beim Core-System dabei ist. Zur Erinnerung: die Fouriertransformierte eines zeitabhängigen Signals liefert die enthaltenen Frequenzanteile. 'Klassisch' berechnete man die FT durch Korrelation mit den Basis-Sinus- und Cosinusfunktionen, der Rechenaufwand skalierte mit N 2 (N: Zahl der Messpunkte). Der schnelle FT-Algorithmus skaliert nur mit N*log(N). Zunächst basteln wir uns ein verrauschtes 'Messsignal': &amp;gt;&amp;gt; Fs = 1000;                    % Sampling frequency 1kHz&amp;gt;&amp;gt; T = 1/1000;                   % Sample time 1ms&amp;gt;&amp;gt; L = 1000;                     % Length of signal&amp;gt;&amp;gt; t = (0:L-1)*T;                % Time vector&amp;gt;&amp;gt; % Sum of a 50 Hz sinusoid and a 120 Hz sinusoid&amp;gt;&amp;gt; x = 0.7*sin(2*pi*50*t) + sin(2*pi*120*t); &amp;gt;&amp;gt; y = x + 2*randn(size(t));     % Sinusoids plus noise&amp;gt;&amp;gt; plot(Fs*t(1:50),y(1:50))&amp;gt;&amp;gt; title('Signal Corrupted with Zero-Mean Random Noise')&amp;gt;&amp;gt; xlabel('time (milliseconds)')  Jetzt kommt die FFT. Wir können sie direkt auf das Feld der Länge 1000 loslassen: &amp;gt;&amp;gt; Y=fft(y);&amp;gt;&amp;gt; plot(abs(Y)) Wir sehen sehr schön die beiden Peaks bei 50 und 120Hz. Ab Punkt 500 wird das Spektrum gespiegelt, eine Folge der Digitalisierung: aussagekräftig sind nur die die Frequenzen bis 500Hz, was in der Sprache der Digitalen Signalverarbeitung der halben Abstastrate entspricht (? ' Niquist-Theorem'). Schneller geht der Cooley-Tuckey-Algorithmus der FFT mit einer Zweierpotenz als Feldlänge: &amp;gt;&amp;gt; NFFT = 2^nextpow2(L);           % Next power of 2 from length of y&amp;gt;&amp;gt; Y = fft(y,NFFT)/L;&amp;gt;&amp;gt; f = Fs/2*linspace(0,1,NFFT/2);  % bastle 512-Punkte-Vektor [0,1]&amp;gt;&amp;gt; % Plot single-sided amplitude spectrum.&amp;gt;&amp;gt; plot(f,2*abs(Y(1:NFFT/2)))    % Powerspektrum&amp;gt;&amp;gt; title('Single-Sided Amplitude Spectrum of y(t)')&amp;gt;&amp;gt; xlabel('Frequency (Hz)')&amp;gt;&amp;gt; ylabel('|Y(f)|') 4. Dünne Matrizen MATLAB beinhaltet zahlreiche optimierte Routinen für Matrizen, deren Elemente nur zu einem geringen Prozentsatz von 0 verschieden sind, Übersicht siehe Doku. Beispiel: Graphen. Graph = Menge von Punkten (Knoten) mit bestimmten Verbindungen dazwischen. Verbindungsmatrix (i,j) = 1, wenn Knoten i mit j verbunden ist, sonst 0. Konkretes Beispiel Bucky-Ball: &amp;gt;&amp;gt; [B,v]=bucky;% hole v mit den Koordinaten und % B mit der dünnen Verbindungsmatrix&amp;gt;&amp;gt; type bucky % hier wird die dünne Matrix belegt....% ----------------B = sparse(30,30);% ----------------phi = zeros(30,1);theta = zeros(30,1);k = 5;for j = 1:5   t = 2*(j-1)*pi/5;   phi(j) = alfa(1);   theta(j) = t;   B(j,k+1) = 1;   B(j,rem(j,5)+1) = 1;....&amp;gt;&amp;gt; k=1:30;&amp;gt;&amp;gt; gplot(B(k,k),v);% visualisiere den halben Ball&amp;gt;&amp;gt;% gplot: Plot nodes and links % representing adjacency matrix&amp;gt;&amp;gt; spy(B);% spy: Visualize sparsity pattern&amp;gt;&amp;gt; spy(B^4);% jetzt wird die Matrix schon voller ... 5. Handle Graphics und der Weg ins Chaos ... Für fortgeschrittene (schnelle) Graphik gibt es eine ganze Reihe von Möglichkeiten, auf niedrigem Level die Graphik-Objekte und -Funktionalitäten zu steuern. Beispiel: chaotische 3D-Bewegung live erzeugt mit dem Lorenz-Attraktor:   dX / dt =  a (Y - X)            |-a   a   0 |   | X |    dY / dt =  X (b - Z) - Y    =   | b  -1  -X | ? | Y |    dZ / dt =  X Y - c Z            | 0   X  -c |   | Z |   So ist es in Wikipedia zu finden. Anders hingeschrieben und mit konkreten Werten von a, b, c:   dy / dt = A * y   mit der Matrix A, die wieder vom Ortsvektor y abhängt: A(y)=   -8/3      0       y(2)     0      -10        10        -y(2)     28        -1 Die Lösung besteht aus wechselweisen Orbits um 2 Fixpunkte: Hier ist der Code aus lorenzdemo.m, der ganz primitiv in einer Endlosschleife die Trajektorie numerisch berechnet und malt: % lorenzdemo.mfigure;% neues ZeichenfensterA=[-8/3 0 0; 0 -10 10; 0 28 -1];% die Matrix beim Starty=[35 -10 -7]';% der Ausgangspunkth=0.01;% feste Schrittweite p=plot3(y(1),y(2),y(3),'.','EraseMode','none','MarkerSize',2);axis([0 50 -25 25 -25 25])hold onwhile 1% EndlosschleifeA(1,3)=y(2);A(3,1)=-y(2);ydot=A*y;y=y+h*ydot;set(p,'XData',y(1),'YData',y(2),'ZData',y(3))drawnowend Bezüglich Graphik sehen wir folgendes Neue: p = plot3(...) merkt sich den Graphik-Handle (d.h., einen Zeiger auf dieses Graphikobjekt) in der Variablen p EraseMode None stellt ein, dass bereits gezeichnete Punkte bei einem Überschreiben nicht gelöscht werden sollen markerSize 2 macht die Punkte ganz klein ... set(p,'PropertyName',PropertyValue,...) sets the named properties to the specified values on the object identified by p . In der vorhandenen Graphik setzen wir also einfach neue Punkte. Genauso könnte man Farben ändern usw. 6. Movies "movie plays the movie defined by a matrix whose columns are movie frames (usually produced by getframe )." Also probieren wir es mal: Z = peaks; % die 'peaks'-Funktion% Gitter wird automatisch erzeugt% z =  3*(1-x).^2.*exp(-(x.^2) - (y+1).^2) ...%    - 10*(x/5 - x.^3 - y.^5).*exp(-x.^2-y.^2) ...%    - 1/3*exp(-(x+1).^2 - y.^2);figure('Renderer','zbuffer')Z = peaks;% erster Surface-Plotsurf(Z); axis tight% sets the axis limits to                                        % the range of the dataset(gca,'NextPlot','replaceChildren');% set 'current axis handle' auf 'do not reset axis properties'% Preallocate the struct array for the struct returned by getframeF(20) = struct('cdata',[],'colormap',[]);% Record the moviefor j = 1:20     surf(.01+sin(2*pi*j/20)*Z,Z)    F(j) = getframe;end% Play the movie ten timesmovie(F,10) 7. Graphischer Input ginput am Beispiel von spline &amp;gt;&amp;gt; clf% clear current figure window&amp;gt;&amp;gt; axis([0 10 0 10])&amp;gt;&amp;gt; hold on&amp;gt;&amp;gt; x=[];% noch keine Punkte gesammelt&amp;gt;&amp;gt; y=[];&amp;gt;&amp;gt; n=0;&amp;gt;&amp;gt; disp('Neuen Punkt mit linke Maustaste, letzten mit rechter')&amp;gt;&amp;gt; but=1;&amp;gt;&amp;gt; while but==1[xi,yi,but]=ginput(1);% Capture 1 pointplot(xi,yi,'ro')% male ihn hinn=n+1;x(n,1)=xi;% anhängen ans Punktefeldy(n,1)=yi;end&amp;gt;&amp;gt; t=1:n;&amp;gt;&amp;gt; ts=1:0.1:n;&amp;gt;&amp;gt; xs=spline(t,x,ts);% kubischer spline der X-Werte&amp;gt;&amp;gt; ys=spline(t,y,ts);% der Y-Werte&amp;gt;&amp;gt; plot(xs,ys,'b-');% Resultat hinmalen&amp;gt;&amp;gt; hold off 8. Bilder Das Laden von Bildern geht mit A=imread('demo.jpg'). Diverse Formate werden von MATLAB unterstützt. If the file contains a truecolor image, A is an M-by-N-by-3 array (jpeg: Typ uint8: unsigned integers 0...255; also zu jedem Pixel ein RGB-Tripel zu je 1 Byte) Mit image(A) wird das Bild dargestellt. Sie können schon mal elementare Bildverarbeitung machen: image(0.5*A) ... image(1.5*A). Es gibt sehr, sehr viele Image Properties! So kann man das Bild beliebig bearbeiten / verfremden: Das Schreiben von Bildern geht mit imwrite('demo.jpg'). Auch hier werden diverse Formate unterstützt. Zur Bildverarbeitung gibt es speziell die Image Processing Toolbox 9. C-orientierte File-Ein- und Ausgabe Zusätzlich zu den diversen eigenen IO-Möglichkeiten, die wir bereits kennengelernt haben, und vielen weiteren (z.B. für Audio-Files) bietet MATLAB auch C-ähnliche formatierte File-IO für beliebige Binär- und Textfiles an. Hier nur eine Übersicht, ein Beispiel hatten wir ja auch schon: fclose Close one or more open files feof Test for end-of-file ferror Query MATLAB about errors in file input or output fgetl Read line from file, discarding newline character fgets Read line from file, keeping newline character fopen Open file, or obtain information about open files fprintf Write formatted data to file fread Read binary data from file frewind Move file position indicator to beginning of open file fscanf Read formatted data from file fseek Set file position indicator ftell File position indicator fwrite Write binary data to file 10. Die MATLAB-Umgebung who zeigt an, welche Variablen bereits benutzt wurden. path gibt den aktuell eingestellten Suchpfad aus. Er kann mit File ? Set Path geändert werden, genauso aber direkt in Matlab, z.B. mit &amp;gt;&amp;gt; path('newpath')&amp;gt;&amp;gt; path(path,'newpath') &amp;gt;&amp;gt; path('newpath',path) what gibt die Namen der Unterprogramme (M-Files) und der MAT-Files im aktuellen Verzeichnis aus diary on schaltet eine Protokollfunktion ein, protokolliert wird in die Datei diary im aktuellen Verzeichnis. Ende mit diary off. pwd gibt das aktuelle Arbeitsverzeichnis aus, ls zeigt den Inhalt, cd irgendwohin wechselt in ein anderes Verzeichnis. The error function provides an error return from M-files: function foo(x,y)if nargin ~= 2     error('Wrong number of input arguments')end&amp;gt;&amp;gt; foo(pi)??? Error using ==&amp;gt; fooWrong number of input arguments pause: Halt execution temporarily pause, by itself, causes M-files to stop and wait for you to press any key before continuing. pause(n) pauses execution for n seconds before continuing, where n can be any nonnegative real number. try, catch sowie return sind manchmal auch ganz nützlich: try   MATLAB commands     % Try block; wenn hier Fehler --&amp;gt; Catch Matlab Exceptioncatch ME   MATLAB commands     % Catch blockend% ------------------------------------------------------------------------function d = det(A)%DET det(A) is the determinant of A.if isempty(A)    d = 1;    returnelse    ...end Für größere Projekte hält MATLAB auch einen eingebauten Debugger bereit. Es existiert auch ein Syntax-Checker MLint sowie ein Profiler zur Performance-Verbesserung.</field>
<field name="important">Einführung in Matlab ? Kap.IV: Was gibt es sonst noch? Einführung in Matlab ? Kap.IV: Was gibt es sonst noch? Einführung in Matlab Fritz Wünsch, Stand 19.2.14 Kap.IV: Was gibt es sonst noch? (? pdf ) In diesem Abschnitt werden weitere wichtige Features des MATLAB-Core-Systems besprochen, so dass Sie einen einigermassen flächendeckenden Überblick bekommen. Befehle aus Toolboxes werden explizit nicht angesprochen. Zur Übersicht: laut MATLAB-Dokumentation gibt es die folgenden Funktionsgruppen: Desktop Tools and Development Environment Startup, Command Window, help, editing and debugging, tuning, other general functions Mathematics Arrays and matrices, linear algebra, other areas of mathematics Data Analysis Basic data operations, descriptive statistics, covariance and correlation, filtering and convolution, numerical derivatives and integrals, Fourier transforms, time series analysis Programming and Data Types Function/expression evaluation, program control, function handles, object oriented programming, error handling, operators, data types, dates and times, timers File I/O General and low-level file I/O, plus specific file formats, like audio, spreadsheet, HDF, images Graphics Line plots, annotating graphs, specialized plots, images, printing, Handle Graphics, 3-D Visualization, Surface and mesh plots, view control, lighting and transparency, volume visualization Creating Graphical User Interfaces GUIDE, programming graphical user interfaces External Interfaces Interfaces to DLLs, Java, COM and ActiveX, Web services, and serial port devices, and C and Fortran routines Die folgenden Punkte greifen wir uns heraus: Function functions (Nullstellen, Numerische Integration) Differentialgleichungen Signalverarbeitung, FFT Dünne Matrizen Handle Graphics und der Weg ins Chaos ... Movies Graphischer Input Bilder C-orientierte File-Ein- und Ausgabe Die MATLAB-Umgebung 1. Function functions Details siehe Doku: Mathematik ? Function Functions Hier geht es um MATLAB-Funktionen, die als Parameter eine mathematische Funktion erwarten. Gesehen haben wir schon fplot zum direkten Plotten einer Funktion. Nullstellen einer (kontinuierlichen) Funktion mit fzero &amp;gt;&amp;gt; x = fzero(@sin,3)% Nullstellen des eingebauten Sinus % in der Nähe von 3x =    3.1416&amp;gt;&amp;gt; x = fzero(@cos,[1 2])% Nullstellen des eingebauten Sinus % im Intervall [1 2]x =    1.5708&amp;gt;&amp;gt; f = @(x)x.^3-2*x-5;% Nullstellen einer anonymen Funktion &amp;gt;&amp;gt; z = fzero(f,2)z =    2.0946&amp;gt;&amp;gt; z = roots([1 0 -2 -5])% hier würde auch der Befehl roots%('Polynomial Roots') gehen% Parameter: Koeffizienten des Polynoms z=   2.0946   -1.0473 + 1.1359i   -1.0473 - 1.1359i Anmerkung: auch folgende Notation ist bei function functions möglich: &amp;gt;&amp;gt; a = 'sin'&amp;gt;&amp;gt; fzero(a,3)&amp;gt;&amp;gt; fzero('x.^3-2*x-5',2)&amp;gt;&amp;gt; fzero(@(x) x.^3-2*x-5,2) Numerische Integration mit quad Es gibt verschiedene mathematische Methoden, z.B. kennt Matlab u.a. trapz, quad, integral Auch Doppel- und Dreifachintegrale lassen sich berechnen. Hier nur ein Beispiel mit der rekursiven, adaptiven Simpson-Regel (Genauigkeit 10 -6): &amp;gt;&amp;gt; F = @(x)1./(x.^3-2*x-5);&amp;gt;&amp;gt; Q = quad(F,0,2) % integriere zwischen 0 und 2Q=  -0.4605 2. Differentialgleichungen mit ode23 Details siehe Doku: Mathematik ? Differential Equations Es gibt diverse Routinen zur Lösung von Differentialgleichungen, für partielle sogar eine eigene Toolbox. Hier nur das Standard-Werkzeug ode23 mit dem Runge-Kutta-Verfahren für ein System linearer DGLs   dy/dt = f(t,y):  [T,Y] = ode23(odefun,tspan,y0)  % auch explizite Optionen möglich! Parameter: odefun: Funktions-Handle für die rechte Seite der DGL (M-File) tspan: Intervall der Lösung, also z.B. [0 10] y0: Vektor mit den Anfangsbedingungen Rückgabewert T: Zeilenvektor mit den einzelnen Zeitpunkten Rückgabewert Y: Matrix mit dem Lösungsvektor Die Bedienung ist nicht ganz trivial, daher am besten konkretes Beispiel: Physikalisches Pendel. Eigentlich wird es beschrieben durch eine lineare DGL 2.Ordnung mit Ort x, Geschwindigkeit v=dx/dt und Beschleunigung dx2/dt2: d2x/dt2 = dv/dt = - 0.5*sin(x(t)) Diese eine DGL ist aber äquivalent zu einem System aus zwei linearen DGLs erster Ordnung: Vektor y = ( y(1), y(2) ) = (Ort x, Geschwindigkeit v) Geschwindigkeit: dx/dt = v, also dy(1) = y(2) Ort: d 2x/dt 2 = dv/dt = -0.5*sin(x(t)), also dy(2) = -0.5*sin(y(1)) Damit muss odefun so ausschauen: %pendel.mfunction dy=pendel(t,y)dy=zeros(2,1);              % mache leeren Spaltenvektordy(1)=y(2);dy(2)=-0.5*sin(y(1)); Löse jetzt das DGL-System für die Anfangsbedingung v=0, einmal mit großer Anfangsauslenkung, dann mit kleiner: &amp;gt;&amp;gt; [T,Y]=ode23('pendel',[0 20],[2.9 0]);% hohe Auslenkung bei t=0&amp;gt;&amp;gt; plot(T,Y(:,1),T,Y(:,2),'--')% nicht harmonisch&amp;gt;&amp;gt; title('Ort und Geschwindigkeit als Funktion der Zeit')&amp;gt;&amp;gt; legend('Ort','Geschwindigkeit')&amp;gt;&amp;gt; plot(Y(:,1),Y(:,2))&amp;gt;&amp;gt; title('Phasenportraet')&amp;gt;&amp;gt; [T,Y]=ode23('pendel',[0 20],[1 0]);% kleine Anfangsauslenkung&amp;gt;&amp;gt; plot(T,Y(:,1),T,Y(:,2),'--')&amp;gt;&amp;gt; title('Harmonische Schwingung bei kleinen Auslenkungen') 3. Signalverarbeitung, FFT Wir hatten bereits die Faltung kennengelernt: &amp;gt;&amp;gt; glatt=convn(c3,fenster,'same'); Sehr viele Funktionalitäten aus diesem Bereich sind in der DSP-Toolbox enthalten, z.B. das Design von schnellen Digitalen Filtern oder der Befehl filter: Filter data with recursive (IIR) or nonrecursive (FIR) filter. Hier nur die diskrete Fast Fourier Transformation (FFT), die schon beim Core-System dabei ist. Zur Erinnerung: die Fouriertransformierte eines zeitabhängigen Signals liefert die enthaltenen Frequenzanteile. 'Klassisch' berechnete man die FT durch Korrelation mit den Basis-Sinus- und Cosinusfunktionen, der Rechenaufwand skalierte mit N 2 (N: Zahl der Messpunkte). Der schnelle FT-Algorithmus skaliert nur mit N*log(N). Zunächst basteln wir uns ein verrauschtes 'Messsignal': &amp;gt;&amp;gt; Fs = 1000;                    % Sampling frequency 1kHz&amp;gt;&amp;gt; T = 1/1000;                   % Sample time 1ms&amp;gt;&amp;gt; L = 1000;                     % Length of signal&amp;gt;&amp;gt; t = (0:L-1)*T;                % Time vector&amp;gt;&amp;gt; % Sum of a 50 Hz sinusoid and a 120 Hz sinusoid&amp;gt;&amp;gt; x = 0.7*sin(2*pi*50*t) + sin(2*pi*120*t); &amp;gt;&amp;gt; y = x + 2*randn(size(t));     % Sinusoids plus noise&amp;gt;&amp;gt; plot(Fs*t(1:50),y(1:50))&amp;gt;&amp;gt; title('Signal Corrupted with Zero-Mean Random Noise')&amp;gt;&amp;gt; xlabel('time (milliseconds)')  Jetzt kommt die FFT. Wir können sie direkt auf das Feld der Länge 1000 loslassen: &amp;gt;&amp;gt; Y=fft(y);&amp;gt;&amp;gt; plot(abs(Y)) Wir sehen sehr schön die beiden Peaks bei 50 und 120Hz. Ab Punkt 500 wird das Spektrum gespiegelt, eine Folge der Digitalisierung: aussagekräftig sind nur die die Frequenzen bis 500Hz, was in der Sprache der Digitalen Signalverarbeitung der halben Abstastrate entspricht (? ' Niquist-Theorem'). Schneller geht der Cooley-Tuckey-Algorithmus der FFT mit einer Zweierpotenz als Feldlänge: &amp;gt;&amp;gt; NFFT = 2^nextpow2(L);           % Next power of 2 from length of y&amp;gt;&amp;gt; Y = fft(y,NFFT)/L;&amp;gt;&amp;gt; f = Fs/2*linspace(0,1,NFFT/2);  % bastle 512-Punkte-Vektor [0,1]&amp;gt;&amp;gt; % Plot single-sided amplitude spectrum.&amp;gt;&amp;gt; plot(f,2*abs(Y(1:NFFT/2)))    % Powerspektrum&amp;gt;&amp;gt; title('Single-Sided Amplitude Spectrum of y(t)')&amp;gt;&amp;gt; xlabel('Frequency (Hz)')&amp;gt;&amp;gt; ylabel('|Y(f)|') 4. Dünne Matrizen MATLAB beinhaltet zahlreiche optimierte Routinen für Matrizen, deren Elemente nur zu einem geringen Prozentsatz von 0 verschieden sind, Übersicht siehe Doku. Beispiel: Graphen. Graph = Menge von Punkten (Knoten) mit bestimmten Verbindungen dazwischen. Verbindungsmatrix (i,j) = 1, wenn Knoten i mit j verbunden ist, sonst 0. Konkretes Beispiel Bucky-Ball: &amp;gt;&amp;gt; [B,v]=bucky;% hole v mit den Koordinaten und % B mit der dünnen Verbindungsmatrix&amp;gt;&amp;gt; type bucky % hier wird die dünne Matrix belegt....% ----------------B = sparse(30,30);% ----------------phi = zeros(30,1);theta = zeros(30,1);k = 5;for j = 1:5   t = 2*(j-1)*pi/5;   phi(j) = alfa(1);   theta(j) = t;   B(j,k+1) = 1;   B(j,rem(j,5)+1) = 1;....&amp;gt;&amp;gt; k=1:30;&amp;gt;&amp;gt; gplot(B(k,k),v);% visualisiere den halben Ball&amp;gt;&amp;gt;% gplot: Plot nodes and links % representing adjacency matrix&amp;gt;&amp;gt; spy(B);% spy: Visualize sparsity pattern&amp;gt;&amp;gt; spy(B^4);% jetzt wird die Matrix schon voller ... 5. Handle Graphics und der Weg ins Chaos ... Für fortgeschrittene (schnelle) Graphik gibt es eine ganze Reihe von Möglichkeiten, auf niedrigem Level die Graphik-Objekte und -Funktionalitäten zu steuern. Beispiel: chaotische 3D-Bewegung live erzeugt mit dem Lorenz-Attraktor:   dX / dt =  a (Y - X)            |-a   a   0 |   | X |    dY / dt =  X (b - Z) - Y    =   | b  -1  -X | ? | Y |    dZ / dt =  X Y - c Z            | 0   X  -c |   | Z |   So ist es in Wikipedia zu finden. Anders hingeschrieben und mit konkreten Werten von a, b, c:   dy / dt = A * y   mit der Matrix A, die wieder vom Ortsvektor y abhängt: A(y)=   -8/3      0       y(2)     0      -10        10        -y(2)     28        -1 Die Lösung besteht aus wechselweisen Orbits um 2 Fixpunkte: Hier ist der Code aus lorenzdemo.m, der ganz primitiv in einer Endlosschleife die Trajektorie numerisch berechnet und malt: % lorenzdemo.mfigure;% neues ZeichenfensterA=[-8/3 0 0; 0 -10 10; 0 28 -1];% die Matrix beim Starty=[35 -10 -7]';% der Ausgangspunkth=0.01;% feste Schrittweite p=plot3(y(1),y(2),y(3),'.','EraseMode','none','MarkerSize',2);axis([0 50 -25 25 -25 25])hold onwhile 1% EndlosschleifeA(1,3)=y(2);A(3,1)=-y(2);ydot=A*y;y=y+h*ydot;set(p,'XData',y(1),'YData',y(2),'ZData',y(3))drawnowend Bezüglich Graphik sehen wir folgendes Neue: p = plot3(...) merkt sich den Graphik-Handle (d.h., einen Zeiger auf dieses Graphikobjekt) in der Variablen p EraseMode None stellt ein, dass bereits gezeichnete Punkte bei einem Überschreiben nicht gelöscht werden sollen markerSize 2 macht die Punkte ganz klein ... set(p,'PropertyName',PropertyValue,...) sets the named properties to the specified values on the object identified by p . In der vorhandenen Graphik setzen wir also einfach neue Punkte. Genauso könnte man Farben ändern usw. 6. Movies "movie plays the movie defined by a matrix whose columns are movie frames (usually produced by getframe )." Also probieren wir es mal: Z = peaks; % die 'peaks'-Funktion% Gitter wird automatisch erzeugt% z =  3*(1-x).^2.*exp(-(x.^2) - (y+1).^2) ...%    - 10*(x/5 - x.^3 - y.^5).*exp(-x.^2-y.^2) ...%    - 1/3*exp(-(x+1).^2 - y.^2);figure('Renderer','zbuffer')Z = peaks;% erster Surface-Plotsurf(Z); axis tight% sets the axis limits to                                        % the range of the dataset(gca,'NextPlot','replaceChildren');% set 'current axis handle' auf 'do not reset axis properties'% Preallocate the struct array for the struct returned by getframeF(20) = struct('cdata',[],'colormap',[]);% Record the moviefor j = 1:20     surf(.01+sin(2*pi*j/20)*Z,Z)    F(j) = getframe;end% Play the movie ten timesmovie(F,10) 7. Graphischer Input ginput am Beispiel von spline &amp;gt;&amp;gt; clf% clear current figure window&amp;gt;&amp;gt; axis([0 10 0 10])&amp;gt;&amp;gt; hold on&amp;gt;&amp;gt; x=[];% noch keine Punkte gesammelt&amp;gt;&amp;gt; y=[];&amp;gt;&amp;gt; n=0;&amp;gt;&amp;gt; disp('Neuen Punkt mit linke Maustaste, letzten mit rechter')&amp;gt;&amp;gt; but=1;&amp;gt;&amp;gt; while but==1[xi,yi,but]=ginput(1);% Capture 1 pointplot(xi,yi,'ro')% male ihn hinn=n+1;x(n,1)=xi;% anhängen ans Punktefeldy(n,1)=yi;end&amp;gt;&amp;gt; t=1:n;&amp;gt;&amp;gt; ts=1:0.1:n;&amp;gt;&amp;gt; xs=spline(t,x,ts);% kubischer spline der X-Werte&amp;gt;&amp;gt; ys=spline(t,y,ts);% der Y-Werte&amp;gt;&amp;gt; plot(xs,ys,'b-');% Resultat hinmalen&amp;gt;&amp;gt; hold off 8. Bilder Das Laden von Bildern geht mit A=imread('demo.jpg'). Diverse Formate werden von MATLAB unterstützt. If the file contains a truecolor image, A is an M-by-N-by-3 array (jpeg: Typ uint8: unsigned integers 0...255; also zu jedem Pixel ein RGB-Tripel zu je 1 Byte) Mit image(A) wird das Bild dargestellt. Sie können schon mal elementare Bildverarbeitung machen: image(0.5*A) ... image(1.5*A). Es gibt sehr, sehr viele Image Properties! So kann man das Bild beliebig bearbeiten / verfremden: Das Schreiben von Bildern geht mit imwrite('demo.jpg'). Auch hier werden diverse Formate unterstützt. Zur Bildverarbeitung gibt es speziell die Image Processing Toolbox 9. C-orientierte File-Ein- und Ausgabe Zusätzlich zu den diversen eigenen IO-Möglichkeiten, die wir bereits kennengelernt haben, und vielen weiteren (z.B. für Audio-Files) bietet MATLAB auch C-ähnliche formatierte File-IO für beliebige Binär- und Textfiles an. Hier nur eine Übersicht, ein Beispiel hatten wir ja auch schon: fclose Close one or more open files feof Test for end-of-file ferror Query MATLAB about errors in file input or output fgetl Read line from file, discarding newline character fgets Read line from file, keeping newline character fopen Open file, or obtain information about open files fprintf Write formatted data to file fread Read binary data from file frewind Move file position indicator to beginning of open file fscanf Read formatted data from file fseek Set file position indicator ftell File position indicator fwrite Write binary data to file 10. Die MATLAB-Umgebung who zeigt an, welche Variablen bereits benutzt wurden. path gibt den aktuell eingestellten Suchpfad aus. Er kann mit File ? Set Path geändert werden, genauso aber direkt in Matlab, z.B. mit &amp;gt;&amp;gt; path('newpath')&amp;gt;&amp;gt; path(path,'newpath') &amp;gt;&amp;gt; path('newpath',path) what gibt die Namen der Unterprogramme (M-Files) und der MAT-Files im aktuellen Verzeichnis aus diary on schaltet eine Protokollfunktion ein, protokolliert wird in die Datei diary im aktuellen Verzeichnis. Ende mit diary off. pwd gibt das aktuelle Arbeitsverzeichnis aus, ls zeigt den Inhalt, cd irgendwohin wechselt in ein anderes Verzeichnis. The error function provides an error return from M-files: function foo(x,y)if nargin ~= 2     error('Wrong number of input arguments')end&amp;gt;&amp;gt; foo(pi)??? Error using ==&amp;gt; fooWrong number of input arguments pause: Halt execution temporarily pause, by itself, causes M-files to stop and wait for you to press any key before continuing. pause(n) pauses execution for n seconds before continuing, where n can be any nonnegative real number. try, catch sowie return sind manchmal auch ganz nützlich: try   MATLAB commands     % Try block; wenn hier Fehler --&amp;gt; Catch Matlab Exceptioncatch ME   MATLAB commands     % Catch blockend% ------------------------------------------------------------------------function d = det(A)%DET det(A) is the determinant of A.if isempty(A)    d = 1;    returnelse    ...end Für größere Projekte hält MATLAB auch einen eingebauten Debugger bereit. Es existiert auch ein Syntax-Checker MLint sowie ein Profiler zur Performance-Verbesserung.</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/edverg/pcmess/</field>
<field name="title">Physik ? Studium ? IT-Ausbildung ? PC Messtechnik</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/edverg/pcmess/</field>
<field name="content">Physik ? Studium ? IT-Ausbildung ? PC Messtechnik Physik ? Studium ? IT-Ausbildung ? PC Messtechnik PC-Messtechnik mit LabView Blockkurs, 2 Wochen ganztägig; 4SWSt, 6 LP Die IT berührt mittlerweise so gut wie alle Bereiche unseres Lebens. Damit ein Rechner technische Aufgaben erfüllen kann, muss er mit seiner Umwelt kommunizieren, Signale diverser Art aufnehmen, verarbeiten und oft auch Steuer- und Regel-Output erzeugen. Dieser Kurs besteht aus 3 Teilen:: Grundlagen der Sensorik, Messtechnik und Signal-Konditionierung (Theorie und Praxis) Einführung in die Laborsoftware LabVIEW von National Instruments Projekte in Kleingruppen: Steuerung/Regelung/Messdatenerfassung am PC mit LabView an Hand exemplarischer Versuchsaufbauten. Anregungen der Kursteilnehmer werden gerne umgesetzt! Als Kurs-Voraussetzungen werden benötigt: Grundkenntnisse in der Benutzung von Windows Grundlegende Programmierkenntnisse in einer beliebigen Sprache hilfreich Grundkenntnisse im Bereich der Elektronik Literatur zu LabView Einen sehr guten Einstieg verschaffen die in der LabVIEW-Installation enthaltenen Dateien "Erste Schritte LabView.pdf", "Schnellübersicht LabView.pdf", "Grundlagen LabView.pdf" und " Benutzerhandbuch LabView.pdf". Diese können auch von www.ni.com kostenfrei heruntergeladen werden. Durch den großen Marktanteil in der Wirtschaft gibt es für LabVIEW auch sehr viele (kostenpflichtige) Bücher zu kaufen. Empfehlenswert ist dabei das Buch von Bernwald Mütterlein, Handbuch für die Programmierung mit LabVIEW aus Spektrum Akademischer Verlag. Gliederung des Abschnittes Einführung in LabView Einführung Bedienung &amp; Grundfunktionen Werkzeugkasten Paletten Variablentypen Datenfluss und Verkabelung Debugging Dokumentation und Kommentieren von Programmen Strukturen Schleifen &amp; Strukturen for/while - Schleifen case - Struktur Sequenzen Mathematische Knoten Ereignis- und zeitgesteuerte Strukturen Funktionsweise von Strukturen und deren zeitliche Abarbeitung Übergabe von Daten an, innerhalb und von Strukturen innerhalb eines Programms Einbinden von externem Programmcode (DLLs, C, MATLAB, Shell) Variablen Lokale und globale Variablen Arrays Eigenschaften Erstellung, Benutzung und Anzeige Strings Verwenden von Strings Stringmanipulation Regular Expressions Strings für Ein- und Ausgabe formatieren (Programm und Datei) Cluster Fehlerbehandlung Dateiein- und ausgabe Pfade generieren oder verändern Dateien lesen und schreiben ASCII- und Binärdateien Diagramme und Graphen Möglichkeiten zur Visualisierung von Daten Speziell: Unterschied zwischen Diagramm und Graph Eigenschaften und Einstellungen SubVIs und ExpressVIs Erstellen von SubVIs Einbinden in Programme Automatisches Erstellen von SubVIs Einbinden von ExpressVIs Unterschiede zwischen SubVI und ExpressVI Events und Kommunikation mit anderen Rechnern Schnittstellen zu LabVIEW   Impressum Letzte Änderung: 16.11.2012 von Webmaster</field>
<field name="important">Physik ? Studium ? IT-Ausbildung ? PC Messtechnik Physik ? Studium ? IT-Ausbildung ? PC Messtechnik PC-Messtechnik mit LabView Blockkurs, 2 Wochen ganztägig; 4SWSt, 6 LP Die IT berührt mittlerweise so gut wie alle Bereiche unseres Lebens. Damit ein Rechner technische Aufgaben erfüllen kann, muss er mit seiner Umwelt kommunizieren, Signale diverser Art aufnehmen, verarbeiten und oft auch Steuer- und Regel-Output erzeugen. Dieser Kurs besteht aus 3 Teilen:: Grundlagen der Sensorik, Messtechnik und Signal-Konditionierung (Theorie und Praxis) Einführung in die Laborsoftware LabVIEW von National Instruments Projekte in Kleingruppen: Steuerung/Regelung/Messdatenerfassung am PC mit LabView an Hand exemplarischer Versuchsaufbauten. Anregungen der Kursteilnehmer werden gerne umgesetzt! Als Kurs-Voraussetzungen werden benötigt: Grundkenntnisse in der Benutzung von Windows Grundlegende Programmierkenntnisse in einer beliebigen Sprache hilfreich Grundkenntnisse im Bereich der Elektronik Literatur zu LabView Einen sehr guten Einstieg verschaffen die in der LabVIEW-Installation enthaltenen Dateien "Erste Schritte LabView.pdf", "Schnellübersicht LabView.pdf", "Grundlagen LabView.pdf" und " Benutzerhandbuch LabView.pdf". Diese können auch von www.ni.com kostenfrei heruntergeladen werden. Durch den großen Marktanteil in der Wirtschaft gibt es für LabVIEW auch sehr viele (kostenpflichtige) Bücher zu kaufen. Empfehlenswert ist dabei das Buch von Bernwald Mütterlein, Handbuch für die Programmierung mit LabVIEW aus Spektrum Akademischer Verlag. Gliederung des Abschnittes Einführung in LabView Einführung Bedienung &amp; Grundfunktionen Werkzeugkasten Paletten Variablentypen Datenfluss und Verkabelung Debugging Dokumentation und Kommentieren von Programmen Strukturen Schleifen &amp; Strukturen for/while - Schleifen case - Struktur Sequenzen Mathematische Knoten Ereignis- und zeitgesteuerte Strukturen Funktionsweise von Strukturen und deren zeitliche Abarbeitung Übergabe von Daten an, innerhalb und von Strukturen innerhalb eines Programms Einbinden von externem Programmcode (DLLs, C, MATLAB, Shell) Variablen Lokale und globale Variablen Arrays Eigenschaften Erstellung, Benutzung und Anzeige Strings Verwenden von Strings Stringmanipulation Regular Expressions Strings für Ein- und Ausgabe formatieren (Programm und Datei) Cluster Fehlerbehandlung Dateiein- und ausgabe Pfade generieren oder verändern Dateien lesen und schreiben ASCII- und Binärdateien Diagramme und Graphen Möglichkeiten zur Visualisierung von Daten Speziell: Unterschied zwischen Diagramm und Graph Eigenschaften und Einstellungen SubVIs und ExpressVIs Erstellen von SubVIs Einbinden in Programme Automatisches Erstellen von SubVIs Einbinden von ExpressVIs Unterschiede zwischen SubVI und ExpressVI Events und Kommunikation mit anderen Rechnern Schnittstellen zu LabVIEW   Impressum Letzte Änderung: 16.11.2012 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/edverg/termine_ss14.phtml</field>
<field name="title">Physik ? Studium ? IT-Ausbildung ?
Terminübersicht</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/edverg/termine_ss14.phtml</field>
<field name="content">Physik ? Studium ? IT-Ausbildung ?Terminübersicht Physik ? Studium ? IT-Ausbildung ?Terminübersicht Studienbegleitende IT-Ausbildung SS14 Angebote der Physik-Fakultät in den Semesterferien vor Vorlesungsbeginn Raum PHY 1.0.01 Windows-CIP-Pool Physik Unix-CIP-Pool Physik CIP-Pool PHYS2 9.2.08 CIP-Pool VKL Mo., 10.2. - Fr., 14.2. PC-Messtechnik (52820, Ch. Gradl) sowie Elektronik Grundkurs Termin 1 (52817, H.Wild) Matlab (52804, F.Wünsch) Computational Nanoscience (Th.Niehaus) (oder in zweiter Woche Tausch mit D.Pleiter) (Th.Niehaus alternativ hier) Wirtschaftsphysik (I.Morgenstern) Mo., 17.2. - Fr., 21.2. AutoDESK Inventor (52825, H.Deinhart) Computer Architectures (D.Pleiter)   Mo, 24.2. - Fr., 28.2. Computer- und Microcontroller-Technik (52862, N.Kilbertus) sowie Elektronik Grundkurs Termin 2 (52817, F.Wünsch)   php und mySQL (52864, B. Mendl)     Mo, 3.3. (Rosenmontag) - Fr., 7.3.       Mo, 10.3 - Fr., 14.3. Elektronik für Fortgeschrittene (52818, C. Ermer) Programmieren in C und C++ (52801, Bastian Brandt) C# (52830, F.Rappl) Mo, 17.3. - Fr, 21.3. Mo, 24.3. - Fr, 28.3. Elektronik Grundkurs Termin 3 (52817, M.Gmelch) LaTeX (52802, M.Peischl) C++ und Qt (52823, R.Gottschalk) Mo, 31.3. - Fr, 4.4. Maple (52805, J.Berwanger) Linux (52803, F. Wünsch) Maple (52805, J.Berwanger) Hinweis: Der Kurs Programmieren in C und C++ wird zusätzlich auch als Semesterkurs angeboten (von S.Solbrig)! Näheres siehe Vorlesungsverzeichnis. Anmeldung für alle Kurse erfolgt ab 27.1.2014 über HIS-LSF! Bitte melden Sie sich nur dann an, wenn Sie wirklich vorhaben, an dem jeweiligen Kurs teilzunehmen. Wir werden Sie regelmäßig per Mail an vorliegende Anmeldungen erinnern ... Verfahren für die Anmeldung zu IT-Blockkursen in der vorlesungsfreien Zeit Anmeldebeginn = Veröffentlichungsbeginn des VV SS14, also Mo., der 27.1.2014 Anmeldeende dieser ersten Phase = So., den 2.2.2014, 23h59 In dieser ersten Anmeldephase werden noch keine Plätze verteilt! Dies geschieht erst am Mo., den 3.2.2014. Gibt es mehr Interessenten als Plätze, entscheidet das Los. Der Zeitpunkt der Anmeldung spielt dabei keine Rolle. Bevorzugt werden Studierende aus der Fakultät Physik, falls eine entsprechende Prüfungsordnung die Teilnahme an einer bestimmten Veranstaltung vorschreibt. Anschließend folgt eine zweite Anmeldephase bis zum Kursbeginn. Falls Plätze frei sind, erfolgt jetzt sofort die Zuteilung. Falls nicht, kann man sich auf einer Warteliste registrieren und rückt nach, sobald wieder Plätze frei sind. DAHER BITTE GLEICH ABMELDEN, wenn man an einer Veranstaltung doch nicht teilnehmen kann! Hinweis: Interessenten, die in der ersten Phase keinen Platz bekommen haben, landen NICHT automatisch auf der Warteliste der zweiten Phase, sondern müssen sich nochmals neu anmelden. Bedienstete u.ä. können sich nicht online im HIS-LSF anmelden, nur Studierende. Wenn hier jemand an einer Veranstaltung teilnehmen möchte, bitte einfach eine Mail an den/die Kursleiter(in) schicken. Wenn Sie doch nicht teilnehmen können, melden Sie sich bitte bis spätestens eine Woche vor Kursbeginn wieder ab. Alle Blockkurse sind ganztägig. Beginn um 9h ct, Treffpunkt beim CIP-Pool Physik (PHY 1.0.03), falls nicht anders angegeben. Die Kurse sind für Sie am Nachmittag dann zu Ende, wenn Sie alle Übungsaufgaben erledigt haben - um wieviel Uhr das genau ist, hängt ganz wesentlich von Ihren Vorkenntnissen ab. Auskünfte zum Kursangebot: Dr.F.Wünsch allgemeine Kursinformationen, Erläuterung der Klassifikationen Die Zahl in den Klammern in HIS LSF, also z.B. M 31.1(5), gibt die Zahl der Leistungspunkte wieder, die bei erfolgreichem Absolvieren der jeweiligen Veranstaltung von uns vergeben werden. Über die Vergabekriterien entscheidet der Dozent (z.B. Klausur, regelmäßige Mitarbeit bei den Übungen, erfolgreiches Abschlussprojekt etc.). Wieviel Punkte davon in Ihrer Fakultät anerkannt werden (falls Sie von ausserhalb der Physik kommen), wissen wir leider nicht. Bitte bei Ihrem Prüfungsamt erfragen! Zum Nachschauen: Übersicht über die Veranstaltungen SS 2013, WS 2013/14   Impressum Letzte Änderung: 07.01.2014 von Webmaster</field>
<field name="important">Physik ? Studium ? IT-Ausbildung ?Terminübersicht Physik ? Studium ? IT-Ausbildung ?Terminübersicht Studienbegleitende IT-Ausbildung SS14 Angebote der Physik-Fakultät in den Semesterferien vor Vorlesungsbeginn Raum PHY 1.0.01 Windows-CIP-Pool Physik Unix-CIP-Pool Physik CIP-Pool PHYS2 9.2.08 CIP-Pool VKL Mo., 10.2. - Fr., 14.2. PC-Messtechnik (52820, Ch. Gradl) sowie Elektronik Grundkurs Termin 1 (52817, H.Wild) Matlab (52804, F.Wünsch) Computational Nanoscience (Th.Niehaus) (oder in zweiter Woche Tausch mit D.Pleiter) (Th.Niehaus alternativ hier) Wirtschaftsphysik (I.Morgenstern) Mo., 17.2. - Fr., 21.2. AutoDESK Inventor (52825, H.Deinhart) Computer Architectures (D.Pleiter)   Mo, 24.2. - Fr., 28.2. Computer- und Microcontroller-Technik (52862, N.Kilbertus) sowie Elektronik Grundkurs Termin 2 (52817, F.Wünsch)   php und mySQL (52864, B. Mendl)     Mo, 3.3. (Rosenmontag) - Fr., 7.3.       Mo, 10.3 - Fr., 14.3. Elektronik für Fortgeschrittene (52818, C. Ermer) Programmieren in C und C++ (52801, Bastian Brandt) C# (52830, F.Rappl) Mo, 17.3. - Fr, 21.3. Mo, 24.3. - Fr, 28.3. Elektronik Grundkurs Termin 3 (52817, M.Gmelch) LaTeX (52802, M.Peischl) C++ und Qt (52823, R.Gottschalk) Mo, 31.3. - Fr, 4.4. Maple (52805, J.Berwanger) Linux (52803, F. Wünsch) Maple (52805, J.Berwanger) Hinweis: Der Kurs Programmieren in C und C++ wird zusätzlich auch als Semesterkurs angeboten (von S.Solbrig)! Näheres siehe Vorlesungsverzeichnis. Anmeldung für alle Kurse erfolgt ab 27.1.2014 über HIS-LSF! Bitte melden Sie sich nur dann an, wenn Sie wirklich vorhaben, an dem jeweiligen Kurs teilzunehmen. Wir werden Sie regelmäßig per Mail an vorliegende Anmeldungen erinnern ... Verfahren für die Anmeldung zu IT-Blockkursen in der vorlesungsfreien Zeit Anmeldebeginn = Veröffentlichungsbeginn des VV SS14, also Mo., der 27.1.2014 Anmeldeende dieser ersten Phase = So., den 2.2.2014, 23h59 In dieser ersten Anmeldephase werden noch keine Plätze verteilt! Dies geschieht erst am Mo., den 3.2.2014. Gibt es mehr Interessenten als Plätze, entscheidet das Los. Der Zeitpunkt der Anmeldung spielt dabei keine Rolle. Bevorzugt werden Studierende aus der Fakultät Physik, falls eine entsprechende Prüfungsordnung die Teilnahme an einer bestimmten Veranstaltung vorschreibt. Anschließend folgt eine zweite Anmeldephase bis zum Kursbeginn. Falls Plätze frei sind, erfolgt jetzt sofort die Zuteilung. Falls nicht, kann man sich auf einer Warteliste registrieren und rückt nach, sobald wieder Plätze frei sind. DAHER BITTE GLEICH ABMELDEN, wenn man an einer Veranstaltung doch nicht teilnehmen kann! Hinweis: Interessenten, die in der ersten Phase keinen Platz bekommen haben, landen NICHT automatisch auf der Warteliste der zweiten Phase, sondern müssen sich nochmals neu anmelden. Bedienstete u.ä. können sich nicht online im HIS-LSF anmelden, nur Studierende. Wenn hier jemand an einer Veranstaltung teilnehmen möchte, bitte einfach eine Mail an den/die Kursleiter(in) schicken. Wenn Sie doch nicht teilnehmen können, melden Sie sich bitte bis spätestens eine Woche vor Kursbeginn wieder ab. Alle Blockkurse sind ganztägig. Beginn um 9h ct, Treffpunkt beim CIP-Pool Physik (PHY 1.0.03), falls nicht anders angegeben. Die Kurse sind für Sie am Nachmittag dann zu Ende, wenn Sie alle Übungsaufgaben erledigt haben - um wieviel Uhr das genau ist, hängt ganz wesentlich von Ihren Vorkenntnissen ab. Auskünfte zum Kursangebot: Dr.F.Wünsch allgemeine Kursinformationen, Erläuterung der Klassifikationen Die Zahl in den Klammern in HIS LSF, also z.B. M 31.1(5), gibt die Zahl der Leistungspunkte wieder, die bei erfolgreichem Absolvieren der jeweiligen Veranstaltung von uns vergeben werden. Über die Vergabekriterien entscheidet der Dozent (z.B. Klausur, regelmäßige Mitarbeit bei den Übungen, erfolgreiches Abschlussprojekt etc.). Wieviel Punkte davon in Ihrer Fakultät anerkannt werden (falls Sie von ausserhalb der Physik kommen), wissen wir leider nicht. Bitte bei Ihrem Prüfungsamt erfragen! Zum Nachschauen: Übersicht über die Veranstaltungen SS 2013, WS 2013/14   Impressum Letzte Änderung: 07.01.2014 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/edverg/termine_ws1314.phtml</field>
<field name="title">Physik ? Studium ? IT-Ausbildung ?
Terminübersicht</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/edverg/termine_ws1314.phtml</field>
<field name="content">Physik ? Studium ? IT-Ausbildung ?Terminübersicht Physik ? Studium ? IT-Ausbildung ?Terminübersicht Studienbegleitende IT-Ausbildung WS 13/14 Physik-Angebote in den Semesterferien Sommer / Herbst 2013 Raum PHY 1.0.01 Windows-CIP-Pool Physik Unix-CIP-Pool Physik CIP-Pool PHYS2 9.2.08 Mo., 22.7. - Fr., 26.7. Elektronik (Kurs Nr.1) (Fritz Wünsch) Computational Physics etc. (Morgenstern) Computer Architectures (D.Pleiter)   Mo., 29.7. - Fr., 2.8. Maple (Martin Decker)   Mo., 5.8. - Fr., 9.8.         Mo., 12.8. - Fr., 16.8.         Mo, 19.8. - Fr., 23.8.         Mo, 26.8. - Fr., 30.8.         Mo, 2.9. - Fr., 6.9. Elektronik (Kurs Nr.2) (Max Gmelch) Matlab (Fritz Wünsch) PHP und mySQL PHP und mySQL (Christian Härtinger) Mo, 9.9. - Fr., 13.9. LaTeX (Marei Peischl) Mo, 16.9. - Fr., 20.9. PC-Messtechnik (Christian Gradl) Programmieren in C und C++ (Stefan Solbrig) C++ und Qt (Richard Gottschalk) Mo., 23.9. - Fr., 27.9. Mo., 30.9. - Fr., 4.10. (Do. Feiertag!) Computer- und Microcontroller-Technik (Niki Kilbertus) sowie Elektronik (Kurs Nr.3) (Hannes Wild) HTML5, CSS3, JavaScript (Florian Rappl) Linux (F.Wünsch)   Mo, 7.10. - Fr, 11.10. AutoDesk Inventor (Hans Deinhart)   Während der Vorlesungszeit findet außerdem zum ersten Mal der Kurs Software Design Patterns statt. Anmeldung für alle Kurse erfolgt ab 8. Juli 2013 über HIS-LSF! Bitte melden Sie sich nur dann an, wenn Sie wirklich vorhaben, an dem jeweiligen Kurs teilzunehmen. Wir werden Sie regelmäßig per Mail an vorliegende Anmeldungen erinnern ... !!! Seit Frühjahr 2013 neues Standard-Verfahren für die Anmeldung zu IT-Blockkursen in der vorlesungsfreien Zeit !!! Anmeldebeginn = Veröffentlichungsbeginn des VV WS13/14 = 8.7.2013 Anmeldeende dieser ersten Phase = letzter Montag der Vorlesungszeit SS13, also 15.7.2013, 23h59 In dieser ersten Anmeldephase werden noch keine Plätze verteilt! Dies geschieht erst am Dienstag danach. Gibt es mehr Interessenten als Plätze, entscheidet das Los. Der Zeitpunkt der Anmeldung spielt dabei keine Rolle. Bevorzugt werden Studierende aus der Fakultät Physik, falls eine entsprechende Prüfungsordnung die Teilnahme an einer bestimmten Veranstaltung vorschreibt. Anschließend folgt eine zweite Anmeldephase bis zum Kursbeginn. Falls Plätze frei sind, erfolgt jetzt sofort die Zuteilung. Falls nicht, kann man sich auf einer Warteliste registrieren und rückt nach, sobald wieder Plätze frei sind. DAHER BITTE GLEICH ABMELDEN, wenn man an einer Veranstaltung doch nicht teilnehmen kann! Hinweis: Interessenten, die in der ersten Phase keinen Platz bekommen haben, landen NICHT automatisch auf der Warteliste der zweiten Phase, sondern müssen sich nochmals neu anmelden. Bedienstete u.ä. können sich nicht online im HIS-LSF anmelden, nur Studierende. Wenn hier jemand an einer Veranstaltung teilnehmen möchte, bitte einfach eine Mail an den/die Kursleiter(in) schicken. Wenn Sie doch nicht teilnehmen können, melden Sie sich bitte bis spätestens eine Woche vor Kursbeginn wieder ab. Alle Blockkurse sind ganztägig. Beginn um 9h ct, Treffpunkt beim CIP-Pool Physik (PHY 1.0.03), falls nicht anders angegeben. Die Kurse sind für Sie am Nachmittag dann zu Ende, wenn Sie alle Übungsaufgaben erledigt haben - um wieviel Uhr das genau ist, hängt ganz wesentlich von Ihren Vorkenntnissen ab. Auskünfte zum Kursangebot: Dr.F.Wünsch allgemeine Kursinformationen, Erläuterung der Klassifikationen Die Zahl in den Klammern in HIS LSF, also z.B. M 31.1(5), gibt die Zahl der Leistungspunkte wieder, die bei erfolgreichem Absolvieren der jeweiligen Veranstaltung von uns vergeben werden. Über die Vergabekriterien entscheidet der Dozent (z.B. Klausur, regelmäßige Mitarbeit bei den Übungen, erfolgreiches Abschlussprojekt etc.). Wieviel Punkte davon in Ihrer Fakultät anerkannt werden (falls Sie von ausserhalb der Physik kommen), wissen wir leider nicht. Bitte bei Ihrem Prüfungsamt erfragen! Zum Nachschauen: Übersicht über die Veranstaltungen SS 2013, WS 2012/13   Impressum Letzte Änderung: 18.10.2013 von Webmaster</field>
<field name="important">Physik ? Studium ? IT-Ausbildung ?Terminübersicht Physik ? Studium ? IT-Ausbildung ?Terminübersicht Studienbegleitende IT-Ausbildung WS 13/14 Physik-Angebote in den Semesterferien Sommer / Herbst 2013 Raum PHY 1.0.01 Windows-CIP-Pool Physik Unix-CIP-Pool Physik CIP-Pool PHYS2 9.2.08 Mo., 22.7. - Fr., 26.7. Elektronik (Kurs Nr.1) (Fritz Wünsch) Computational Physics etc. (Morgenstern) Computer Architectures (D.Pleiter)   Mo., 29.7. - Fr., 2.8. Maple (Martin Decker)   Mo., 5.8. - Fr., 9.8.         Mo., 12.8. - Fr., 16.8.         Mo, 19.8. - Fr., 23.8.         Mo, 26.8. - Fr., 30.8.         Mo, 2.9. - Fr., 6.9. Elektronik (Kurs Nr.2) (Max Gmelch) Matlab (Fritz Wünsch) PHP und mySQL PHP und mySQL (Christian Härtinger) Mo, 9.9. - Fr., 13.9. LaTeX (Marei Peischl) Mo, 16.9. - Fr., 20.9. PC-Messtechnik (Christian Gradl) Programmieren in C und C++ (Stefan Solbrig) C++ und Qt (Richard Gottschalk) Mo., 23.9. - Fr., 27.9. Mo., 30.9. - Fr., 4.10. (Do. Feiertag!) Computer- und Microcontroller-Technik (Niki Kilbertus) sowie Elektronik (Kurs Nr.3) (Hannes Wild) HTML5, CSS3, JavaScript (Florian Rappl) Linux (F.Wünsch)   Mo, 7.10. - Fr, 11.10. AutoDesk Inventor (Hans Deinhart)   Während der Vorlesungszeit findet außerdem zum ersten Mal der Kurs Software Design Patterns statt. Anmeldung für alle Kurse erfolgt ab 8. Juli 2013 über HIS-LSF! Bitte melden Sie sich nur dann an, wenn Sie wirklich vorhaben, an dem jeweiligen Kurs teilzunehmen. Wir werden Sie regelmäßig per Mail an vorliegende Anmeldungen erinnern ... !!! Seit Frühjahr 2013 neues Standard-Verfahren für die Anmeldung zu IT-Blockkursen in der vorlesungsfreien Zeit !!! Anmeldebeginn = Veröffentlichungsbeginn des VV WS13/14 = 8.7.2013 Anmeldeende dieser ersten Phase = letzter Montag der Vorlesungszeit SS13, also 15.7.2013, 23h59 In dieser ersten Anmeldephase werden noch keine Plätze verteilt! Dies geschieht erst am Dienstag danach. Gibt es mehr Interessenten als Plätze, entscheidet das Los. Der Zeitpunkt der Anmeldung spielt dabei keine Rolle. Bevorzugt werden Studierende aus der Fakultät Physik, falls eine entsprechende Prüfungsordnung die Teilnahme an einer bestimmten Veranstaltung vorschreibt. Anschließend folgt eine zweite Anmeldephase bis zum Kursbeginn. Falls Plätze frei sind, erfolgt jetzt sofort die Zuteilung. Falls nicht, kann man sich auf einer Warteliste registrieren und rückt nach, sobald wieder Plätze frei sind. DAHER BITTE GLEICH ABMELDEN, wenn man an einer Veranstaltung doch nicht teilnehmen kann! Hinweis: Interessenten, die in der ersten Phase keinen Platz bekommen haben, landen NICHT automatisch auf der Warteliste der zweiten Phase, sondern müssen sich nochmals neu anmelden. Bedienstete u.ä. können sich nicht online im HIS-LSF anmelden, nur Studierende. Wenn hier jemand an einer Veranstaltung teilnehmen möchte, bitte einfach eine Mail an den/die Kursleiter(in) schicken. Wenn Sie doch nicht teilnehmen können, melden Sie sich bitte bis spätestens eine Woche vor Kursbeginn wieder ab. Alle Blockkurse sind ganztägig. Beginn um 9h ct, Treffpunkt beim CIP-Pool Physik (PHY 1.0.03), falls nicht anders angegeben. Die Kurse sind für Sie am Nachmittag dann zu Ende, wenn Sie alle Übungsaufgaben erledigt haben - um wieviel Uhr das genau ist, hängt ganz wesentlich von Ihren Vorkenntnissen ab. Auskünfte zum Kursangebot: Dr.F.Wünsch allgemeine Kursinformationen, Erläuterung der Klassifikationen Die Zahl in den Klammern in HIS LSF, also z.B. M 31.1(5), gibt die Zahl der Leistungspunkte wieder, die bei erfolgreichem Absolvieren der jeweiligen Veranstaltung von uns vergeben werden. Über die Vergabekriterien entscheidet der Dozent (z.B. Klausur, regelmäßige Mitarbeit bei den Übungen, erfolgreiches Abschlussprojekt etc.). Wieviel Punkte davon in Ihrer Fakultät anerkannt werden (falls Sie von ausserhalb der Physik kommen), wissen wir leider nicht. Bitte bei Ihrem Prüfungsamt erfragen! Zum Nachschauen: Übersicht über die Veranstaltungen SS 2013, WS 2012/13   Impressum Letzte Änderung: 18.10.2013 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/edverg/webappkurs/</field>
<field name="title">Physik ? Studium ? IT-Ausbildung ? WebApplications</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/edverg/webappkurs/</field>
<field name="content">Physik ? Studium ? IT-Ausbildung ? WebApplications Physik ? Studium ? IT-Ausbildung ? WebApplications Programmierung und Design von WebApplications mit HTML5, CSS3 und JavaScript ? hier geht's zur eigentlichen Kurshomepage Web-Anwendungen der nächsten Generation sind deutlich flexibler und einfacher zu erstellen als ihre Vorgänger. Ein Vorteil der Entwicklung von Webseiten mit HTML5, CSS3 und JavaScript liegt in der Cross-Plattform Fähigkeit von Web-Anwendungen. So verfügen nicht nur die meisten Smartphone über einen HTML5 fähigen Browser, eine einmal geschriebene Web-Anwendung läuft auch auf ganz unterschiedlichen Betriebssystemen und kann von jedem Ort der Welt aus aufgerufen werden. Diese Technologien stehen im Mittelpunkt des Kurses In diesem Kurs soll die Front-End Entwicklung von reichhaltigen Web-Anwendungen mit HTML5 (Beschreibung des Inhalts), CSS3 (Beschreibung des Designs) und JavaScript (Beschreibung der Interaktion) im Detail erklärt werden. Ein Fokus der Vorlesung wird darin liegen, die neuen Fähigkeiten von HTML5 auszureizen und dabei immer noch zu älteren Standards kompatibel zu bleiben. Benötigte Vorkenntnisse HTML Vorkenntnisse Leichte Programmierkenntnisse (Skriptsprachen reichen aus, auch z.B. Programmieren in Maple, Matlab, etc. reicht aus) Umgang mit einem WebBrowser Umgang mit einem Texteditor und einem Betriebssystem seiner Wahl Hilfreich, aber nicht unbedingt notwendig, sind Grundkenntnisse von CSS und JavaScript. Beides wird jedoch ausreichend erläutert, so dass man hier auch ohne großartige Vorkenntnisse einsteigen kann. Grobe Inhaltsliste Ziele von HTML5 und historisches Aufbau von HTML5 Neue Bausteine von HTML5 Bessere Formulare dank HTML5 Multimedia auf Webseiten Grafik mit Canvas und SVG und JavaScript Dateizugriff mit JavaScript Offline-Speicher Neue Datentechnologien mit Websockets und Webworkern Bessere JavaScripts mit jQuery Animationen und Dialoge mit jQuery und jQueryUI Neue CSS3 Elemente Neue CSS3 Pseudo-Klassen Die CSS3 Transitions im Fokus Bessere Unterstützung für mobile Endgeräte Ausblick auf WebGL Am Ende des Kurses wird jeder Teilnehmer in der Lage sein bestehende Webseiten zu reichhaltigen Web-Anwendungen zu erweitern, oder komplett neue Web-Anwendungen inkl. asynchronen Aufrufen, Benutzerdialogen und Animationen zu erstellen. Im Kurs wird nicht die Frage beantwortet, woher die dahinterliegenden Daten kommen. Es wird immer mit statischen Webseiten gearbeitet, welche dann auf Client-Seite Interaktionen zulassen. Serverseitig dynamische Webseiten mit ASP.NET, PHP, Python und dergleichen werden nicht besprochen. Scheinkriterien Regelmäßige Bearbeitung der Übungsaufgaben Durchführung eines kleinen Abschlussprojektes Die Übung findet direkt nach der Vorlesung statt und ist im Rahmen der vorgegebenen Zeit durchführbar. Bei den Übungen kommt es nicht darauf an, die beste Lösung zu finden, sondern sich über die Problemstellung Gedanken zu machen und Erfahrungen im Entwickeln von Web-Anwendungen zu sammeln. Als Abschlussprojekt kann man kleine Spiele programmieren, ein jQuery Plugin oder sonstige Nutzerinteraktionen auf einer vorhandenen Seite einfügen. Der Kreativität sind hier keine Grenzen gesetzt. Der Arbeitsaufwand sollte jedoch innerhalb eines vernünftigen Bereiches liegen. Kursmaterialien Der Kurs findet im Windows CIP-Pool oder Linux CIP-Pool gegenüber H36 statt Der Raum der Vorlesung wird vor Beginn dieser bekannt gegeben Ein Skript zum Kurs wird während des Kurses gestaltet Die Übungsaufgaben können auch auf jeden (privaten) Laptop, welcher über einen aktuellen Browser (IE 9+, Chrome 13+, Opera 11+, Firefox 4+, Safari 5+, ...) und einen Texteditor verfügt, durchgeführt werden. Hilfreiche Links Wikipedia Artikel zu HTML5 HTML5 Demonstrationen und Beispiele Dive Into HTML5 - Buch (Onlineausgabe) Resourcen zu HTML5 Übersicht vom W3C Konsortium zu HTML5 Viele Resourcen zu CSS3 Generator von CSS3 Eigenschaften Wikipedia Artikel zu CSS(3) Übersicht vom W3C Konsortium zu CSS3 Wikipedia Artikel zu JavaScript Seite des jQuery Projektes Seite des jQuery Plugins jQueryUI   Impressum Letzte Änderung: 18.06.2012 von Webmaster</field>
<field name="important">Physik ? Studium ? IT-Ausbildung ? WebApplications Physik ? Studium ? IT-Ausbildung ? WebApplications Programmierung und Design von WebApplications mit HTML5, CSS3 und JavaScript ? hier geht's zur eigentlichen Kurshomepage Web-Anwendungen der nächsten Generation sind deutlich flexibler und einfacher zu erstellen als ihre Vorgänger. Ein Vorteil der Entwicklung von Webseiten mit HTML5, CSS3 und JavaScript liegt in der Cross-Plattform Fähigkeit von Web-Anwendungen. So verfügen nicht nur die meisten Smartphone über einen HTML5 fähigen Browser, eine einmal geschriebene Web-Anwendung läuft auch auf ganz unterschiedlichen Betriebssystemen und kann von jedem Ort der Welt aus aufgerufen werden. Diese Technologien stehen im Mittelpunkt des Kurses In diesem Kurs soll die Front-End Entwicklung von reichhaltigen Web-Anwendungen mit HTML5 (Beschreibung des Inhalts), CSS3 (Beschreibung des Designs) und JavaScript (Beschreibung der Interaktion) im Detail erklärt werden. Ein Fokus der Vorlesung wird darin liegen, die neuen Fähigkeiten von HTML5 auszureizen und dabei immer noch zu älteren Standards kompatibel zu bleiben. Benötigte Vorkenntnisse HTML Vorkenntnisse Leichte Programmierkenntnisse (Skriptsprachen reichen aus, auch z.B. Programmieren in Maple, Matlab, etc. reicht aus) Umgang mit einem WebBrowser Umgang mit einem Texteditor und einem Betriebssystem seiner Wahl Hilfreich, aber nicht unbedingt notwendig, sind Grundkenntnisse von CSS und JavaScript. Beides wird jedoch ausreichend erläutert, so dass man hier auch ohne großartige Vorkenntnisse einsteigen kann. Grobe Inhaltsliste Ziele von HTML5 und historisches Aufbau von HTML5 Neue Bausteine von HTML5 Bessere Formulare dank HTML5 Multimedia auf Webseiten Grafik mit Canvas und SVG und JavaScript Dateizugriff mit JavaScript Offline-Speicher Neue Datentechnologien mit Websockets und Webworkern Bessere JavaScripts mit jQuery Animationen und Dialoge mit jQuery und jQueryUI Neue CSS3 Elemente Neue CSS3 Pseudo-Klassen Die CSS3 Transitions im Fokus Bessere Unterstützung für mobile Endgeräte Ausblick auf WebGL Am Ende des Kurses wird jeder Teilnehmer in der Lage sein bestehende Webseiten zu reichhaltigen Web-Anwendungen zu erweitern, oder komplett neue Web-Anwendungen inkl. asynchronen Aufrufen, Benutzerdialogen und Animationen zu erstellen. Im Kurs wird nicht die Frage beantwortet, woher die dahinterliegenden Daten kommen. Es wird immer mit statischen Webseiten gearbeitet, welche dann auf Client-Seite Interaktionen zulassen. Serverseitig dynamische Webseiten mit ASP.NET, PHP, Python und dergleichen werden nicht besprochen. Scheinkriterien Regelmäßige Bearbeitung der Übungsaufgaben Durchführung eines kleinen Abschlussprojektes Die Übung findet direkt nach der Vorlesung statt und ist im Rahmen der vorgegebenen Zeit durchführbar. Bei den Übungen kommt es nicht darauf an, die beste Lösung zu finden, sondern sich über die Problemstellung Gedanken zu machen und Erfahrungen im Entwickeln von Web-Anwendungen zu sammeln. Als Abschlussprojekt kann man kleine Spiele programmieren, ein jQuery Plugin oder sonstige Nutzerinteraktionen auf einer vorhandenen Seite einfügen. Der Kreativität sind hier keine Grenzen gesetzt. Der Arbeitsaufwand sollte jedoch innerhalb eines vernünftigen Bereiches liegen. Kursmaterialien Der Kurs findet im Windows CIP-Pool oder Linux CIP-Pool gegenüber H36 statt Der Raum der Vorlesung wird vor Beginn dieser bekannt gegeben Ein Skript zum Kurs wird während des Kurses gestaltet Die Übungsaufgaben können auch auf jeden (privaten) Laptop, welcher über einen aktuellen Browser (IE 9+, Chrome 13+, Opera 11+, Firefox 4+, Safari 5+, ...) und einen Texteditor verfügt, durchgeführt werden. Hilfreiche Links Wikipedia Artikel zu HTML5 HTML5 Demonstrationen und Beispiele Dive Into HTML5 - Buch (Onlineausgabe) Resourcen zu HTML5 Übersicht vom W3C Konsortium zu HTML5 Viele Resourcen zu CSS3 Generator von CSS3 Eigenschaften Wikipedia Artikel zu CSS(3) Übersicht vom W3C Konsortium zu CSS3 Wikipedia Artikel zu JavaScript Seite des jQuery Projektes Seite des jQuery Plugins jQueryUI   Impressum Letzte Änderung: 18.06.2012 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/forms.phtml</field>
<field name="title">Physik ? Studium  ? Formalitäten und Formulare</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/forms.phtml</field>
<field name="content">Physik ? Studium  ? Formalitäten und Formulare Physik ? Studium  ? Formalitäten und Formulare Weitere Formalitäten und Formulare Anmeldung der Bachelor-Arbeit in Physik (? pdf-Formular); Formular Antrag auf Ausstellung der Bachelor-Urkunde Anmeldung der Master-Arbeit in Physik (? pdf-Formular); Formular Antrag auf Ausstellung der Master-Urkunde   Impressum Letzte Änderung: 20.03.2013 von Webmaster</field>
<field name="important">Physik ? Studium  ? Formalitäten und Formulare Physik ? Studium  ? Formalitäten und Formulare Weitere Formalitäten und Formulare Anmeldung der Bachelor-Arbeit in Physik (? pdf-Formular); Formular Antrag auf Ausstellung der Bachelor-Urkunde Anmeldung der Master-Arbeit in Physik (? pdf-Formular); Formular Antrag auf Ausstellung der Master-Urkunde   Impressum Letzte Änderung: 20.03.2013 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/gradpphpc/index.phtml</field>
<field name="title">Physik ? Studium ? Graduiertenschule PP-HPC</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/gradpphpc/index.phtml</field>
<field name="content">Physik ? Studium ? Graduiertenschule PP-HPC Physik ? Studium ? Graduiertenschule PP-HPC Die Graduiertenschule PP-HPC Im folgenden finden Sie Informationen zur Graduiertenschule für Teilchenphysik und Hochleistungsrechnen (Particle Physics and High Performance Computing, PP-HPC). Aktuelle Ordnungen Die aktuelle Ordnung der Graduiertenschule PP-HPC als PDF. Weitere Ordnungen finden Sie unter http://www.uni-regensburg.de/studium/pruefungsordnungen/sonstige/index.html. Erläuterungen zum Aufbau Im folgenden finden Sie Erläuterungen zur Graduiertenschule PP-HPC, insbesondere zum Aufbau und zum Studienplan. Ansprechpartner Prof. Andreas Schäfer Fakultät Physik Raum PHY 4.1.07 Telefon: (0941) 943-2007 andreas.schaefer@physik.uni-regensburg.de   Impressum Letzte Änderung: 25.02.2013 von Webmaster</field>
<field name="important">Physik ? Studium ? Graduiertenschule PP-HPC Physik ? Studium ? Graduiertenschule PP-HPC Die Graduiertenschule PP-HPC Im folgenden finden Sie Informationen zur Graduiertenschule für Teilchenphysik und Hochleistungsrechnen (Particle Physics and High Performance Computing, PP-HPC). Aktuelle Ordnungen Die aktuelle Ordnung der Graduiertenschule PP-HPC als PDF. Weitere Ordnungen finden Sie unter http://www.uni-regensburg.de/studium/pruefungsordnungen/sonstige/index.html. Erläuterungen zum Aufbau Im folgenden finden Sie Erläuterungen zur Graduiertenschule PP-HPC, insbesondere zum Aufbau und zum Studienplan. Ansprechpartner Prof. Andreas Schäfer Fakultät Physik Raum PHY 4.1.07 Telefon: (0941) 943-2007 andreas.schaefer@physik.uni-regensburg.de   Impressum Letzte Änderung: 25.02.2013 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/inhalte/Physik-I-Mechanik.html</field>
<field name="title">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik I (Mechanik)</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/inhalte/Physik-I-Mechanik.html</field>
<field name="content">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik I (Mechanik)  Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik I (Mechanik)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Physik I - Mechanik (4 st.) Stand Juli 2003; ? zur?ck zur ?bersicht I) Einf?hrung II) Grundbegriffe der Bewegung (ben?tigte Mathematik: Ableitungen, Differentiationsregeln, Integrale, Vektoren und Skalare, Einheitsvektoren, Skalar- und Kreuzprodukt) Ort und Bahn eines Massenpunktes Geschwindigkeit Beschleunigung Gleichf?rmig beschleunigte geradlinige Bewegung Kreisbewegung Die allgemeine krummlinige Bewegung* III) Die Newton'sche Gesetze Kr?fte Erstes Newton'sche Axiom (Tr?gheitsprinzig) Kraft, Masse und das zweite Newton'sche Axiom Das 3. Newton'sche Gesetz Reibung Das Gravitationsgesetz Die Gravitationskonstante ? Cavendish-Experiment* Das Fallgesetz ?quivalenzprinzip Die Kepler'schen Gesetze IV) Die Erhaltung von Energie und Impuls Die Erhaltung der Summe von kinetischer und potentieller Energie Konservative Kraft Zwei Beispiele* Fadenpendel Feder Potentielle Energie im Schwerefeld Gravitationsfeld einer Kugelschale und einer Vollkugel, ?quipotentialfl?chen* (Math: Gradient) Impulserhaltung und Sto?prozesse (Math: Summenzeichen) Sto?prozesse Gesamtimpuls eines Systems mit ?u?eren Kr?ften Massemittelpunkt Bewegung des Massenmittelpunktes Der Massenmittelpunkt als Bezugssystem V) Die rotierende Bewegung Drehimpulserhaltung f?r einen Massenpunkt Drehmoment und Drehimpuls Die Erhaltung des Drehimpulses beim Wirken einer Zentralkraft Drehimpulserhaltung in einem System von Massenpunkten Bewegung des Massenschwerpunktes Drehimpulserhaltung in einem System von Massenpunkten Der Drehimpuls starrer K?rper Drehimpuls einer rotierenden Platte* Drehimpuls eines rotationssymmetrischen K?rpers* Berechnung des Tr?gheitsmoments (Math: Volumenintegrale) Steiner'scher Satz Drehimpuls eines beliebig geformten K?rpers* (Math: Tensoren, Dyade) Die Energie eines starren Rotators Der symmetrische Kreisel Kr?ftefreier Kreisel Der Kreisel unter dem Einfluss eines Drehmoments Die kleinste Einheit des Drehimpulses in den Natur* Scheinkr?fte in rotierenden Bezugssystemen VI) Schwingungen (Math: lineare Dgl. 2. Ordnung, Euler'sche Formel. Komplexe L?sung von Dgl.) Freie unged?mpfte Schwingungen Freie ged?mpfte Schwingungen Erzwungene Schwingungen Gekoppelte Oszillatoren Parametrisch verst?rkte Schwingungen* VII) Nichtlineare Dynamik und Chaos (Math: Taylor-Entwicklung, nichtlineare Dgln., numerische L?sung nichtlinearer Dgln. mit Maple) Nichtlineare Oszillatoren Potentielle Energie: Harmonische und nichtlineare Oszillatoren Potentielle Energie des Fadenpendels* Der Magnetoszillator* Potentielle Energie eines Duffing - Oszillators* Resonanzkurve nichtlinearer Oszillatoren Der Phasenraum Chaotische Dynamik Logistische Abbildung und Feigenbaum - Diagramm VIII) Mechanische Wellen (Math: partielle Dgln., Wellengleichung) Beispiel Seilwellen Ausbreitung einer St?rung Die Wellengleichung Reflexion von Seilwellen Sinusf?rmige harmonische Wellen Reflexion harmonischer Wellen: Stehende Wellen und Schwingungen Eigenfrequenzen einer schwingenden Saite Schallwellen Longitudinale Schallwellen in Gasen und Fl?ssigkeiten Stehende Schallwellen Kugelwellen Der akustische Dopplereffekt Fourieranalyse, Dispersion und Wellenpakete (Math: Fourierentwicklung) Fourieranalyse Phasen- und Gruppengeschwindigkeit Dispersion und Wellenpakete IX) Die feste Materie X) Fl?ssigkeiten Hydrostatische Kr?fte Auftriebskraft* Oberfl?chenspannung Benetzung fester Oberfl?chen Kr?fte in str?menden Fl?ssigkeiten Tr?gheitskr?fte in station?ren Str?mungen Viskosit?t und Reibungskr?fte Str?mung bei gro?en Geschwindigkeiten Vom Fliegen Die mit * versehenen Inhalte sind optional bzw. k?nnen durch andere Beispiele ersetzt werden</field>
<field name="important">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik I (Mechanik)  Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik I (Mechanik)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Physik I - Mechanik (4 st.) Stand Juli 2003; ? zur?ck zur ?bersicht I) Einf?hrung II) Grundbegriffe der Bewegung (ben?tigte Mathematik: Ableitungen, Differentiationsregeln, Integrale, Vektoren und Skalare, Einheitsvektoren, Skalar- und Kreuzprodukt) Ort und Bahn eines Massenpunktes Geschwindigkeit Beschleunigung Gleichf?rmig beschleunigte geradlinige Bewegung Kreisbewegung Die allgemeine krummlinige Bewegung* III) Die Newton'sche Gesetze Kr?fte Erstes Newton'sche Axiom (Tr?gheitsprinzig) Kraft, Masse und das zweite Newton'sche Axiom Das 3. Newton'sche Gesetz Reibung Das Gravitationsgesetz Die Gravitationskonstante ? Cavendish-Experiment* Das Fallgesetz ?quivalenzprinzip Die Kepler'schen Gesetze IV) Die Erhaltung von Energie und Impuls Die Erhaltung der Summe von kinetischer und potentieller Energie Konservative Kraft Zwei Beispiele* Fadenpendel Feder Potentielle Energie im Schwerefeld Gravitationsfeld einer Kugelschale und einer Vollkugel, ?quipotentialfl?chen* (Math: Gradient) Impulserhaltung und Sto?prozesse (Math: Summenzeichen) Sto?prozesse Gesamtimpuls eines Systems mit ?u?eren Kr?ften Massemittelpunkt Bewegung des Massenmittelpunktes Der Massenmittelpunkt als Bezugssystem V) Die rotierende Bewegung Drehimpulserhaltung f?r einen Massenpunkt Drehmoment und Drehimpuls Die Erhaltung des Drehimpulses beim Wirken einer Zentralkraft Drehimpulserhaltung in einem System von Massenpunkten Bewegung des Massenschwerpunktes Drehimpulserhaltung in einem System von Massenpunkten Der Drehimpuls starrer K?rper Drehimpuls einer rotierenden Platte* Drehimpuls eines rotationssymmetrischen K?rpers* Berechnung des Tr?gheitsmoments (Math: Volumenintegrale) Steiner'scher Satz Drehimpuls eines beliebig geformten K?rpers* (Math: Tensoren, Dyade) Die Energie eines starren Rotators Der symmetrische Kreisel Kr?ftefreier Kreisel Der Kreisel unter dem Einfluss eines Drehmoments Die kleinste Einheit des Drehimpulses in den Natur* Scheinkr?fte in rotierenden Bezugssystemen VI) Schwingungen (Math: lineare Dgl. 2. Ordnung, Euler'sche Formel. Komplexe L?sung von Dgl.) Freie unged?mpfte Schwingungen Freie ged?mpfte Schwingungen Erzwungene Schwingungen Gekoppelte Oszillatoren Parametrisch verst?rkte Schwingungen* VII) Nichtlineare Dynamik und Chaos (Math: Taylor-Entwicklung, nichtlineare Dgln., numerische L?sung nichtlinearer Dgln. mit Maple) Nichtlineare Oszillatoren Potentielle Energie: Harmonische und nichtlineare Oszillatoren Potentielle Energie des Fadenpendels* Der Magnetoszillator* Potentielle Energie eines Duffing - Oszillators* Resonanzkurve nichtlinearer Oszillatoren Der Phasenraum Chaotische Dynamik Logistische Abbildung und Feigenbaum - Diagramm VIII) Mechanische Wellen (Math: partielle Dgln., Wellengleichung) Beispiel Seilwellen Ausbreitung einer St?rung Die Wellengleichung Reflexion von Seilwellen Sinusf?rmige harmonische Wellen Reflexion harmonischer Wellen: Stehende Wellen und Schwingungen Eigenfrequenzen einer schwingenden Saite Schallwellen Longitudinale Schallwellen in Gasen und Fl?ssigkeiten Stehende Schallwellen Kugelwellen Der akustische Dopplereffekt Fourieranalyse, Dispersion und Wellenpakete (Math: Fourierentwicklung) Fourieranalyse Phasen- und Gruppengeschwindigkeit Dispersion und Wellenpakete IX) Die feste Materie X) Fl?ssigkeiten Hydrostatische Kr?fte Auftriebskraft* Oberfl?chenspannung Benetzung fester Oberfl?chen Kr?fte in str?menden Fl?ssigkeiten Tr?gheitskr?fte in station?ren Str?mungen Viskosit?t und Reibungskr?fte Str?mung bei gro?en Geschwindigkeiten Vom Fliegen Die mit * versehenen Inhalte sind optional bzw. k?nnen durch andere Beispiele ersetzt werden</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/inhalte/Physik-II-Elektrodynamik.html</field>
<field name="title">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik II (Elektrodynamik)</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/inhalte/Physik-II-Elektrodynamik.html</field>
<field name="content">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik II (Elektrodynamik)  Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik II (Elektrodynamik)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Physik II - Elektrodynamik (4 st.) Stand Juli 2003; ? zur?ck zur ?bersicht I) Einleitung Kr?fte zwischen ruhenden Ladungen: Elektrostatik Kr?fte zwischen bewegten Ladungen: Magnetostatik Das elektromagnetische Feld II) Grundlagen der Elektrostatik Das Coulomb'sche Gesetz Das elektrische Feld Arbeit und potenzielle Energie Das elektrostatische Potenzial Das Gauss'sche Gesetz der Elektrostatik III) Anwendungen der Elektrostatik Kr?ftegleichgewicht im elektrostatischen Feld Elektrisches Feld einer geladenen Platte Elektrisches Feld zwischen parallelen Platten Der lange Draht und das Koaxialkabel Elektrisches Feld einer homogen geladenen Kugel Leiter im elektrischen Feld Der Faradayk?fig Die Energiedichte im elektrischen Feld IV) Isolatoren im elektrischen Feld Induziertes und permanentes Dipolmoment Induzierte Polarisation und elektrische Felder im Dielektrikum Feldenergie im Dielektikum Piezo- und Ferroelektrizit?t V) Elektrischer Strom Die Stromdichte und die Ladungserhaltung Elektrische Leitf?higkeit und das Ohm'sche Gesetz Mikroskopisches Modell der Leitf?higkeit Elektronenleitung in Metallen und Halbleitern Ionenleitung in Fl?ssigkeiten - Elektrolyse Dissipation von elektrischer Leistung durch Widerst?nde Kirchhoff'sche Gesetze VI) Magnetostatik Das Ampere'sche Gesetz Das Magnetfeld konstanter Str?me (mit verschiedenen Beispielen) Die magnetische Kraft auf einen stromdurchflossenen Draht Bewegte Ladungen in einem magnetischen Feld Der Hall-Effekt VII) Magnetische Induktion Das Faraday'sche Gesetz Beispiele f?r Induktionsph?nomene Gegenseitige- und Selbstinduktion Die Energiedichte im Magnetfeld Der Transformator VIII) Wechselstromlehre Komplexe Widerst?nde Hoch- und Tiefp?sse Der elektrische Schwingkreis Erzwungene Schwingungen Selbsterregte Schwingungen IX) Magnetische Materie Magnetische Dipole und Magnetisierung Atomare magnetische Dipole (klassisch) Para- und Diamagnetismus Ferromagnetismus und magnetische Hysterese X) Elektromagnetische Wellen Die Erweiterung des Ampere'schen Gesetzes: Verschiebungsstr?me Die Maxwellgleichungen Wellenausbreitung im Vakuum Gef?hrte elektromagnetische Wellen Wellenwiderstand Energietransport durch elektromagnetische Wellen: Der Poyntingvektor Abstrahlung elektromagnetischer Wellen Bei dieser Vorlesung ist es schwer, optionale Teile anzugeben, da das meiste unverzichtbar erscheint. Voraussetzungen: Komplexe Zahlen (Exponentialfunktion!); Differenzieren und Integrieren in einer Dimension In der Vorlesung eingef?hrte mathematische Hilfsmittel: Partielle Ableitungen, Gradient und Potenzial, Linien-, Fl?chen und Volumenintegrale, Divergenz und Rotation, S?tze von Gauss und Stokes Literatur: E.M. Purcell: Electricity and Magnetism (Berkeley Physics Course II) R.P. Feynman: The Feynman lectures on Physics II W. Demtr?der: Experimentalphysik II</field>
<field name="important">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik II (Elektrodynamik)  Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik II (Elektrodynamik)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Physik II - Elektrodynamik (4 st.) Stand Juli 2003; ? zur?ck zur ?bersicht I) Einleitung Kr?fte zwischen ruhenden Ladungen: Elektrostatik Kr?fte zwischen bewegten Ladungen: Magnetostatik Das elektromagnetische Feld II) Grundlagen der Elektrostatik Das Coulomb'sche Gesetz Das elektrische Feld Arbeit und potenzielle Energie Das elektrostatische Potenzial Das Gauss'sche Gesetz der Elektrostatik III) Anwendungen der Elektrostatik Kr?ftegleichgewicht im elektrostatischen Feld Elektrisches Feld einer geladenen Platte Elektrisches Feld zwischen parallelen Platten Der lange Draht und das Koaxialkabel Elektrisches Feld einer homogen geladenen Kugel Leiter im elektrischen Feld Der Faradayk?fig Die Energiedichte im elektrischen Feld IV) Isolatoren im elektrischen Feld Induziertes und permanentes Dipolmoment Induzierte Polarisation und elektrische Felder im Dielektrikum Feldenergie im Dielektikum Piezo- und Ferroelektrizit?t V) Elektrischer Strom Die Stromdichte und die Ladungserhaltung Elektrische Leitf?higkeit und das Ohm'sche Gesetz Mikroskopisches Modell der Leitf?higkeit Elektronenleitung in Metallen und Halbleitern Ionenleitung in Fl?ssigkeiten - Elektrolyse Dissipation von elektrischer Leistung durch Widerst?nde Kirchhoff'sche Gesetze VI) Magnetostatik Das Ampere'sche Gesetz Das Magnetfeld konstanter Str?me (mit verschiedenen Beispielen) Die magnetische Kraft auf einen stromdurchflossenen Draht Bewegte Ladungen in einem magnetischen Feld Der Hall-Effekt VII) Magnetische Induktion Das Faraday'sche Gesetz Beispiele f?r Induktionsph?nomene Gegenseitige- und Selbstinduktion Die Energiedichte im Magnetfeld Der Transformator VIII) Wechselstromlehre Komplexe Widerst?nde Hoch- und Tiefp?sse Der elektrische Schwingkreis Erzwungene Schwingungen Selbsterregte Schwingungen IX) Magnetische Materie Magnetische Dipole und Magnetisierung Atomare magnetische Dipole (klassisch) Para- und Diamagnetismus Ferromagnetismus und magnetische Hysterese X) Elektromagnetische Wellen Die Erweiterung des Ampere'schen Gesetzes: Verschiebungsstr?me Die Maxwellgleichungen Wellenausbreitung im Vakuum Gef?hrte elektromagnetische Wellen Wellenwiderstand Energietransport durch elektromagnetische Wellen: Der Poyntingvektor Abstrahlung elektromagnetischer Wellen Bei dieser Vorlesung ist es schwer, optionale Teile anzugeben, da das meiste unverzichtbar erscheint. Voraussetzungen: Komplexe Zahlen (Exponentialfunktion!); Differenzieren und Integrieren in einer Dimension In der Vorlesung eingef?hrte mathematische Hilfsmittel: Partielle Ableitungen, Gradient und Potenzial, Linien-, Fl?chen und Volumenintegrale, Divergenz und Rotation, S?tze von Gauss und Stokes Literatur: E.M. Purcell: Electricity and Magnetism (Berkeley Physics Course II) R.P. Feynman: The Feynman lectures on Physics II W. Demtr?der: Experimentalphysik II</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/inhalte/Physik-III-Wellen-und-Quanten.html</field>
<field name="title">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik III (Wellen und Quanten)</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/inhalte/Physik-III-Wellen-und-Quanten.html</field>
<field name="content">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik III (Wellen und Quanten)  Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik III (Wellen und Quanten)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Physik III - Wellen und Quanten (4 st.) Stand Juli 2003; ? zur?ck zur ?bersicht I) Einf?hrung - Was ist Licht, elektromagn. Strahlung? (Def. Optik) historischer ?berblick, ?therhypothese, Messung der Lichtgeschwindigkeit Ableitung der Wellengleichung aus den Maxwell-Gleichungen (Math.: lineare partielle Differentialgl.) ebene harmonische Welle und Kugelwelle Dispersionsrelation f?r Licht Superpositionsprinzip, Wellenpaket, Komplementarit?t zwischen Ortsdarstellung und Impulsdarstellung (math. Einschub: Fourierreihe, Fouriersynthese, Fourierintegral) Brechungsindex im Medium, Materialdispersion, Gruppen- und Phasengeschwindigkeit II) Geometrische Optik / Strahlenoptik Geltungsbereich ( Wellenl?nge &amp;lt;&amp;lt; typ. Abmess. von Blenden etc.) Huygenssches Prinzip --&amp;gt; Reflexionsgesetz, Brechungsgesetz (Snellius) Fresnelschen Formeln (keine Ableitung) --&amp;gt; Brewstersches Gesetz, Totalreflexion --&amp;gt; evaneszente Welle --&amp;gt; Nahfeldmikroskop (SNOM) Fermatsches Prinzip, Prisma, brechende Kugelfl?che optische Abbildungsgleichung Def. d?nne Linse, paraxiale N?herung (Gau?sche Optik), "Linsenmacherformel" Abbildungsgleichung f?r Linsen und Hohlspiegel (Sammellinse, Zerstreuungslinse, konkaver, konvexer Spiegel), Def. reelles, virtuelles Bild Linsenfehler (chromatisch, monochromatisch, Koma, Astigmatismus) Linsensysteme (Kombination zweier d?nner Linsen, Einf?hrung des Konzepts der dicken Linse) --&amp;gt; Matrixmethode (Math.: Rechnen mit Matrizen) nicht abbildende Systeme: Beispiel Fresnel-Linse optische Instrumente: Auge, Lupe, Mikroskop, Fernrohr (Def. Vergr??erung) III) Wellenoptik Geltungsbereich komplement?r zur Strahlenoptik Kirchhoffsche Beugungstheorie (keine Herleitung), ?bliche Vereinfachungen, z.B. Betrachtung eines skalaren Feldes (Math.: Greenscher Integralsatz, wird jedoch nicht verwendet) Fresnel-Huygenssches Prinzip Fraunhofersche Beugung (Math.: Taylor-Reihe) Spezialf?lle der Fraunhoferschen Beugung: langer Spalt, kreisf?rmige Blende (Math.: Bessel-Funktion) --&amp;gt; beugungsbegrenzte Divergenz (Rayleigh-Kriterium --&amp;gt; Aufl?sung des Mikroskops), Doppelspalt Koh?renz (r?umlich und zeitlich) Beugung am Gitter --&amp;gt; Gitterspektrometer (Aufl?sung) im Vgl. dazu Prismenspektrometer, Fourier-Spektrometer Fraunhofersche Beugung --&amp;gt; Fresnelsche Beugung f?r endliche Abst?nde Fresnel-Zonen --&amp;gt; diffraktive Optik --&amp;gt; Fourier Optik, moderne Anwendungen Interferenzen gleicher Neigung, Dicke, Vielfachinterferenzen --&amp;gt; Verg?tungen von Oberfl?chen, Reflex-, Antireflexbeschichtungen dielektrische Spiegel, auch schr?ger Einfall Holographie: unterschiedliche Arten (Beleuchtung mit monochrom. Licht/Weisslicht, Durchlicht/Reflexion) IV) Polarisationsoptik linear, zirkular, elliptisch polarisiertes Licht unpolarisiertes, nat?rliches Licht Polarisatoren, Malussches Gesetz Mechanismen zur ?nderung der Polarisation: Reflexion, ... Gitterpolarisatoren, Doppelbrechung (Dichroismus) --&amp;gt; optische Aktivit?t: Vereinf.: optisch einachsiger Kristall (ordentlicher und au?erordentl. Strahl) Lamda/2- und Lamda/4-Platte induzierte Doppelbrechung: Spannungsdoppelbrechung, Kerr- Effekt Pockelszelle, Faraday-Modulator V) Wellengleichung mit Randbedingungen L?sungen der Helmholtzgl. --&amp;gt; Wellenleiter, Hohlleiter --&amp;gt; Modenstruktur Laser- und Mikrowellenresonatoren Evaneszente Wellen Moderne optoelektronische Komponenten: Glasfaser, Halbleiterlaser (Anw. im CD-Spieler), integrierte Optik (Richtkoppler, Multiplexer) VI) Welle-Teilchen Dualismus Schwarzk?rperstrahlung (als Einf?hrung) ohne Experiment, Resonatorbild --&amp;gt; Einf?hrung von h Wellen als Teilchen: Compton-Effekt, Niedrig-Intensit?t- Doppelspalt-Beugung, Photoeffekt, Drehimpuls des Photons (Spin) und Parit?t Teilchen als Wellen: de Broglie Wellenl?nge, Doppelspaltexperiment mit massiven Teilchen, Wahrscheinlichkeitsinterpretation der "Wellenfunktion" Allgemeine ?berleitung zur Quantenphysik Heisenbergsches Mikroskop Unsch?rferelation Atom als Teilchen mit diskreten ?berg?ngen (Franck-Hertz Versuch)</field>
<field name="important">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik III (Wellen und Quanten)  Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik III (Wellen und Quanten)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Physik III - Wellen und Quanten (4 st.) Stand Juli 2003; ? zur?ck zur ?bersicht I) Einf?hrung - Was ist Licht, elektromagn. Strahlung? (Def. Optik) historischer ?berblick, ?therhypothese, Messung der Lichtgeschwindigkeit Ableitung der Wellengleichung aus den Maxwell-Gleichungen (Math.: lineare partielle Differentialgl.) ebene harmonische Welle und Kugelwelle Dispersionsrelation f?r Licht Superpositionsprinzip, Wellenpaket, Komplementarit?t zwischen Ortsdarstellung und Impulsdarstellung (math. Einschub: Fourierreihe, Fouriersynthese, Fourierintegral) Brechungsindex im Medium, Materialdispersion, Gruppen- und Phasengeschwindigkeit II) Geometrische Optik / Strahlenoptik Geltungsbereich ( Wellenl?nge &amp;lt;&amp;lt; typ. Abmess. von Blenden etc.) Huygenssches Prinzip --&amp;gt; Reflexionsgesetz, Brechungsgesetz (Snellius) Fresnelschen Formeln (keine Ableitung) --&amp;gt; Brewstersches Gesetz, Totalreflexion --&amp;gt; evaneszente Welle --&amp;gt; Nahfeldmikroskop (SNOM) Fermatsches Prinzip, Prisma, brechende Kugelfl?che optische Abbildungsgleichung Def. d?nne Linse, paraxiale N?herung (Gau?sche Optik), "Linsenmacherformel" Abbildungsgleichung f?r Linsen und Hohlspiegel (Sammellinse, Zerstreuungslinse, konkaver, konvexer Spiegel), Def. reelles, virtuelles Bild Linsenfehler (chromatisch, monochromatisch, Koma, Astigmatismus) Linsensysteme (Kombination zweier d?nner Linsen, Einf?hrung des Konzepts der dicken Linse) --&amp;gt; Matrixmethode (Math.: Rechnen mit Matrizen) nicht abbildende Systeme: Beispiel Fresnel-Linse optische Instrumente: Auge, Lupe, Mikroskop, Fernrohr (Def. Vergr??erung) III) Wellenoptik Geltungsbereich komplement?r zur Strahlenoptik Kirchhoffsche Beugungstheorie (keine Herleitung), ?bliche Vereinfachungen, z.B. Betrachtung eines skalaren Feldes (Math.: Greenscher Integralsatz, wird jedoch nicht verwendet) Fresnel-Huygenssches Prinzip Fraunhofersche Beugung (Math.: Taylor-Reihe) Spezialf?lle der Fraunhoferschen Beugung: langer Spalt, kreisf?rmige Blende (Math.: Bessel-Funktion) --&amp;gt; beugungsbegrenzte Divergenz (Rayleigh-Kriterium --&amp;gt; Aufl?sung des Mikroskops), Doppelspalt Koh?renz (r?umlich und zeitlich) Beugung am Gitter --&amp;gt; Gitterspektrometer (Aufl?sung) im Vgl. dazu Prismenspektrometer, Fourier-Spektrometer Fraunhofersche Beugung --&amp;gt; Fresnelsche Beugung f?r endliche Abst?nde Fresnel-Zonen --&amp;gt; diffraktive Optik --&amp;gt; Fourier Optik, moderne Anwendungen Interferenzen gleicher Neigung, Dicke, Vielfachinterferenzen --&amp;gt; Verg?tungen von Oberfl?chen, Reflex-, Antireflexbeschichtungen dielektrische Spiegel, auch schr?ger Einfall Holographie: unterschiedliche Arten (Beleuchtung mit monochrom. Licht/Weisslicht, Durchlicht/Reflexion) IV) Polarisationsoptik linear, zirkular, elliptisch polarisiertes Licht unpolarisiertes, nat?rliches Licht Polarisatoren, Malussches Gesetz Mechanismen zur ?nderung der Polarisation: Reflexion, ... Gitterpolarisatoren, Doppelbrechung (Dichroismus) --&amp;gt; optische Aktivit?t: Vereinf.: optisch einachsiger Kristall (ordentlicher und au?erordentl. Strahl) Lamda/2- und Lamda/4-Platte induzierte Doppelbrechung: Spannungsdoppelbrechung, Kerr- Effekt Pockelszelle, Faraday-Modulator V) Wellengleichung mit Randbedingungen L?sungen der Helmholtzgl. --&amp;gt; Wellenleiter, Hohlleiter --&amp;gt; Modenstruktur Laser- und Mikrowellenresonatoren Evaneszente Wellen Moderne optoelektronische Komponenten: Glasfaser, Halbleiterlaser (Anw. im CD-Spieler), integrierte Optik (Richtkoppler, Multiplexer) VI) Welle-Teilchen Dualismus Schwarzk?rperstrahlung (als Einf?hrung) ohne Experiment, Resonatorbild --&amp;gt; Einf?hrung von h Wellen als Teilchen: Compton-Effekt, Niedrig-Intensit?t- Doppelspalt-Beugung, Photoeffekt, Drehimpuls des Photons (Spin) und Parit?t Teilchen als Wellen: de Broglie Wellenl?nge, Doppelspaltexperiment mit massiven Teilchen, Wahrscheinlichkeitsinterpretation der "Wellenfunktion" Allgemeine ?berleitung zur Quantenphysik Heisenbergsches Mikroskop Unsch?rferelation Atom als Teilchen mit diskreten ?berg?ngen (Franck-Hertz Versuch)</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/inhalte/Physik-IV-Thermodynamik.html</field>
<field name="title">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik IV (W?rmelehre)</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/inhalte/Physik-IV-Thermodynamik.html</field>
<field name="content">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik IV (W?rmelehre)  Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik IV (W?rmelehre)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Physik IV - W?rmelehre (4 st.) Stand Juli 2003; ? zur?ck zur ?bersicht I) Einleitung Entropie und Temperatur Gleichgewichte Die Messung der Temperatur Das ideale Gasgesetz II) Thermodynamik nach Gibbs Die Energie und die Gibbs'sche Fundamentalform Interpretation der Gibbs'schen Fundamentalform: Das Prinzip der W?rmekraftmaschine (Carnot'scher Wirkungsgrad) Irreversibilit?t W?rmekapazit?ten Energie und W?rmekapazit?t idealer Gase Mechanisches Modell eines idealen Gases Gleichverteilungssatz Messung der W?rmekapazit?t und der Entropie Entropieerzeugung durch irreversiblen Temperaturausgleich W?rmestrom und W?rmeleitung Der historische Weg zur Entropie Die Entropie eines idealen Gases III) Thermodynamische Potentiale Legendre-Transformationen Maxwellrelationen Beispiele aus der Mechanik und der Elektrodynamik* Konsequenzen der Homogenit?t Homogenit?tsrelation Die Gibbs-Duhem Relation und das chemische Potenzial Die Entropie als thermodynamisches Potential* Die statistische Interpretation der Entropie IV) Zusammengesetzte System Gleichgewicht und Stabilit?t (Extremalprinzipien) Ideale Mischungen Mischungsentropie Der osmotische Druck Das chemische Potenzial als Antrieb von Diffusionsprozessen: die Brown'sche Molekularbewegung Chemische Reaktionen - das Massenwirkungsgesetz* Elektrochemie* V) Reale Systeme und Phasen?berg?nge Phasengleichgewichte und die Gleichung von Clausius und Clapeyron Instabilit?ten in realen Mischungen* Das reale Gas Die Van der Waals'sche Zustandsgleichung Gay-Lussac-und Joule-Thompson Expansion Der Phasen?bergang im Van der Waals-Modell Der kritische Punkt* VI) Thermodynamische Maschinen Carnot-Proze? mit idealen Gasen Die Sterlingmaschine Die Dampfmaschine Otto- und Dieselmotor W?rmepumpen Die Verfl?ssigung von Gasen VII) Statistische Thermodynamik am Beispiel von Spin ? - Systemen Zufallsgr??en und statistische Unabh?ngigkeit Das Boltzmann?sche Prinzip Die Energie als Zufallsgr??e Die Zustandssumme eines Spin ? - Systems Thermodynamische Eigenschaften des Spin ? - Systems W?rmekapazit?t Magnetische Suszeptibilit?t Magnetokalorischer Effekt Magnetische K?hlung Der dritte Hauptsatz Negative Temperaturen* VIII) Fermi- und Bosesysteme Energie und Teilchenzahl als Zufallsgr??en Die Zustandssumme "Elementare" Fermi- und Bosesysteme IX) Ideale Fermigase: Das Sommerfeldmodell der Metalle Dispersionsrelation und Zustandsdichte Der Quantenpunktkontakt* Sommerfeldentwicklung Thermodynamische Eigenschaften W?rmekapazit?t Kompressibilit?t Thermische Ausdehnung Spinsuszeptibilit?t Gl?hemission* L?sungen von 3He in 4He: Erzeugung sehr tiefer Temperaturen* Weisse Zwerge und Neutronensterne* X) Ideale Bosegase: Phononen und Photonen Massive Bosonen: Bose-Einstein-Kondensation Superfluides 4He* Masselose Bosonen: Phononen und Photonen Schwarzk?rperstrahlung Photonenstatistik und das Experiment von Hanbury-Brown und Twiss* Phononen im Debyemodell Mit einem Stern (*) gekennzeichnete Abschnitte sind optional Voraussetzungen: Analysis mehrerer Ver?nderlicher: partielle Ableitungen, totales Differenzial, Integrabilit?tsbedingungen, Extrema mit Nebenbedingungen, Fouriertransformation von Differenzialgleichungen Quantenmechanik des Teilchens im Kasten und des harmonischen Oszillators Literatur: D.V. Schroeder: An Introduction to Thermal Physics M.W. Zemansky, R.H. Dittmann: Heat and Thermodynamics C. Kittel, H. Kroemer: Physik der W?rme W. Demtr?der: Experimentalphysik 1 (Mechanik und W?rme) H.B. Callen: Thermodynamics</field>
<field name="important">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik IV (W?rmelehre)  Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Physik IV (W?rmelehre)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Physik IV - W?rmelehre (4 st.) Stand Juli 2003; ? zur?ck zur ?bersicht I) Einleitung Entropie und Temperatur Gleichgewichte Die Messung der Temperatur Das ideale Gasgesetz II) Thermodynamik nach Gibbs Die Energie und die Gibbs'sche Fundamentalform Interpretation der Gibbs'schen Fundamentalform: Das Prinzip der W?rmekraftmaschine (Carnot'scher Wirkungsgrad) Irreversibilit?t W?rmekapazit?ten Energie und W?rmekapazit?t idealer Gase Mechanisches Modell eines idealen Gases Gleichverteilungssatz Messung der W?rmekapazit?t und der Entropie Entropieerzeugung durch irreversiblen Temperaturausgleich W?rmestrom und W?rmeleitung Der historische Weg zur Entropie Die Entropie eines idealen Gases III) Thermodynamische Potentiale Legendre-Transformationen Maxwellrelationen Beispiele aus der Mechanik und der Elektrodynamik* Konsequenzen der Homogenit?t Homogenit?tsrelation Die Gibbs-Duhem Relation und das chemische Potenzial Die Entropie als thermodynamisches Potential* Die statistische Interpretation der Entropie IV) Zusammengesetzte System Gleichgewicht und Stabilit?t (Extremalprinzipien) Ideale Mischungen Mischungsentropie Der osmotische Druck Das chemische Potenzial als Antrieb von Diffusionsprozessen: die Brown'sche Molekularbewegung Chemische Reaktionen - das Massenwirkungsgesetz* Elektrochemie* V) Reale Systeme und Phasen?berg?nge Phasengleichgewichte und die Gleichung von Clausius und Clapeyron Instabilit?ten in realen Mischungen* Das reale Gas Die Van der Waals'sche Zustandsgleichung Gay-Lussac-und Joule-Thompson Expansion Der Phasen?bergang im Van der Waals-Modell Der kritische Punkt* VI) Thermodynamische Maschinen Carnot-Proze? mit idealen Gasen Die Sterlingmaschine Die Dampfmaschine Otto- und Dieselmotor W?rmepumpen Die Verfl?ssigung von Gasen VII) Statistische Thermodynamik am Beispiel von Spin ? - Systemen Zufallsgr??en und statistische Unabh?ngigkeit Das Boltzmann?sche Prinzip Die Energie als Zufallsgr??e Die Zustandssumme eines Spin ? - Systems Thermodynamische Eigenschaften des Spin ? - Systems W?rmekapazit?t Magnetische Suszeptibilit?t Magnetokalorischer Effekt Magnetische K?hlung Der dritte Hauptsatz Negative Temperaturen* VIII) Fermi- und Bosesysteme Energie und Teilchenzahl als Zufallsgr??en Die Zustandssumme "Elementare" Fermi- und Bosesysteme IX) Ideale Fermigase: Das Sommerfeldmodell der Metalle Dispersionsrelation und Zustandsdichte Der Quantenpunktkontakt* Sommerfeldentwicklung Thermodynamische Eigenschaften W?rmekapazit?t Kompressibilit?t Thermische Ausdehnung Spinsuszeptibilit?t Gl?hemission* L?sungen von 3He in 4He: Erzeugung sehr tiefer Temperaturen* Weisse Zwerge und Neutronensterne* X) Ideale Bosegase: Phononen und Photonen Massive Bosonen: Bose-Einstein-Kondensation Superfluides 4He* Masselose Bosonen: Phononen und Photonen Schwarzk?rperstrahlung Photonenstatistik und das Experiment von Hanbury-Brown und Twiss* Phononen im Debyemodell Mit einem Stern (*) gekennzeichnete Abschnitte sind optional Voraussetzungen: Analysis mehrerer Ver?nderlicher: partielle Ableitungen, totales Differenzial, Integrabilit?tsbedingungen, Extrema mit Nebenbedingungen, Fouriertransformation von Differenzialgleichungen Quantenmechanik des Teilchens im Kasten und des harmonischen Oszillators Literatur: D.V. Schroeder: An Introduction to Thermal Physics M.W. Zemansky, R.H. Dittmann: Heat and Thermodynamics C. Kittel, H. Kroemer: Physik der W?rme W. Demtr?der: Experimentalphysik 1 (Mechanik und W?rme) H.B. Callen: Thermodynamics</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/inhalte/Struktur-der-Materie-III.html</field>
<field name="title">Vorlesungsinhalte - Struktur der Materie III - Kerne und Teilchen</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/inhalte/Struktur-der-Materie-III.html</field>
<field name="content">Vorlesungsinhalte - Struktur der Materie III - Kerne und Teilchen   Vorlesungsinhalte - Struktur der Materie III - Kerne und Teilchen   Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Struktur der Materie III - Kerne und Teilchen (4st) Autor: A.Lenz, Stand April 2006; ? zur?ck zur ?bersicht I) Kernphysik: 1. Kerneigenschaften Radioaktive Zerf?lle Quantenmechanik des alpha-Zerfalls Biologische Auswirkungen von radioaktiver Strahlung 2. Kernmodelle Tr?pfchenmodell Fermigasmodell Schalenmodell 3. Elemententstehung im fr?hen Universum in Sternen 4. Streuung Rutherford- bis Rosenbluth-Streuung 5. Energieerzeugung Kernfusion Kernspaltung 6. Anwendungen der Kernphysik Neutronenphysik ... II) Teilchenphysik: 1. Experimente Teilchenerzeugung Teilchenbeschleunigung Teilchennachweis 2. Theoretische Beschreibung von Wechselwirkungen Wellengleichungen Kopplung von Materie und Kraftfeldern Prinzip Eichinvarianz Nicht-abelsche Eichtheorien 3. Aufbau der Materie aus Quarks und Leptonen Tief-inelastische Streuung Das Quarkmodell Elektron-Positron-Streuung 4. Die schwache Wechselwirkung Beta-Zerfall Neutrinophysik Fermitheorie 5. Das Standardmodell der Teilchenphysik Higgsmechanismus Fermionenmassen CKM-Matrix 6. Aktuelle Themen der Teilchenphysik z.B. Besitzt das Neutrino eine Masse? z.B. CP-Verletzung 7. Die Grenzen des Standardmodells Pr?zisionstest Erweiterungen des Standardmodells Literatur: Kernphysik; Theo Mayer-Kuckuk Teilchen und Kerne; Bogdan Povh, Klaus Rith, Christoph Scholz, Frank Zetsche Introduction to High Energy Physics; Donald H. Perkins</field>
<field name="important">Vorlesungsinhalte - Struktur der Materie III - Kerne und Teilchen   Vorlesungsinhalte - Struktur der Materie III - Kerne und Teilchen   Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Struktur der Materie III - Kerne und Teilchen (4st) Autor: A.Lenz, Stand April 2006; ? zur?ck zur ?bersicht I) Kernphysik: 1. Kerneigenschaften Radioaktive Zerf?lle Quantenmechanik des alpha-Zerfalls Biologische Auswirkungen von radioaktiver Strahlung 2. Kernmodelle Tr?pfchenmodell Fermigasmodell Schalenmodell 3. Elemententstehung im fr?hen Universum in Sternen 4. Streuung Rutherford- bis Rosenbluth-Streuung 5. Energieerzeugung Kernfusion Kernspaltung 6. Anwendungen der Kernphysik Neutronenphysik ... II) Teilchenphysik: 1. Experimente Teilchenerzeugung Teilchenbeschleunigung Teilchennachweis 2. Theoretische Beschreibung von Wechselwirkungen Wellengleichungen Kopplung von Materie und Kraftfeldern Prinzip Eichinvarianz Nicht-abelsche Eichtheorien 3. Aufbau der Materie aus Quarks und Leptonen Tief-inelastische Streuung Das Quarkmodell Elektron-Positron-Streuung 4. Die schwache Wechselwirkung Beta-Zerfall Neutrinophysik Fermitheorie 5. Das Standardmodell der Teilchenphysik Higgsmechanismus Fermionenmassen CKM-Matrix 6. Aktuelle Themen der Teilchenphysik z.B. Besitzt das Neutrino eine Masse? z.B. CP-Verletzung 7. Die Grenzen des Standardmodells Pr?zisionstest Erweiterungen des Standardmodells Literatur: Kernphysik; Theo Mayer-Kuckuk Teilchen und Kerne; Bogdan Povh, Klaus Rith, Christoph Scholz, Frank Zetsche Introduction to High Energy Physics; Donald H. Perkins</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/inhalte/Theorie-I-Mechanik.html</field>
<field name="title">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Theorie I (Mechanik)</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/inhalte/Theorie-I-Mechanik.html</field>
<field name="content">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Theorie I (Mechanik)  Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Theorie I (Mechanik)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Theoretische Physik I - Mechanik Stand Juli 2003; ? zur?ck zur ?bersicht I) Mechanik von Punktteilchen (ca. 4h) Ort, Impuls und Bahn eines Teilchens, Newtonsche Axiome, Bewegungsgleichungen, Erhaltungss?tze, Virialsatz, autonome und nicht-autonome Systeme II) Lagrange-Mechanik: Konzepte (6h) Lagrange-Funktion, Hamiltonsches Wirkungsintegral und Variationsprinzip, Lagrange-Gleichungen 2. Art, verallgemeinerte (a. krummlinige) Koordinaten und Impulse, zyklische Variablen und Erhaltungsgr??en, Symmetrien (6 h) III) Anwendungen: Einteilchenprobleme (12h) Harmonischer Oszillator, mathematisches Pendel (in harmonischer N?herung und exakt nichtlinear mit Phasenraumportrait), gekoppelte Schwingungen, Normalkoordinaten, zweiatomiges Molek?l, lineare Kette, ?bergang zur Kontinuumsmechanik* (10 h) Zwangsbedingungen, Reibungskr?fte, d'Alembertsches Prinzip und Lagrange-Gleichungen 1. Art (2 h) IV) Anwendungen: Mehrteilchenprobleme (10h) Mehrk?rperprobleme, Schwerpunkts- und Relativkoordinaten (Jacobi-Koordinaten), Kepler-Problem und Kepler-Gesetze (Kegelschnitte!), elastische und inelastische Streuprobleme, Wirkungsquerschnitt, elastischer Sto? an Kugel (auch inelastisch mit Rotation), Coulomb-Streuung (8 h) Beschleunigte Bezugssysteme, Tr?gheitskr?fte, Foucault-Pendel (2 h) V) Relativit?tstheorie (6h) Raum und Zeit, Galilei-Prinzip, Relativit?tsprinzip, Inertialsysteme, Lorentztransformation, L?ngenkontraktion und Zeitdilatation, Teilchenzerf?lle, Vierer-Vektoren f?r Zeit-Ort und Energie-Impuls relativistische Lagrangefunktion mit Variationsprinzip* VI) Bewegung starrer K?rper (6h) Translations- und Rotationsenergie, Tr?gheitstensor, Satz von Steiner, Eulersche Winkel, Eulersche Gleichungen, freier Kreisel, Pr?zession schwerer Kreisel mit Nutation, Poinsot-Konstruktion* VII) Hamilton-Mechanik (4h) Phasenraum, Hamilton-Gleichungen, Poisson-Klammern, Symmetrien und Erhaltungss?tze, Noethersches Theorem, geschwindigkeitsabh?ngige Potentiale kanonische Transformationen*, Hamilton-Jacobi-Gleichung*, explizite Integration der Bewegungsgleichungen f?r integrable Systeme* VIII) Nichtlineare Dynamik (4h) Phasenraumbahnen und -Fluss, Liouville-Theorem, Integrabilit?tskriterien, nichtlineare Schwingungen, Poincare-Schnitte, Fixpunkte, Separatrices, Stabilit?tskriterien, Lyapunov-Exponenten, Chaos logistische Abbildungen*, Feigenbaum-Szenario* Total: ca. 52 Stunden = 13 Wochen a 4 Stunden Bemerkungen: Mit * gekennzeichnete Inhalte sind optional. Literatur: W. Nolting: Grundkurs Theoretische Physik 1 + 2 F. Scheck: Mechanik T. Flie?bach: Mechanik, Lehrbuch der Theoretischen Physik I F. Kuypers: Klassische Mechanik L.D. Landau, E.M. Lifshitz: Mechanik</field>
<field name="important">Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Theorie I (Mechanik)  Universität Regensburg - Fakultät für Physik Vorlesungsinhalte - Theorie I (Mechanik)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Theoretische Physik I - Mechanik Stand Juli 2003; ? zur?ck zur ?bersicht I) Mechanik von Punktteilchen (ca. 4h) Ort, Impuls und Bahn eines Teilchens, Newtonsche Axiome, Bewegungsgleichungen, Erhaltungss?tze, Virialsatz, autonome und nicht-autonome Systeme II) Lagrange-Mechanik: Konzepte (6h) Lagrange-Funktion, Hamiltonsches Wirkungsintegral und Variationsprinzip, Lagrange-Gleichungen 2. Art, verallgemeinerte (a. krummlinige) Koordinaten und Impulse, zyklische Variablen und Erhaltungsgr??en, Symmetrien (6 h) III) Anwendungen: Einteilchenprobleme (12h) Harmonischer Oszillator, mathematisches Pendel (in harmonischer N?herung und exakt nichtlinear mit Phasenraumportrait), gekoppelte Schwingungen, Normalkoordinaten, zweiatomiges Molek?l, lineare Kette, ?bergang zur Kontinuumsmechanik* (10 h) Zwangsbedingungen, Reibungskr?fte, d'Alembertsches Prinzip und Lagrange-Gleichungen 1. Art (2 h) IV) Anwendungen: Mehrteilchenprobleme (10h) Mehrk?rperprobleme, Schwerpunkts- und Relativkoordinaten (Jacobi-Koordinaten), Kepler-Problem und Kepler-Gesetze (Kegelschnitte!), elastische und inelastische Streuprobleme, Wirkungsquerschnitt, elastischer Sto? an Kugel (auch inelastisch mit Rotation), Coulomb-Streuung (8 h) Beschleunigte Bezugssysteme, Tr?gheitskr?fte, Foucault-Pendel (2 h) V) Relativit?tstheorie (6h) Raum und Zeit, Galilei-Prinzip, Relativit?tsprinzip, Inertialsysteme, Lorentztransformation, L?ngenkontraktion und Zeitdilatation, Teilchenzerf?lle, Vierer-Vektoren f?r Zeit-Ort und Energie-Impuls relativistische Lagrangefunktion mit Variationsprinzip* VI) Bewegung starrer K?rper (6h) Translations- und Rotationsenergie, Tr?gheitstensor, Satz von Steiner, Eulersche Winkel, Eulersche Gleichungen, freier Kreisel, Pr?zession schwerer Kreisel mit Nutation, Poinsot-Konstruktion* VII) Hamilton-Mechanik (4h) Phasenraum, Hamilton-Gleichungen, Poisson-Klammern, Symmetrien und Erhaltungss?tze, Noethersches Theorem, geschwindigkeitsabh?ngige Potentiale kanonische Transformationen*, Hamilton-Jacobi-Gleichung*, explizite Integration der Bewegungsgleichungen f?r integrable Systeme* VIII) Nichtlineare Dynamik (4h) Phasenraumbahnen und -Fluss, Liouville-Theorem, Integrabilit?tskriterien, nichtlineare Schwingungen, Poincare-Schnitte, Fixpunkte, Separatrices, Stabilit?tskriterien, Lyapunov-Exponenten, Chaos logistische Abbildungen*, Feigenbaum-Szenario* Total: ca. 52 Stunden = 13 Wochen a 4 Stunden Bemerkungen: Mit * gekennzeichnete Inhalte sind optional. Literatur: W. Nolting: Grundkurs Theoretische Physik 1 + 2 F. Scheck: Mechanik T. Flie?bach: Mechanik, Lehrbuch der Theoretischen Physik I F. Kuypers: Klassische Mechanik L.D. Landau, E.M. Lifshitz: Mechanik</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/inhalte/Theorie-III-QMI.html</field>
<field name="title">Vorlesungsinhalte - Theorie IV (Quantenmechanik I)</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/inhalte/Theorie-III-QMI.html</field>
<field name="content">Vorlesungsinhalte - Theorie IV (Quantenmechanik I)  Vorlesungsinhalte - Theorie IV (Quantenmechanik I)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Theoretische Physik III - Quantenmechanik I Stand September 2003; ? zur?ck zur ?bersicht I) Wellen und Teilchen: Historische und experimentelle Grundlagen Vorbemerkungen Die Rolle der Quantenphysik; Grundbegriffe der klassischen Disziplinen Historischer Abriss: Strahlungsgesetz und Quantenhypothese, diskrete Energieniveaus Bohr-Sommerfeld-Quantisierung, Quantisierung separabler Systeme*, das Scheitern der alten Atomtheorie* Teilcheneigenschaften elektromagnetischer Wellen Fotoelektrischer Effekt, Compton-Effekt Welleneigenschaften von Teilchen, de Broglie-Hypothese II) Von der Wellen- zur Quantenmechanik Welle-Teilchen-Dualit?t am Beispiel des Doppelspalt-Experiments Die Schr?dinger-Gleichung f?r freie Teilchen Analogien zur Wellengleichung f?r Photonen, Klein-Gordan-Gleichung* Wellenpakete und Fouriertransformation Wellenpaket zu festem Zeitpunkt; Ausbreitung von Wellenpaketen Erwartungswerte und Varianz bei Messung von Ort und Impuls Veranschaulichung der Unsch?rferelation (Einzelspalt) Einschub: Operatoren, Skalarprodukt,Kommutatoren, Baker-Hausdorff-Identit?t, Hermitizit?t Klassisch-quantenmechanische Korrespondenz und Schr?dinger-Gleichung Allgemeine Regeln f?r die Aufstellung der Schr?dinger-Gleichung, Postulate der Quantentheorie; Ehrenfest-Theorem Kontinuit?tsgleichung f?r die Wahrscheinlichkeitsdichte Zeitunabh?ngige Schr?dinger-Gleichung station?re Zust?nde, Eigenwert-Gleichung III) Einfache Probleme Potentialstufe Potentialschwelle und Tunneleffekt Beispiele: alpha-Zerfall, Feldemission, RTM,... Potentialtopf: gebundene Zust?nde (Anwendungen und Beispiele) Periodische Potentiale Symmetrieeigenschaften und Parit?t Harmonischer Oszillator, L?sung durch Potenzreihenansatz, Hermite-Polynome Teilchen im Magnetfeld IV) Abstrakte Formulierung: Vektoren und Operatoren im Hilbertraum Vektoren im Hilbertraum, Dirac-Notation, Dualer Raum und Skalarprodukt, Cauchy-Schwarz, Dreiecksungleichung Operatoren im Hilbertraum, adjungierte und hermitesche Operatoren, Darstellung, Basiswechsel und unit?re Operatoren Eigenwertproblem hermitescher Operatoren Harmonischer Oszillator: algebraische Methode Orts- und Impulsdarstellung Messung physikalischer Gr??en, allgemeine Unsch?rfe-Relation V) Zentralkraftproblem und Drehimpuls Schr?dinger-Gleichung f?r Zentralkr?fte Drehimpuls; L?sung der winkelabh?ngigen Differentialgleichung, Eigenwerte und Eigenfunktionen (Kugelfl?chenfunktionen) Drehimpuls als Erzeugende von Drehungen* Radialgleichung f?r Zentralkraftproblem 3d-Oszillator + Wasserstoffatom Schalenstruktur, Aufbau des Periodensystems VI) Drehimpuls und Spin Vertauschungsrelationen, Drehimpulsalgebra Spin 1/2; Pauli-Matrizen; Experimenteller Nachweis; Schr?dinger-Gleichung f?r Spin im Magnetfeld; Spinmessungen Drehimpulsaddition + Clebsch-Gordon-Koeffizienten; Beispiel: l = 1, s = 1/2 Anwendungen: Spin-Bahn-Kopplung; Zeeman-Effekt; Paschen-Back-Effekt VII) N?herungsmethoden Zeitunabh?ngige St?rungstheorie: Nicht-entartete St?rungstheorie; quadratischer Stark-Effekt; St?rungstheorie f?r entartete Zust?nde; linearer Stark-Effekt beim H-Atom Variationsrechnung; Bezug zum Variationsprinzip der klassischen Mechanik*; Beispiele: Grundzustand des He-Atoms,... Bemerkungen: Der Inhaltskatalog geht davon aus, dass die Thematik zu Kapitel 1 in den experimentellen Vorlesungen schon vertieft wird. Fourierreihen und Fouriertransformation werden als bekannt vorausgesetzt wenn noch Zeit verbleibt optional: Interpretation der QM (EPR, Bell'sche Ungleichungen), Quanteninformation Literatur: F. Schwabl: Quantenmechanik I T. Flie?bach: Quantenmechanik C. Cohen-Tannoudji, B. Diu, F. Laloe: Quantum Mechanics J.J. Sakurai: Modern Quantum Mechanics S. Gasiorowicz: Quantenphysik</field>
<field name="important">Vorlesungsinhalte - Theorie IV (Quantenmechanik I)  Vorlesungsinhalte - Theorie IV (Quantenmechanik I)  Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Theoretische Physik III - Quantenmechanik I Stand September 2003; ? zur?ck zur ?bersicht I) Wellen und Teilchen: Historische und experimentelle Grundlagen Vorbemerkungen Die Rolle der Quantenphysik; Grundbegriffe der klassischen Disziplinen Historischer Abriss: Strahlungsgesetz und Quantenhypothese, diskrete Energieniveaus Bohr-Sommerfeld-Quantisierung, Quantisierung separabler Systeme*, das Scheitern der alten Atomtheorie* Teilcheneigenschaften elektromagnetischer Wellen Fotoelektrischer Effekt, Compton-Effekt Welleneigenschaften von Teilchen, de Broglie-Hypothese II) Von der Wellen- zur Quantenmechanik Welle-Teilchen-Dualit?t am Beispiel des Doppelspalt-Experiments Die Schr?dinger-Gleichung f?r freie Teilchen Analogien zur Wellengleichung f?r Photonen, Klein-Gordan-Gleichung* Wellenpakete und Fouriertransformation Wellenpaket zu festem Zeitpunkt; Ausbreitung von Wellenpaketen Erwartungswerte und Varianz bei Messung von Ort und Impuls Veranschaulichung der Unsch?rferelation (Einzelspalt) Einschub: Operatoren, Skalarprodukt,Kommutatoren, Baker-Hausdorff-Identit?t, Hermitizit?t Klassisch-quantenmechanische Korrespondenz und Schr?dinger-Gleichung Allgemeine Regeln f?r die Aufstellung der Schr?dinger-Gleichung, Postulate der Quantentheorie; Ehrenfest-Theorem Kontinuit?tsgleichung f?r die Wahrscheinlichkeitsdichte Zeitunabh?ngige Schr?dinger-Gleichung station?re Zust?nde, Eigenwert-Gleichung III) Einfache Probleme Potentialstufe Potentialschwelle und Tunneleffekt Beispiele: alpha-Zerfall, Feldemission, RTM,... Potentialtopf: gebundene Zust?nde (Anwendungen und Beispiele) Periodische Potentiale Symmetrieeigenschaften und Parit?t Harmonischer Oszillator, L?sung durch Potenzreihenansatz, Hermite-Polynome Teilchen im Magnetfeld IV) Abstrakte Formulierung: Vektoren und Operatoren im Hilbertraum Vektoren im Hilbertraum, Dirac-Notation, Dualer Raum und Skalarprodukt, Cauchy-Schwarz, Dreiecksungleichung Operatoren im Hilbertraum, adjungierte und hermitesche Operatoren, Darstellung, Basiswechsel und unit?re Operatoren Eigenwertproblem hermitescher Operatoren Harmonischer Oszillator: algebraische Methode Orts- und Impulsdarstellung Messung physikalischer Gr??en, allgemeine Unsch?rfe-Relation V) Zentralkraftproblem und Drehimpuls Schr?dinger-Gleichung f?r Zentralkr?fte Drehimpuls; L?sung der winkelabh?ngigen Differentialgleichung, Eigenwerte und Eigenfunktionen (Kugelfl?chenfunktionen) Drehimpuls als Erzeugende von Drehungen* Radialgleichung f?r Zentralkraftproblem 3d-Oszillator + Wasserstoffatom Schalenstruktur, Aufbau des Periodensystems VI) Drehimpuls und Spin Vertauschungsrelationen, Drehimpulsalgebra Spin 1/2; Pauli-Matrizen; Experimenteller Nachweis; Schr?dinger-Gleichung f?r Spin im Magnetfeld; Spinmessungen Drehimpulsaddition + Clebsch-Gordon-Koeffizienten; Beispiel: l = 1, s = 1/2 Anwendungen: Spin-Bahn-Kopplung; Zeeman-Effekt; Paschen-Back-Effekt VII) N?herungsmethoden Zeitunabh?ngige St?rungstheorie: Nicht-entartete St?rungstheorie; quadratischer Stark-Effekt; St?rungstheorie f?r entartete Zust?nde; linearer Stark-Effekt beim H-Atom Variationsrechnung; Bezug zum Variationsprinzip der klassischen Mechanik*; Beispiele: Grundzustand des He-Atoms,... Bemerkungen: Der Inhaltskatalog geht davon aus, dass die Thematik zu Kapitel 1 in den experimentellen Vorlesungen schon vertieft wird. Fourierreihen und Fouriertransformation werden als bekannt vorausgesetzt wenn noch Zeit verbleibt optional: Interpretation der QM (EPR, Bell'sche Ungleichungen), Quanteninformation Literatur: F. Schwabl: Quantenmechanik I T. Flie?bach: Quantenmechanik C. Cohen-Tannoudji, B. Diu, F. Laloe: Quantum Mechanics J.J. Sakurai: Modern Quantum Mechanics S. Gasiorowicz: Quantenphysik</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/inhalte/Theorie-V-Quantenstatistik.html</field>
<field name="title">Vorlesungsinhalte - Theorie V (Quantenstatistik)</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/inhalte/Theorie-V-Quantenstatistik.html</field>
<field name="content">Vorlesungsinhalte - Theorie V (Quantenstatistik) Vorlesungsinhalte - Theorie V (Quantenstatistik) Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Theoretische Physik V - Quantenstatistik Stand Juli 2003; ? zur?ck zur ?bersicht I) Statistik Statistische Gesamtheiten Unbestimmtheit und Entropie Eta-Theorem und Ann?herung an das Gleichgewicht Statistische Gesamtheiten und Wahrscheinlichkeiten Systeme in ?u?eren Feldern Isolierte Systeme Das mikrokanonische Ensemble Beispiele: Zwei Systeme in Kontakt Zum Problem der Abz?hlung* Systeme in Kontakt mit einem W?rmebad Das kanonische Ensemble Beispiele: Quasiklassische ideale Gase, korrigierte MB-Statistik Systeme im W?rme- und Teilchen-Bad Das gro?kanonische Ensemble Quasiklassische ideale Gase II Ideale Bose- und Fermi-Gase (stark, schwach entartet, BEK) Systeme mit Wechselwirkung Einleitung Gitterschwingungen (Phononen) Virialentwicklungen Bogoljubovs Variationstheorem Magnetische Systeme: Molekularfeld-N?herung II) Anwendungen: Thermostatik Grundbegriffe und Postulate der Thermostatik Zust?nde und Zustandsgr??en Prozesse Die Postulate und Haupts?tze Gleichgewicht Zueinander konjugierte Zustandsvariable Formen von Energie Systeme in Kontakt: Gleichgewicht Gibbs-Duhem-Relation Legendre-Transf. und thermodyn. Potentiale Extremaleigenschaften der thermodyn. Potentiale Der thermodynamische Kalk?l Informationsgehalt der thermodynamischen Funktionen Maxwell- und andere Beziehungen Materialkonstanten Das ideale Gas Thermodynamische und ideale-Gas-Temperatur ?u?ere Felder Beispiele Phasen?berg?nge Charakterisierung von Phasen und ?berg?ngen Stabilit?tskriterien Beispiele Nichtgleichgewicht Nichtgleichgewicht: Boltzmann-Gleichung* Lineare Antwort: Kubo-Formel* Literatur: G. Adam, O. Hittmair: W?rmetheorie W. Nolting: Grundkurs Theoretische Physik     Vol. 6 Statistische Physik     Vol. 4 Spezielle Relativit?tstheorie + Thermodynamik H.B. Callen: Thermodynamics and Introduction to Thermostatics Ch. Kittel, H. Kroemer: Thermal Physics</field>
<field name="important">Vorlesungsinhalte - Theorie V (Quantenstatistik) Vorlesungsinhalte - Theorie V (Quantenstatistik) Universit?t Regensburg - Fakult?t Physik - Studium --- Vorlesungsinhalte Theoretische Physik V - Quantenstatistik Stand Juli 2003; ? zur?ck zur ?bersicht I) Statistik Statistische Gesamtheiten Unbestimmtheit und Entropie Eta-Theorem und Ann?herung an das Gleichgewicht Statistische Gesamtheiten und Wahrscheinlichkeiten Systeme in ?u?eren Feldern Isolierte Systeme Das mikrokanonische Ensemble Beispiele: Zwei Systeme in Kontakt Zum Problem der Abz?hlung* Systeme in Kontakt mit einem W?rmebad Das kanonische Ensemble Beispiele: Quasiklassische ideale Gase, korrigierte MB-Statistik Systeme im W?rme- und Teilchen-Bad Das gro?kanonische Ensemble Quasiklassische ideale Gase II Ideale Bose- und Fermi-Gase (stark, schwach entartet, BEK) Systeme mit Wechselwirkung Einleitung Gitterschwingungen (Phononen) Virialentwicklungen Bogoljubovs Variationstheorem Magnetische Systeme: Molekularfeld-N?herung II) Anwendungen: Thermostatik Grundbegriffe und Postulate der Thermostatik Zust?nde und Zustandsgr??en Prozesse Die Postulate und Haupts?tze Gleichgewicht Zueinander konjugierte Zustandsvariable Formen von Energie Systeme in Kontakt: Gleichgewicht Gibbs-Duhem-Relation Legendre-Transf. und thermodyn. Potentiale Extremaleigenschaften der thermodyn. Potentiale Der thermodynamische Kalk?l Informationsgehalt der thermodynamischen Funktionen Maxwell- und andere Beziehungen Materialkonstanten Das ideale Gas Thermodynamische und ideale-Gas-Temperatur ?u?ere Felder Beispiele Phasen?berg?nge Charakterisierung von Phasen und ?berg?ngen Stabilit?tskriterien Beispiele Nichtgleichgewicht Nichtgleichgewicht: Boltzmann-Gleichung* Lineare Antwort: Kubo-Formel* Literatur: G. Adam, O. Hittmair: W?rmetheorie W. Nolting: Grundkurs Theoretische Physik     Vol. 6 Statistische Physik     Vol. 4 Spezielle Relativit?tstheorie + Thermodynamik H.B. Callen: Thermodynamics and Introduction to Thermostatics Ch. Kittel, H. Kroemer: Thermal Physics</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/masterarbeit/index.phtml</field>
<field name="title">Physik ? Studium ?
Masterarbeiten</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/masterarbeit/index.phtml</field>
<field name="content">Physik ? Studium ?Masterarbeiten Physik ? Studium ?Masterarbeiten Ausschreibung von Masterarbeiten Zur Zeit liegt uns folgende Ausschreibung(en) vor: Arbeiten bei Dr. Hüttel (Juni 2014): Quanten-Nanomechanik mit Nanotubes und Supraleitern Hochfrequenz-Kryo-Nanoelektromechanik Ladungs-Quantenbits in Kohlenstoff-Nanoröhrchen Entwicklung von Nanoantennen für Licht (Nicola Paradiso, Prof. Strunk - April 14) A new class of quantum devices (Nicola Paradiso, Prof. Strunk - April 14)   Impressum Letzte Änderung: 17.06.2014 von Webmaster</field>
<field name="important">Physik ? Studium ?Masterarbeiten Physik ? Studium ?Masterarbeiten Ausschreibung von Masterarbeiten Zur Zeit liegt uns folgende Ausschreibung(en) vor: Arbeiten bei Dr. Hüttel (Juni 2014): Quanten-Nanomechanik mit Nanotubes und Supraleitern Hochfrequenz-Kryo-Nanoelektromechanik Ladungs-Quantenbits in Kohlenstoff-Nanoröhrchen Entwicklung von Nanoantennen für Licht (Nicola Paradiso, Prof. Strunk - April 14) A new class of quantum devices (Nicola Paradiso, Prof. Strunk - April 14)   Impressum Letzte Änderung: 17.06.2014 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/medphys/</field>
<field name="title">Medizinphysik</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/medphys/</field>
<field name="content">Medizinphysik Medizinphysik Physik in der Medizin Master Vertiefungsphase: Ergänzungsfach (M-VE) Fakultät für Physik Universität Regensburg   Physik in der Medizin stellt ein vielfältiges und interessantes Arbeitsgebiet für viele Physiker dar. Der Arbeitsmarkt im Bereich medizinische Technologien und Biotechnologie ist seit Jahren stetig im Wachsen. Dazu gehören insbesondere die Strahlentherapie, Nuklearmedizin, Bildgebende Verfahren in der diagnostischen Radiologie, maschinelles Lernen in der Medizinphysik, Zeitreihenanalyse in der Medizinphysik, optische Verfahren in der Medizin und die Lasermedizin. Die Fakultät für Physik bietet im Rahmen des Masterstudiums das Wahlpflichtfach Physik in der Medizin an. Diese Ausbildung umfasst Vorlesungen und Seminare. Es werden von verschiedenen Dozenten (Physiker am Universitätsklinikum) derzeit folgende Veranstaltungen angeboten. Die Bestimmungen zur Teilnahme an den Veranstaltungen und zu den Prüfungsleistungen sind dem Modulkatalog der Fakultät für Physik zu entnehmen. Weitere Information auf der Homepage der Fakultät für Physik Im Rahmen der interdisziplinären Zusammenarbeit mit der Medizinischen Fakultät kann eine Masterarbeit oder eine Doktorarbeit (Dr. rer. nat., Dr. rer. physiol.) angefertigt werden.   Title Winter Term Summer Term SWSt Lecturer   Imaging Modalities in Diagnostic Radiology I (computer tomography , sonography, x-ray) lecture (handout 2010/11)   2 Nitz Aktuelles Imaging Modalities in Diagnostic Radiology II (magnetic resonance)   lecture 2 Nitz Aktuelles Physics of Radiation Oncology lecture   2 Dobler, Strahlentherapie, UKR Aktuelles Methods and applications in radiation therapy and nuclear medicine   seminar 2 Dobler, Strahlentherapie, UKR Aktuelles Visit the department of radiation oncology - hands-on training (3 days) practical course   2 Dobler, Strahlentherapie, UKR Aktuelles Medical Data Analysis I lecture   2 Keck/Lang, Biophysik, Uni Aktuelles Medical Data Analysis II   lecture 2 Keck/Lang, Biophysik, Uni Aktuelles Medical Image Analysis seminar   2 Keck/Lang, Biophysik, Uni Aktuelles Medical time series analysis   seminar 2 Faltermeier/Keck/Lang, Biophysik, Uni Aktuelles Optical Technologies in Medicine   lecture 2 Bäumler, Dermatologie UKR Aktuelles Laser Medicine lecture   2 Bäumler, Dermatologie UKR Aktuelles   Aktualisiert:07.04.2014 Ansprechpartner: Prof. Dr. rer. nat. Wolfgang Bäumler Universitätsklinikum Regensburg (Baeumler.Wolfgang@klinik.uni-regensburg.de)  </field>
<field name="important">Medizinphysik Medizinphysik Physik in der Medizin Master Vertiefungsphase: Ergänzungsfach (M-VE) Fakultät für Physik Universität Regensburg   Physik in der Medizin stellt ein vielfältiges und interessantes Arbeitsgebiet für viele Physiker dar. Der Arbeitsmarkt im Bereich medizinische Technologien und Biotechnologie ist seit Jahren stetig im Wachsen. Dazu gehören insbesondere die Strahlentherapie, Nuklearmedizin, Bildgebende Verfahren in der diagnostischen Radiologie, maschinelles Lernen in der Medizinphysik, Zeitreihenanalyse in der Medizinphysik, optische Verfahren in der Medizin und die Lasermedizin. Die Fakultät für Physik bietet im Rahmen des Masterstudiums das Wahlpflichtfach Physik in der Medizin an. Diese Ausbildung umfasst Vorlesungen und Seminare. Es werden von verschiedenen Dozenten (Physiker am Universitätsklinikum) derzeit folgende Veranstaltungen angeboten. Die Bestimmungen zur Teilnahme an den Veranstaltungen und zu den Prüfungsleistungen sind dem Modulkatalog der Fakultät für Physik zu entnehmen. Weitere Information auf der Homepage der Fakultät für Physik Im Rahmen der interdisziplinären Zusammenarbeit mit der Medizinischen Fakultät kann eine Masterarbeit oder eine Doktorarbeit (Dr. rer. nat., Dr. rer. physiol.) angefertigt werden.   Title Winter Term Summer Term SWSt Lecturer   Imaging Modalities in Diagnostic Radiology I (computer tomography , sonography, x-ray) lecture (handout 2010/11)   2 Nitz Aktuelles Imaging Modalities in Diagnostic Radiology II (magnetic resonance)   lecture 2 Nitz Aktuelles Physics of Radiation Oncology lecture   2 Dobler, Strahlentherapie, UKR Aktuelles Methods and applications in radiation therapy and nuclear medicine   seminar 2 Dobler, Strahlentherapie, UKR Aktuelles Visit the department of radiation oncology - hands-on training (3 days) practical course   2 Dobler, Strahlentherapie, UKR Aktuelles Medical Data Analysis I lecture   2 Keck/Lang, Biophysik, Uni Aktuelles Medical Data Analysis II   lecture 2 Keck/Lang, Biophysik, Uni Aktuelles Medical Image Analysis seminar   2 Keck/Lang, Biophysik, Uni Aktuelles Medical time series analysis   seminar 2 Faltermeier/Keck/Lang, Biophysik, Uni Aktuelles Optical Technologies in Medicine   lecture 2 Bäumler, Dermatologie UKR Aktuelles Laser Medicine lecture   2 Bäumler, Dermatologie UKR Aktuelles   Aktualisiert:07.04.2014 Ansprechpartner: Prof. Dr. rer. nat. Wolfgang Bäumler Universitätsklinikum Regensburg (Baeumler.Wolfgang@klinik.uni-regensburg.de)  </field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/mentoren.phtml</field>
<field name="title">Physik ? Studium ?Studentische Mentoren</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/mentoren.phtml</field>
<field name="content">Physik ? Studium ?Studentische Mentoren Physik ? Studium ?Studentische Mentoren Studentische Mentoren Lisa Heße (Raum PHY 4.1.30; Tel. 943-2026; E-mail: Lisa.Hesse(at)physik.uni-regensburg.de; Sprechstunde dienstags 14-15 Uhr) ist unsere studentische Mentorin. Sie ist zuständig für alle Fragen rund ums Studium, insbesondere im ersten Studienjahr.   Impressum Letzte Änderung: 21.11.2011 von Webmaster</field>
<field name="important">Physik ? Studium ?Studentische Mentoren Physik ? Studium ?Studentische Mentoren Studentische Mentoren Lisa Heße (Raum PHY 4.1.30; Tel. 943-2026; E-mail: Lisa.Hesse(at)physik.uni-regensburg.de; Sprechstunde dienstags 14-15 Uhr) ist unsere studentische Mentorin. Sie ist zuständig für alle Fragen rund ums Studium, insbesondere im ersten Studienjahr.   Impressum Letzte Änderung: 21.11.2011 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/nanoscience/studium/index.phtml</field>
<field name="title">Physik ? Nanoscience ? Studieren </field>
<field name="url">http://www.physik.uni-regensburg.de/studium/nanoscience/studium/index.phtml</field>
<field name="content">Physik ? Nanoscience ? Studieren Physik ? Nanoscience ? Studieren Alles rund ums Studium Bachelor of Science - Nanoscience Master of Science - Nanoscience Zusätzliche Qualifikationen Graduiertenschule &amp; Promotion Postdocs und Gastwissenschaftler Nützliche Links Bachelor of Science (BSc.) Allgemeines Ein Beginn des Nanoscience-Studiums ist sowohl im Wintersemester als auch im Sommersemester möglich. Um den Start zu erleichtern, werden, jeweils begleitend in den ersten Wochen, vorbereitende Mathematikvorlesungen stattfinden. Genaueres hierzu finden Sie auf der Informationsseite zum Studienbeginn im Sommersemester (Link), sowie weiter unten im Beispielstundenplan. Da die Vorlesungen, wie bei allen anderen Naturwissenschaften, sehr stark aufeinander aufbauen, besuchen Sie anfangs nahezu die gleichen Vorlesungen, wie Ihre Kommilitonen aus den anderen Studiengängen der Physikfakultät. Dadurch ist es besonders in den ersten beiden Semestern relativ einfach zwischen ihnen zu wechseln und eine Entscheidung ist somit keine absolut endgültige. (Für den Wechsel in Lehramtsstudiengänge gelten einige Einschränkungen. Bitte suchen Sie dafür gegebenenfalls eine Studienberatung auf.) Ab dem zweiten Semester werden Sie verstärkt speziell ausgewählte Vorlesungen besuchen und sich recht schnell zur Quanten- und später zur Festkörperphysik hinwenden. Zusätzlich absolvieren Sie mehrere Praktika aus den Bereichen Physik und Chemie, in denen Sie ausgesuchte Versuche durchführen und im Arbeiten in einem Labor geschult werden. Dieses Wissen nützt Ihnen bei den Abschlussarbeiten und ist für den späteren Berufseinstieg sehr wichtig. Da bereits in den ersten Semestern viele Pflichtveranstaltungen absolviert werden, haben Sie dann in den höheren Semestern überdurchschnittlich viele Wahlmöglichkeiten. So können Sie sich gezielt über Wahlkurse frühzeitig nach Ihren Interessen spezialisieren, oder Sie planen schon während des Bachelorstudiums ein Auslandssemester mit ein, wofür sich insbesondere das 5. Semester anbietet. Neben unserer Fachstudienberatung hilft Ihnen dabei insbesondere organisatorisch auch das Akademische Auslandsamt der Universität Regensburg (Link). Zusätzlich stehen in der Infothek (Link) des Akademischen Auslandsamtes Erfahrungsberichte und weitere Informationsbroschüren für Sie bereit. Ziele des Studiengangs Nanoscience Die Vermittlung von soliden Grundkenntnissen in der klassischen sowie in der modernen experimentellen und theoretischen Physik und in der Mathematik. Die Kenntnis der gängigen Prinzipien und Methoden in der experimentellen und der theoretischen Physik zur Bearbeitung wissenschaftlicher Problemstellungen. Die Fähigkeit, die komplexen Materialeigenschaften auf der Nanometerskala mit ihren vielfältigen Erscheinungsformen zu verstehen und mathematisch zu modellieren. Der interdisziplinäre Anschluss an die nanowissenschaftlichen Fragestellungen der Chemie und der Biologie. Die Kenntnis der experimentellen Methoden, um Strukturen und Phänomene auf der Nanometerskala zu erfassen. Die Kenntnis der experimentellen Konzepte, um Nanostrukturen mit spezifischen Eigenschaften gezielt herzustellen. Die wissenschaftliche und soziale Kompetenz, komplexe experimentelle und theoretische Fragestellungen im Team zu planen und zu lösen. Die Fähigkeit, eigene Forschungsergebnisse überzeugend zu präsentieren und ihre Relevanz im Kontext der Aufgabenstellung richtig einzuschätzen. Unbedingt sollten Sie als angehender Student in der Fakultät Physik oder Mathematik an der dreitägigen Einführungsveranstaltung der Fachschaftsinitiative Mathe/Physik (Link) teilnehmen. Diese findet normalerweise ein paar Tage vor dem Semesterbeginn (nur zum Wintersemester) statt. Dort erhalten Sie nicht nur viele wichtige Tipps, sondern lernen auch Ihre zukünftigen Kommilitonen und Ansprechpartner kennen. Vor allem aber finden Sie in der studentischen Fachschaft FSI Mathe/Physik auch immer Hilfe zu fachlichen oder organisatorischen Problemen! Begeistern wird Sie auch der Tag der offenen Tür in der Fakultät, der regelmäßig im Sommersemester stattfindet. Über den ganzen Tag verteilt werden Führungen durch Labore, Informationsveranstaltungen und Shows angeboten. Für Informationen beachten Sie bitte die Fakultätsseite (Link) oder schicken Sie eine E-Mail an Herrn Dr. Jörg Mertins, falls Sie automatisch benachrichtigt werden möchten. IT-Kurse Beachtenswert sind auch die IT-Kurse der Fakultät, welche oft auch in den Semesterferien als Blockkurse stattfinden. Das Angebot reicht von Programmiersprachen über Datenanalyse bis hin zur Elektronik. Erzielte Leistungspunkte können angerechnet werden - und das dort erlangte Wissen findet direkt Anwendung im Studium. Von großem Nutzen sind insbesondere Kurse über wissenschaftliche Programme [Matlab, Maple, Mathematica, ...]. Wenn Sie beabsichtigen, mehrere Kurse über das Studium verteilt zu belegen, sollten Sie in Betracht ziehen eine IT-Zusatzausbildung (Infos unter zusätzliche Qualifikationen) zu absolvieren. Tipp:Die Veranstaltung "Einführung in C/C++", welche in jedem Semester angeboten wird, ist normalerweise für das fünfte Semester vorgesehen, kann aber schon vorher als Blockkurs eingebracht werden. Beispielstundenplan Um Ihnen einen Überblick über das Studium zu geben und den Einstieg zu erleichtern, haben wir einen Beispielstundenplan zusammengestellt. In den engen Spalten ganz rechts finden Sie auch einen Vorschlag für einen möglichen Studienbeginn im Sommersemester - in der Spalte 1 sind dort beispielsweise alle Vorlesungen angekreuzt, die Sie bei einem Begimm im Sommersemester im erstem Fachsemester belegen sollten. Sie können den Beispielstundenplan auch hier als PDF-File zum Ausdrucken herunterladen. Selbstverständlich können Sie Ihren Stundenplan auch individuell abweichend gestalten. Da in den ersten Studiensemestern viele Grundlagen gelegt werden müssen, haben Sie dort noch vergleichsweise wenige Wahlmöglichkeiten, später dafür umso mehr. Sie brauchen sich hier selbstverständlich nicht bereits am Studienbeginn festzulegen. Bei Fragen wenden Sie sich bitte an die Studienberatung, Herrn Dr. Mertins (Kontakt), Sie sind dort jederzeit willkommen! Studienplan B.Sc. Nanoscience (Beispiel) Fachsemester bei         Beginn zum SoSe Fachsemester Modul* Modulname* Vorlesung Semesterwochen-stunden (SWS) Leistungs-punkte (LP) 1 2 3 4 5 6 1 PHY-B-P1 Experimentalphysik Experimentalphysik I: Mechanik 4V + 2Ü 7.0 X NS-B-1 Mathematik Analysis I 4V + 2Ü 7.5 X NS-B-2 Chemie Chemie für Physiker und Nanoscience I 2V 4.0 X PHY-B-P 2 Mathematische Methoden                  und Lineare Algebra Mathematische Methoden** oder                           Lineare Algebra 4V + 2Ü 10.0 X** -- -- Biophysik: Einführung in die Biophysik 2V 3.0 X 31,5 2 PHY-B-P1 Experimentalphysik Experimentalphysik II: Elektrodynamik 4V + 2Ü 7.0 X NS-B-3 Praktikum A für Nanoscience  (Modulteile a), b)) 2,5P 5.0 X NS-B-1 Mathematik Analysis II für Physiker 4V + 2Ü 7.5 X NS-B-2 Chemie Chemie für Physiker und Nanoscience II 2V 4.0 X NS-B-4 Theoretische Physik A für Nanoscience Klassische Mechanik 4V + 2Ü 8.0 X 31.5 3 PHY-B-P1 Experimentalphysik Experimentalphysik III: Wellen &amp; Quanten 4V + 2Ü 7.0 X NS-B-3 Praktikum A für Nanoscience  (Modulteil c)) 2,5P 5.0 X NS-B-5 Nanowissenschaften Nanomaterialien I 2V + 2Ü 4.0 X NS-B-4 Theoretische Physik A für Nanoscience Quantenmechanik I ** 4V + 2Ü 8.0 X** -- -- Biochemie Teil A (der Fakultät für Biologie) 4V + 1Ü 5.0 X 29.0 4 PHY-B-P1 Experimentalphysik Experimentalphysik IV: Thermodynamik 4V + 2Ü 7.0 X NS-B-5 Nanowissenschaften Nanomaterialien II 2V + 2Ü 4.0 X NS-B-6 Theoretische Physik B für Nanoscience Elektrodynamik oder Quantenstatistik und Thermodynamik 4V + 2Ü 8.0 X NS-B-7 Vertiefende Praktika Fortgeschrittenenpraktikum  5P 5.0 X NS-B-7 Vertiefende Praktika Nanowissenschaftliches Praktikum 7P 7.0 X 31.0 5 NS-B-7 Vertiefende Praktika Programmieren in C und C++ ** 2V + 2P 5.0 X** PHY-B-P 9 Struktur der Materie II  Festkörperphysik 4V + 2Ü 7.0 X PHY-M-VF-{1-6,12-13} (s. Modulkatalog B.Sc. Physik) Vertiefungsmodul, verschiedene Angebote ** 4V + 2Ü 8.0 X**          -- -- Bioinformatik 2V 3.0 X          -- -- Anorganische Nanomaterialien 3V 4.0 X          -- -- Kolloidchemie 4V + 1Ü 4.0 X 31.0 6 PHY-M-VF-{1-6,12-13} (s. Modulkatalog B.Sc. Physik) Vertiefungsmodul, verschiedene Angebote 4V+2Ü 8.0 X          -- -- Veranstaltungen aus den Bereichen Sprache, Wirtschaft, Philosophie oder Wissenschaftsgeschichte   6.0 X NS-B-8 Bachelorarbeit ** 12.0 X** 26.0 30.0 28.5 31.5 30.0 32.0 28.0 Summe LP = 180.0 Summe LP = 180.0 * hell hinterlegt: Pflichtbereich; dunkel hinterlegt: Wahlbereich (mit unverbindlichen Vorschlägen). PHY-? siehe Modulkatalog B.Sc. Physik **Veranstaltungen im Pflicht-Bereich (hell hinterlegt), die in jedem Semester angeboten werden. Stand: SoSe 2014 Verschiedene Veranstaltungen werden (meist) zu sogenannten Modulen zusammengefasst, die in der Regel mit einer Abschlussprüfung enden. Manche Prüfungen sind mündlich, manche schriftlich. Eine ausführliche Beschreibung der Module finden Sie im Modulkatalog (PDF, zur Prüfungsordnung vom 21.05.2012). Als zusätzliches Hilfsmittel stellen wir Ihnen auch eine Modulübersicht (PDF, zur Prüfungsordnung vom 21.05.2012) zur Verfügung, die nicht ganz so bürokratisch formuliert ist. Prüfungsformalitäten werden ferner in der BSc. Nanoscience Prüfungsordnung (Link) aktuelle Version vom 21.5.2012 (PDF, ca. 0,1MB) geregelt. Deren wichtigster Bestandteil bei einem normal verlaufenden Studium ist die Liste aller notwendigen Prüfungsleistungen in §14. Nach dem Bachelorstudium empfehlen wir dringend, Ihre Ausbildung mit einem Masterstudium fortzusetzen, da dies in der Wirtschaft und Forschung die übliche Einstiegsqualifikation ist. Neben dem neu geschaffenen Masterstudiengang in Nanoscience (Informationen siehe weiter unten) besteht hier an der Universität Regensburg grundsätzlich auch die Möglichkeit, mit dem Masterstudium in Physik fortzufahren. Es stehen hierfür jeweils genügend Studienplätze zur Verfügung, Sie brauchen nicht zu befürchten, wegen mangelnder Master-Studienplätze abgewiesen zu werden. (Weitere Informationen zum Masterstudium siehe auch unten.) [nach oben] Master of Science (MSc.) (Neu seit dem Wintersemester 2013/14) Der Masterstudiengang in Nanoscience bietet Ihnen eine nahtlose Fortsetzung Ihres Studiums nach Ihrem Bachelor in Nanoscience, aber ggf. auch nach anderen Studiengängen z.B. in Physik oder Chemie (mit entsprechenden Schwerpunkten). Eingangsqualifikation ist ein fachlich "einschlägiger" Bachelorabschluss mit guten Noten. Dabei wollen wir betonen, dass die Anzahl der Studienplätze nicht über eine Quote geregelt wird, sondern wir wollen jedem/r geeigneten Studierenden die Möglichkeit zu geben, seinen/ihren Qualifikationsweg mit einem Masterstudium in Nanoscience weiter fortzuführen. Wie im Bachelorstudium ist ein Start sowohl im Wintersemester als auch im Sommersemester möglich. Quereinsteiger können wir nur bis spätestens Ende des ersten Semesters problemlos akzeptieren (bei Erfüllung endsprechender Voraussetzungen), da es ratsam ist, neben der Masterarbeit auch einen wesentlichen Teil der übrigen Veranstaltungen bei uns zu besuchen. Weitere Informationen finden Sie im Modulkatalog ( Link) und in der Prüfungsordnung ( Link) zum Master of Science - Nanoscience. [nach oben] Zusätzliche Qualifikationen IT-Zusatzausbildung Falls Sie in den Semesterferien IT-Kurse belegen, können diese auch zu der vom universitären Rechenzentrum angebotenen IT-Zusatzausbildung angerechnet werden. Diese Zusatzqualifikation besteht aus drei Modulen zu je zwei Kursen, die sie ziemlich frei wählen können. Zeitlich gesehen ist es ohne Probleme möglich diese Zusatzausbildung bereits während des Bachelorstudiums zu vollenden. Bei Interesse sollten Sie sich auf der zugehörigen Seite des Rechenzentrums (Link) informieren. Fremdsprachen Für Kurse außerhalb der Naturwissenschaft ist auch die vom Sprachzentrum angebotene studienbegleitende Fremdsprachenausbildung (Link) hervorzuheben. Zumeist finden die Kurse abends statt und lassen sich gut mit den oft vormittags stattfindenden Physikvorlesungen in Einklang bringen. Diese Veranstaltungen können dann im Wahlbereich angerechnet werden. [nach oben] Graduiertenschule &amp; Promotion Bei der Graduiertenschule "Nanoscience" handelt es sich um eine wissenschaftliche Lehr- und Forschungseinrichtung der Fakultäten für Physik und für Chemie und Pharmazie, woran ein großer Teil der experimentellen und theoretischen Arbeitsgruppen in der Festkörperphysik und einige Arbeitsgruppen in der Chemie beteiligt sind. Eine genaue Beschreibung finden Sie hier: Ordnung (PDF, Stand 5.Juli 2012) Nach einer schriftlichen Bewerbung werden Sie von uns zu einem Auswahlgespräch (ca. 10 min + 5 min Diskussion) eingeladen. Dabei würden wir gerne Einblick in Ihre Bachelor-Arbeit erhalten und uns einen Überblick über Ihre nanowissenschaftlichen Interessen verschaffen. (Das soll nicht als vorzeitige, thematische Festlegung gewertet werden.) Ihre Bewerbung richten Sie bitte an Dr. Jörg Mertins (Kontakt). Fügen Sie dieser bitte folgendes in Kopie bei: Tabellarischer Lebenslauf kurze Darstellung Ihrer Motivation ggf. Interesse an bestimmten Arbeitsgruppen Nachweise über Studienleistungen kurze Empfehlung des Betreuers der Bachelorarbeit oder eines anderen Hochschullehrers kurze Darstellung der bisherigen Studienschwerpunkte und der weiterführenden Interessen [nach oben] Postdocs und Gastwissenschaftler Postdocs und Gastwissenschaftler sind bei uns grundsätzlich gerne willkommen. Informationen und Ansprechpartner hierzu finden Sie auf der Fakultätsseite (Link) oder auf den jeweiligen Seiten der Lehrstühle (Link). [nach oben] Nützliche Links Weitere Studiengänge der Fakultät für Physik Informationen zum Studienbeginn im Sommersemester Kurzinformationen über die neuen BSc. Studiengänge der Fakultät für Physik Service-Links der Fakultät für Physik (u.a. auch Prüfungsausschüsse) Studentische Fachschaft der Mathematik- und Physik-Fakultät Forschungsprofil der Fakultät für Physik (ca. 1,8 MB) Akademisches Auslandsamt der Universität Regensburg BSc. Nanoscience Modulkatalog (zur Prüfungsordnung vom 21.05.2012, ca. 0,2MB) BSc. Nanoscience Prüfungsordnungen, aktuelle Version vom 21.5.2012 (ca. 0,1MB) BSc. Physik Prüfungsordnungen Promotionsordnung vom 18.06.09 (offizielle Webseite)   Umgezogene Links können Sie gerne hier melden. [nach oben]   Impressum Letzte Änderung: 08.04.2014 von Webmaster</field>
<field name="important">Physik ? Nanoscience ? Studieren Physik ? Nanoscience ? Studieren Alles rund ums Studium Bachelor of Science - Nanoscience Master of Science - Nanoscience Zusätzliche Qualifikationen Graduiertenschule &amp; Promotion Postdocs und Gastwissenschaftler Nützliche Links Bachelor of Science (BSc.) Allgemeines Ein Beginn des Nanoscience-Studiums ist sowohl im Wintersemester als auch im Sommersemester möglich. Um den Start zu erleichtern, werden, jeweils begleitend in den ersten Wochen, vorbereitende Mathematikvorlesungen stattfinden. Genaueres hierzu finden Sie auf der Informationsseite zum Studienbeginn im Sommersemester (Link), sowie weiter unten im Beispielstundenplan. Da die Vorlesungen, wie bei allen anderen Naturwissenschaften, sehr stark aufeinander aufbauen, besuchen Sie anfangs nahezu die gleichen Vorlesungen, wie Ihre Kommilitonen aus den anderen Studiengängen der Physikfakultät. Dadurch ist es besonders in den ersten beiden Semestern relativ einfach zwischen ihnen zu wechseln und eine Entscheidung ist somit keine absolut endgültige. (Für den Wechsel in Lehramtsstudiengänge gelten einige Einschränkungen. Bitte suchen Sie dafür gegebenenfalls eine Studienberatung auf.) Ab dem zweiten Semester werden Sie verstärkt speziell ausgewählte Vorlesungen besuchen und sich recht schnell zur Quanten- und später zur Festkörperphysik hinwenden. Zusätzlich absolvieren Sie mehrere Praktika aus den Bereichen Physik und Chemie, in denen Sie ausgesuchte Versuche durchführen und im Arbeiten in einem Labor geschult werden. Dieses Wissen nützt Ihnen bei den Abschlussarbeiten und ist für den späteren Berufseinstieg sehr wichtig. Da bereits in den ersten Semestern viele Pflichtveranstaltungen absolviert werden, haben Sie dann in den höheren Semestern überdurchschnittlich viele Wahlmöglichkeiten. So können Sie sich gezielt über Wahlkurse frühzeitig nach Ihren Interessen spezialisieren, oder Sie planen schon während des Bachelorstudiums ein Auslandssemester mit ein, wofür sich insbesondere das 5. Semester anbietet. Neben unserer Fachstudienberatung hilft Ihnen dabei insbesondere organisatorisch auch das Akademische Auslandsamt der Universität Regensburg (Link). Zusätzlich stehen in der Infothek (Link) des Akademischen Auslandsamtes Erfahrungsberichte und weitere Informationsbroschüren für Sie bereit. Ziele des Studiengangs Nanoscience Die Vermittlung von soliden Grundkenntnissen in der klassischen sowie in der modernen experimentellen und theoretischen Physik und in der Mathematik. Die Kenntnis der gängigen Prinzipien und Methoden in der experimentellen und der theoretischen Physik zur Bearbeitung wissenschaftlicher Problemstellungen. Die Fähigkeit, die komplexen Materialeigenschaften auf der Nanometerskala mit ihren vielfältigen Erscheinungsformen zu verstehen und mathematisch zu modellieren. Der interdisziplinäre Anschluss an die nanowissenschaftlichen Fragestellungen der Chemie und der Biologie. Die Kenntnis der experimentellen Methoden, um Strukturen und Phänomene auf der Nanometerskala zu erfassen. Die Kenntnis der experimentellen Konzepte, um Nanostrukturen mit spezifischen Eigenschaften gezielt herzustellen. Die wissenschaftliche und soziale Kompetenz, komplexe experimentelle und theoretische Fragestellungen im Team zu planen und zu lösen. Die Fähigkeit, eigene Forschungsergebnisse überzeugend zu präsentieren und ihre Relevanz im Kontext der Aufgabenstellung richtig einzuschätzen. Unbedingt sollten Sie als angehender Student in der Fakultät Physik oder Mathematik an der dreitägigen Einführungsveranstaltung der Fachschaftsinitiative Mathe/Physik (Link) teilnehmen. Diese findet normalerweise ein paar Tage vor dem Semesterbeginn (nur zum Wintersemester) statt. Dort erhalten Sie nicht nur viele wichtige Tipps, sondern lernen auch Ihre zukünftigen Kommilitonen und Ansprechpartner kennen. Vor allem aber finden Sie in der studentischen Fachschaft FSI Mathe/Physik auch immer Hilfe zu fachlichen oder organisatorischen Problemen! Begeistern wird Sie auch der Tag der offenen Tür in der Fakultät, der regelmäßig im Sommersemester stattfindet. Über den ganzen Tag verteilt werden Führungen durch Labore, Informationsveranstaltungen und Shows angeboten. Für Informationen beachten Sie bitte die Fakultätsseite (Link) oder schicken Sie eine E-Mail an Herrn Dr. Jörg Mertins, falls Sie automatisch benachrichtigt werden möchten. IT-Kurse Beachtenswert sind auch die IT-Kurse der Fakultät, welche oft auch in den Semesterferien als Blockkurse stattfinden. Das Angebot reicht von Programmiersprachen über Datenanalyse bis hin zur Elektronik. Erzielte Leistungspunkte können angerechnet werden - und das dort erlangte Wissen findet direkt Anwendung im Studium. Von großem Nutzen sind insbesondere Kurse über wissenschaftliche Programme [Matlab, Maple, Mathematica, ...]. Wenn Sie beabsichtigen, mehrere Kurse über das Studium verteilt zu belegen, sollten Sie in Betracht ziehen eine IT-Zusatzausbildung (Infos unter zusätzliche Qualifikationen) zu absolvieren. Tipp:Die Veranstaltung "Einführung in C/C++", welche in jedem Semester angeboten wird, ist normalerweise für das fünfte Semester vorgesehen, kann aber schon vorher als Blockkurs eingebracht werden. Beispielstundenplan Um Ihnen einen Überblick über das Studium zu geben und den Einstieg zu erleichtern, haben wir einen Beispielstundenplan zusammengestellt. In den engen Spalten ganz rechts finden Sie auch einen Vorschlag für einen möglichen Studienbeginn im Sommersemester - in der Spalte 1 sind dort beispielsweise alle Vorlesungen angekreuzt, die Sie bei einem Begimm im Sommersemester im erstem Fachsemester belegen sollten. Sie können den Beispielstundenplan auch hier als PDF-File zum Ausdrucken herunterladen. Selbstverständlich können Sie Ihren Stundenplan auch individuell abweichend gestalten. Da in den ersten Studiensemestern viele Grundlagen gelegt werden müssen, haben Sie dort noch vergleichsweise wenige Wahlmöglichkeiten, später dafür umso mehr. Sie brauchen sich hier selbstverständlich nicht bereits am Studienbeginn festzulegen. Bei Fragen wenden Sie sich bitte an die Studienberatung, Herrn Dr. Mertins (Kontakt), Sie sind dort jederzeit willkommen! Studienplan B.Sc. Nanoscience (Beispiel) Fachsemester bei         Beginn zum SoSe Fachsemester Modul* Modulname* Vorlesung Semesterwochen-stunden (SWS) Leistungs-punkte (LP) 1 2 3 4 5 6 1 PHY-B-P1 Experimentalphysik Experimentalphysik I: Mechanik 4V + 2Ü 7.0 X NS-B-1 Mathematik Analysis I 4V + 2Ü 7.5 X NS-B-2 Chemie Chemie für Physiker und Nanoscience I 2V 4.0 X PHY-B-P 2 Mathematische Methoden                  und Lineare Algebra Mathematische Methoden** oder                           Lineare Algebra 4V + 2Ü 10.0 X** -- -- Biophysik: Einführung in die Biophysik 2V 3.0 X 31,5 2 PHY-B-P1 Experimentalphysik Experimentalphysik II: Elektrodynamik 4V + 2Ü 7.0 X NS-B-3 Praktikum A für Nanoscience  (Modulteile a), b)) 2,5P 5.0 X NS-B-1 Mathematik Analysis II für Physiker 4V + 2Ü 7.5 X NS-B-2 Chemie Chemie für Physiker und Nanoscience II 2V 4.0 X NS-B-4 Theoretische Physik A für Nanoscience Klassische Mechanik 4V + 2Ü 8.0 X 31.5 3 PHY-B-P1 Experimentalphysik Experimentalphysik III: Wellen &amp; Quanten 4V + 2Ü 7.0 X NS-B-3 Praktikum A für Nanoscience  (Modulteil c)) 2,5P 5.0 X NS-B-5 Nanowissenschaften Nanomaterialien I 2V + 2Ü 4.0 X NS-B-4 Theoretische Physik A für Nanoscience Quantenmechanik I ** 4V + 2Ü 8.0 X** -- -- Biochemie Teil A (der Fakultät für Biologie) 4V + 1Ü 5.0 X 29.0 4 PHY-B-P1 Experimentalphysik Experimentalphysik IV: Thermodynamik 4V + 2Ü 7.0 X NS-B-5 Nanowissenschaften Nanomaterialien II 2V + 2Ü 4.0 X NS-B-6 Theoretische Physik B für Nanoscience Elektrodynamik oder Quantenstatistik und Thermodynamik 4V + 2Ü 8.0 X NS-B-7 Vertiefende Praktika Fortgeschrittenenpraktikum  5P 5.0 X NS-B-7 Vertiefende Praktika Nanowissenschaftliches Praktikum 7P 7.0 X 31.0 5 NS-B-7 Vertiefende Praktika Programmieren in C und C++ ** 2V + 2P 5.0 X** PHY-B-P 9 Struktur der Materie II  Festkörperphysik 4V + 2Ü 7.0 X PHY-M-VF-{1-6,12-13} (s. Modulkatalog B.Sc. Physik) Vertiefungsmodul, verschiedene Angebote ** 4V + 2Ü 8.0 X**          -- -- Bioinformatik 2V 3.0 X          -- -- Anorganische Nanomaterialien 3V 4.0 X          -- -- Kolloidchemie 4V + 1Ü 4.0 X 31.0 6 PHY-M-VF-{1-6,12-13} (s. Modulkatalog B.Sc. Physik) Vertiefungsmodul, verschiedene Angebote 4V+2Ü 8.0 X          -- -- Veranstaltungen aus den Bereichen Sprache, Wirtschaft, Philosophie oder Wissenschaftsgeschichte   6.0 X NS-B-8 Bachelorarbeit ** 12.0 X** 26.0 30.0 28.5 31.5 30.0 32.0 28.0 Summe LP = 180.0 Summe LP = 180.0 * hell hinterlegt: Pflichtbereich; dunkel hinterlegt: Wahlbereich (mit unverbindlichen Vorschlägen). PHY-? siehe Modulkatalog B.Sc. Physik **Veranstaltungen im Pflicht-Bereich (hell hinterlegt), die in jedem Semester angeboten werden. Stand: SoSe 2014 Verschiedene Veranstaltungen werden (meist) zu sogenannten Modulen zusammengefasst, die in der Regel mit einer Abschlussprüfung enden. Manche Prüfungen sind mündlich, manche schriftlich. Eine ausführliche Beschreibung der Module finden Sie im Modulkatalog (PDF, zur Prüfungsordnung vom 21.05.2012). Als zusätzliches Hilfsmittel stellen wir Ihnen auch eine Modulübersicht (PDF, zur Prüfungsordnung vom 21.05.2012) zur Verfügung, die nicht ganz so bürokratisch formuliert ist. Prüfungsformalitäten werden ferner in der BSc. Nanoscience Prüfungsordnung (Link) aktuelle Version vom 21.5.2012 (PDF, ca. 0,1MB) geregelt. Deren wichtigster Bestandteil bei einem normal verlaufenden Studium ist die Liste aller notwendigen Prüfungsleistungen in §14. Nach dem Bachelorstudium empfehlen wir dringend, Ihre Ausbildung mit einem Masterstudium fortzusetzen, da dies in der Wirtschaft und Forschung die übliche Einstiegsqualifikation ist. Neben dem neu geschaffenen Masterstudiengang in Nanoscience (Informationen siehe weiter unten) besteht hier an der Universität Regensburg grundsätzlich auch die Möglichkeit, mit dem Masterstudium in Physik fortzufahren. Es stehen hierfür jeweils genügend Studienplätze zur Verfügung, Sie brauchen nicht zu befürchten, wegen mangelnder Master-Studienplätze abgewiesen zu werden. (Weitere Informationen zum Masterstudium siehe auch unten.) [nach oben] Master of Science (MSc.) (Neu seit dem Wintersemester 2013/14) Der Masterstudiengang in Nanoscience bietet Ihnen eine nahtlose Fortsetzung Ihres Studiums nach Ihrem Bachelor in Nanoscience, aber ggf. auch nach anderen Studiengängen z.B. in Physik oder Chemie (mit entsprechenden Schwerpunkten). Eingangsqualifikation ist ein fachlich "einschlägiger" Bachelorabschluss mit guten Noten. Dabei wollen wir betonen, dass die Anzahl der Studienplätze nicht über eine Quote geregelt wird, sondern wir wollen jedem/r geeigneten Studierenden die Möglichkeit zu geben, seinen/ihren Qualifikationsweg mit einem Masterstudium in Nanoscience weiter fortzuführen. Wie im Bachelorstudium ist ein Start sowohl im Wintersemester als auch im Sommersemester möglich. Quereinsteiger können wir nur bis spätestens Ende des ersten Semesters problemlos akzeptieren (bei Erfüllung endsprechender Voraussetzungen), da es ratsam ist, neben der Masterarbeit auch einen wesentlichen Teil der übrigen Veranstaltungen bei uns zu besuchen. Weitere Informationen finden Sie im Modulkatalog ( Link) und in der Prüfungsordnung ( Link) zum Master of Science - Nanoscience. [nach oben] Zusätzliche Qualifikationen IT-Zusatzausbildung Falls Sie in den Semesterferien IT-Kurse belegen, können diese auch zu der vom universitären Rechenzentrum angebotenen IT-Zusatzausbildung angerechnet werden. Diese Zusatzqualifikation besteht aus drei Modulen zu je zwei Kursen, die sie ziemlich frei wählen können. Zeitlich gesehen ist es ohne Probleme möglich diese Zusatzausbildung bereits während des Bachelorstudiums zu vollenden. Bei Interesse sollten Sie sich auf der zugehörigen Seite des Rechenzentrums (Link) informieren. Fremdsprachen Für Kurse außerhalb der Naturwissenschaft ist auch die vom Sprachzentrum angebotene studienbegleitende Fremdsprachenausbildung (Link) hervorzuheben. Zumeist finden die Kurse abends statt und lassen sich gut mit den oft vormittags stattfindenden Physikvorlesungen in Einklang bringen. Diese Veranstaltungen können dann im Wahlbereich angerechnet werden. [nach oben] Graduiertenschule &amp; Promotion Bei der Graduiertenschule "Nanoscience" handelt es sich um eine wissenschaftliche Lehr- und Forschungseinrichtung der Fakultäten für Physik und für Chemie und Pharmazie, woran ein großer Teil der experimentellen und theoretischen Arbeitsgruppen in der Festkörperphysik und einige Arbeitsgruppen in der Chemie beteiligt sind. Eine genaue Beschreibung finden Sie hier: Ordnung (PDF, Stand 5.Juli 2012) Nach einer schriftlichen Bewerbung werden Sie von uns zu einem Auswahlgespräch (ca. 10 min + 5 min Diskussion) eingeladen. Dabei würden wir gerne Einblick in Ihre Bachelor-Arbeit erhalten und uns einen Überblick über Ihre nanowissenschaftlichen Interessen verschaffen. (Das soll nicht als vorzeitige, thematische Festlegung gewertet werden.) Ihre Bewerbung richten Sie bitte an Dr. Jörg Mertins (Kontakt). Fügen Sie dieser bitte folgendes in Kopie bei: Tabellarischer Lebenslauf kurze Darstellung Ihrer Motivation ggf. Interesse an bestimmten Arbeitsgruppen Nachweise über Studienleistungen kurze Empfehlung des Betreuers der Bachelorarbeit oder eines anderen Hochschullehrers kurze Darstellung der bisherigen Studienschwerpunkte und der weiterführenden Interessen [nach oben] Postdocs und Gastwissenschaftler Postdocs und Gastwissenschaftler sind bei uns grundsätzlich gerne willkommen. Informationen und Ansprechpartner hierzu finden Sie auf der Fakultätsseite (Link) oder auf den jeweiligen Seiten der Lehrstühle (Link). [nach oben] Nützliche Links Weitere Studiengänge der Fakultät für Physik Informationen zum Studienbeginn im Sommersemester Kurzinformationen über die neuen BSc. Studiengänge der Fakultät für Physik Service-Links der Fakultät für Physik (u.a. auch Prüfungsausschüsse) Studentische Fachschaft der Mathematik- und Physik-Fakultät Forschungsprofil der Fakultät für Physik (ca. 1,8 MB) Akademisches Auslandsamt der Universität Regensburg BSc. Nanoscience Modulkatalog (zur Prüfungsordnung vom 21.05.2012, ca. 0,2MB) BSc. Nanoscience Prüfungsordnungen, aktuelle Version vom 21.5.2012 (ca. 0,1MB) BSc. Physik Prüfungsordnungen Promotionsordnung vom 18.06.09 (offizielle Webseite)   Umgezogene Links können Sie gerne hier melden. [nach oben]   Impressum Letzte Änderung: 08.04.2014 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/physik/MasterPhys.phtml</field>
<field name="title">Physik ? Studium ? Das Masterstudium Physik</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/physik/MasterPhys.phtml</field>
<field name="content">Physik ? Studium ? Das Masterstudium Physik Physik ? Studium ? Das Masterstudium Physik Das Masterstudium Physik Der konsekutive Masterstudiengang in der Physik an der Universität Regensburg ist forschungsorientiert und richtet sich an zwei Gruppen von Absolventinnen und Absolventen: Wie bei den früheren diplomierten Physikerinnen und Physikern werden etwa 50 % der Absolvent(inn)en direkt nach dem Abschluss eine Tätigkeit in der Industrie anstreben. Innerhalb der Forschungsphase erlangen die Absolvent(inn)en des Physik-Masters neben dem fachlichen Wissen ein hohes Maß an Selbständigkeit, das sie zu gefragten Kandidaten für ein extrem breites Spektrum von Branchen macht. Die Tätigkeitsfelder reichen von den klassischen technischen Branchen über Patentanwälte und Wirtschaftberater bis hin zu Börsenanalysten. Dabei haben sich außer dem naturwissenschaftlichen Grundverständnis der Absolvent(inn)en insbesondere deren Vertrautheit mit den für die Physik spezifischen Modellierungsmethoden als extrem vielseitig anwendbar und gefragt erwiesen. Die auch im Masterstudiengang vorgesehenen nicht-physikalischen Ergänzungsfächer erlauben es, das Studium frühzeitig um die für das angestrebte Tätigkeitsfeld relevanten Spezialkenntnisse zu erweitern. Die übrigen 50 % der Absolvent(inn)en setzen ihre wissenschaftliche Ausbildung mit einer Promotion fort und bilden damit einen Eckpfeiler der Forschung, ohne den universitäre Forschung in der Bundesrepublik undenkbar ist. Das Ziel des Masterstudiengangs für diese Studenten liegt in der Optimierung der fachlichen Ausbildung der von ihnen gewählten Spezialisierungsrichtung. Daraus abgeleitet ergeben sich die folgenden konkreten Studiengangsziele: Der Erwerb vertiefter Kenntnisse in wahlweise mindestens zwei (oder vier) Spezialgebieten aus den Bereichen experimentelle und theoretische Physik der kondensierten Materie und theoretische Hochenergiephysik sowie Kenntnisse der in den gewählten Spezialgebieten angewendeten experimentellen und/oder theoretischen Prinzipien und Methoden. Die Fähigkeit, wissenschaftliche Problemstellungen aus den zwei (oder vier) Spezialgebieten unter Anleitung zu bearbeiten. Grundkenntnisse und die Kenntnis der gängigen wissenschaftlichen Methoden aus einem außerphysikalischen Fach, falls obige Kenntnisse und Fähigkeiten nur in zwei Spezialgebieten aus der Physik nachgewiesen wurden. Die Fähigkeit, ein definiertes Teilproblem aus der aktuellen Forschung im Bereich der experimentellen oder der theoretischen Physik unter Anleitung selbstständig zu bearbeiten und die wissenschaftlichen Resultate im Kontext der Aufgabenstellung richtig einzuordnen. Problemlösungsstrategien für wissenschaftliche Fragestellungen eigenständig und auch im Team zu entwickeln. Korrektes Verfassen wissenschaftlicher Texte und Präsentation wissenschaftlicher Ergebnisse. Aufgrund der bestandenen Masterprüfung verleiht die naturwissenschaftliche Fakultät II ? Physik der Universität Regensburg den Akademischen Grad "Master of Science" (M.Sc.). Die Regelstudienzeit für das Masterstudium beträgt vier Semester. Der Umfang der für das Masterstudium erforderlichen Studien- und Prüfungsleistungen beträgt einschließlich der Anfertigung der Masterarbeit 120 LP. Zugang zum Masterstudiengang erhält, wer die folgenden Voraussetzungen erfüllt: Nachweis der allgemeinen oder fachgebundenen Hochschulreife im Sinne der Qualifikationsverordnung bzw. der Bewertungsvorschläge der Zentralstelle für ausländisches Bildungswesen Nachweis eines Abschlusses im Bachelor-Studiengang Physik oder eines vergleichbaren ersten berufsqualifizierenden Abschlusses mit mindestens der Note "gut", oder wenn eine fachliche Eignungsprüfung nach Maßgabe der der Prüfungsordnung erfolgreich abgelegt wurde. Weiterhin müssen mindestens 16 LP in Bereich Vertiefung Physik des Bachelorstudiums oder äquivalente Leistungen nachgewiesen werden. Waren diese Module nicht Bestandteil des Bachelor-Studiengangs, so kann eine vorläufige Einschreibung erfolgen. Die endgültige Einschreibung erfordert den Nachweis dieser Module spätestens am Ende des zweiten Semesters des Masterstudiums. Entscheidungen zur Vergleichbarkeit der Abschlüsse trifft der Prüfungsausschuss im Verfahren der Eignungsfeststellung. Das Masterstudium gliedert sich in eine auf dem Bachelorstudium aufbauende Vertiefungsphase, welche die ersten zwei Semester umfasst, und eine Forschungsphase. In der Forschungsphase wird neben der weiteren fachlichen Spezialisierung die Masterarbeit angefertigt. In der Vertiefungsphase sind Module im Gesamtumfang von mindestens 60 LP aus dem Angebot des Masterstudiums im Fach Physik nachzuweisen. Diese umfassen die folgenden Bereiche: Fachmodule zu den Spezialgebieten in experimenteller, theoretischer und angewandter Physik, z.Z.: Oberflächenphysik Infra-/ Terahertzphysik Laserphysik Halbleiterphysik Tieftemperaturphysik Magnetismus Nanostrukturphysik Computational Physics Quantenelektrodynamik Quantenchromodynamik Quantenfeldtheorie Quantentheorie der kondensierten Materie I Quantentheorie der kondensierten Materie II Nichtlinearität in klassischer und Quantenphysik Ergänzungsfächer aus dem Masterprogramm der Fakultät für Physik oder anderer Fakultäten: Naturwissenschaftliche Informatik Physik in der Medizin Fortgeschrittene Mathematik Wissenschaftsgeschichte Wirtschaftsphysik Bioinformatik Biophysik Sonstige Veranstaltungen, die entweder der Vertiefung bestimmter Themen, oder dem Erwerb von fachübergreifenden Qualifikationen dienen. Unter anderem werden jedes Semester einige Spezialvorlesungen angeboten, die ein möglichst breites Themenspektrum abdecken. Thema und Inhalt dieser Vorlesungen wird sich von Jahr zu Jahr unterscheiden. Spezialvorlesungen werden sowohl auf einem fortgeschrittenen Niveau - hierbei dienen sie als Ergänzung zu den Fachmodulen - als auch auf einführendem Niveau angeboten. Letztere dienen vor allem dazu, einen möglichst umfassenden Überblick über physikalische und interdisziplinäre Themen zu erhalten. Spezialvorlesung Projekt-Praktika Ausbildungsseminar Technische Datenverarbeitung Computer- und Microcontrollertechnik Datenbanken und das Internet Programmierung portabler graphischer Applikationen Elektronik PC-Messtechnik CAD in der mechanischen Konstruktion IT und Medien Für die Vertiefungsphase bestehen folgende alternative Mindestanforderungen: Es müssen entweder 4 Fachmodule oder 2 Fachmodule und ein Ergänzungsfach nachgewiesen werden. Die Gestaltung der Forschungsphase des Masterstudiums richtet sich nach den Empfehlungen der Konferenz der Fachbereiche Physik (KFP) und der Deutschen Physikalischen Gesellschaft (DPG), die von der überwiegenden Mehrheit der Physikfachbereiche in Deutschland umgesetzt wurden. Danach umfasst die Forschungsphase des Masterstudiengangs 60 LP und gliedert sich in die zwei folgenden inhaltlich zusammenhängenden Abschnitte: Fachliche Spezialisierung (30 LP): In diesem Modul sollen sich die Studierenden unter Anleitung eines Betreuers weitgehend selbstständig in den Themenkreis der Masterarbeit einarbeiten. Sie eignen sich die für die Bearbeitung der Arbeit notwendigen experimentellen bzw. theoretischen Methoden an. Die Spezialisierungsphase ist mit einem Seminarvortrag abzuschließen. Masterarbeit (30 LP): Diese ist eine selbständige wissenschaftliche Arbeit. Sie soll zeigen, dass der Kandidat in der Lage ist, ein Problem aus einem Gebiet der Physik nach wissenschaftlichen Methoden zu bearbeiten und seine Ergebnisse in angemessener Weise sachlich einwandfrei und verständlich darzulegen. Ein typischer Master-Studienplan Sem. Veranstaltung SWSt ? SWSt M1 Fachmodule 10 22 Spezialvorlesungen 8 Projekt-Praktika 8 M2 Ergänzungsfach 10 22 Spezialvorlesungen 8 Projekt-Praktika 8 M3 Spezialvorlesungen 4 Fachliche Spezialisierung M4 Masterarbeit ? zum Seitenanfang Autor: Christoph Strunk; letztes Update: 10.10.2013 Christian Schüller / FW   Impressum Letzte Änderung: 10.03.2014 von Webmaster</field>
<field name="important">Physik ? Studium ? Das Masterstudium Physik Physik ? Studium ? Das Masterstudium Physik Das Masterstudium Physik Der konsekutive Masterstudiengang in der Physik an der Universität Regensburg ist forschungsorientiert und richtet sich an zwei Gruppen von Absolventinnen und Absolventen: Wie bei den früheren diplomierten Physikerinnen und Physikern werden etwa 50 % der Absolvent(inn)en direkt nach dem Abschluss eine Tätigkeit in der Industrie anstreben. Innerhalb der Forschungsphase erlangen die Absolvent(inn)en des Physik-Masters neben dem fachlichen Wissen ein hohes Maß an Selbständigkeit, das sie zu gefragten Kandidaten für ein extrem breites Spektrum von Branchen macht. Die Tätigkeitsfelder reichen von den klassischen technischen Branchen über Patentanwälte und Wirtschaftberater bis hin zu Börsenanalysten. Dabei haben sich außer dem naturwissenschaftlichen Grundverständnis der Absolvent(inn)en insbesondere deren Vertrautheit mit den für die Physik spezifischen Modellierungsmethoden als extrem vielseitig anwendbar und gefragt erwiesen. Die auch im Masterstudiengang vorgesehenen nicht-physikalischen Ergänzungsfächer erlauben es, das Studium frühzeitig um die für das angestrebte Tätigkeitsfeld relevanten Spezialkenntnisse zu erweitern. Die übrigen 50 % der Absolvent(inn)en setzen ihre wissenschaftliche Ausbildung mit einer Promotion fort und bilden damit einen Eckpfeiler der Forschung, ohne den universitäre Forschung in der Bundesrepublik undenkbar ist. Das Ziel des Masterstudiengangs für diese Studenten liegt in der Optimierung der fachlichen Ausbildung der von ihnen gewählten Spezialisierungsrichtung. Daraus abgeleitet ergeben sich die folgenden konkreten Studiengangsziele: Der Erwerb vertiefter Kenntnisse in wahlweise mindestens zwei (oder vier) Spezialgebieten aus den Bereichen experimentelle und theoretische Physik der kondensierten Materie und theoretische Hochenergiephysik sowie Kenntnisse der in den gewählten Spezialgebieten angewendeten experimentellen und/oder theoretischen Prinzipien und Methoden. Die Fähigkeit, wissenschaftliche Problemstellungen aus den zwei (oder vier) Spezialgebieten unter Anleitung zu bearbeiten. Grundkenntnisse und die Kenntnis der gängigen wissenschaftlichen Methoden aus einem außerphysikalischen Fach, falls obige Kenntnisse und Fähigkeiten nur in zwei Spezialgebieten aus der Physik nachgewiesen wurden. Die Fähigkeit, ein definiertes Teilproblem aus der aktuellen Forschung im Bereich der experimentellen oder der theoretischen Physik unter Anleitung selbstständig zu bearbeiten und die wissenschaftlichen Resultate im Kontext der Aufgabenstellung richtig einzuordnen. Problemlösungsstrategien für wissenschaftliche Fragestellungen eigenständig und auch im Team zu entwickeln. Korrektes Verfassen wissenschaftlicher Texte und Präsentation wissenschaftlicher Ergebnisse. Aufgrund der bestandenen Masterprüfung verleiht die naturwissenschaftliche Fakultät II ? Physik der Universität Regensburg den Akademischen Grad "Master of Science" (M.Sc.). Die Regelstudienzeit für das Masterstudium beträgt vier Semester. Der Umfang der für das Masterstudium erforderlichen Studien- und Prüfungsleistungen beträgt einschließlich der Anfertigung der Masterarbeit 120 LP. Zugang zum Masterstudiengang erhält, wer die folgenden Voraussetzungen erfüllt: Nachweis der allgemeinen oder fachgebundenen Hochschulreife im Sinne der Qualifikationsverordnung bzw. der Bewertungsvorschläge der Zentralstelle für ausländisches Bildungswesen Nachweis eines Abschlusses im Bachelor-Studiengang Physik oder eines vergleichbaren ersten berufsqualifizierenden Abschlusses mit mindestens der Note "gut", oder wenn eine fachliche Eignungsprüfung nach Maßgabe der der Prüfungsordnung erfolgreich abgelegt wurde. Weiterhin müssen mindestens 16 LP in Bereich Vertiefung Physik des Bachelorstudiums oder äquivalente Leistungen nachgewiesen werden. Waren diese Module nicht Bestandteil des Bachelor-Studiengangs, so kann eine vorläufige Einschreibung erfolgen. Die endgültige Einschreibung erfordert den Nachweis dieser Module spätestens am Ende des zweiten Semesters des Masterstudiums. Entscheidungen zur Vergleichbarkeit der Abschlüsse trifft der Prüfungsausschuss im Verfahren der Eignungsfeststellung. Das Masterstudium gliedert sich in eine auf dem Bachelorstudium aufbauende Vertiefungsphase, welche die ersten zwei Semester umfasst, und eine Forschungsphase. In der Forschungsphase wird neben der weiteren fachlichen Spezialisierung die Masterarbeit angefertigt. In der Vertiefungsphase sind Module im Gesamtumfang von mindestens 60 LP aus dem Angebot des Masterstudiums im Fach Physik nachzuweisen. Diese umfassen die folgenden Bereiche: Fachmodule zu den Spezialgebieten in experimenteller, theoretischer und angewandter Physik, z.Z.: Oberflächenphysik Infra-/ Terahertzphysik Laserphysik Halbleiterphysik Tieftemperaturphysik Magnetismus Nanostrukturphysik Computational Physics Quantenelektrodynamik Quantenchromodynamik Quantenfeldtheorie Quantentheorie der kondensierten Materie I Quantentheorie der kondensierten Materie II Nichtlinearität in klassischer und Quantenphysik Ergänzungsfächer aus dem Masterprogramm der Fakultät für Physik oder anderer Fakultäten: Naturwissenschaftliche Informatik Physik in der Medizin Fortgeschrittene Mathematik Wissenschaftsgeschichte Wirtschaftsphysik Bioinformatik Biophysik Sonstige Veranstaltungen, die entweder der Vertiefung bestimmter Themen, oder dem Erwerb von fachübergreifenden Qualifikationen dienen. Unter anderem werden jedes Semester einige Spezialvorlesungen angeboten, die ein möglichst breites Themenspektrum abdecken. Thema und Inhalt dieser Vorlesungen wird sich von Jahr zu Jahr unterscheiden. Spezialvorlesungen werden sowohl auf einem fortgeschrittenen Niveau - hierbei dienen sie als Ergänzung zu den Fachmodulen - als auch auf einführendem Niveau angeboten. Letztere dienen vor allem dazu, einen möglichst umfassenden Überblick über physikalische und interdisziplinäre Themen zu erhalten. Spezialvorlesung Projekt-Praktika Ausbildungsseminar Technische Datenverarbeitung Computer- und Microcontrollertechnik Datenbanken und das Internet Programmierung portabler graphischer Applikationen Elektronik PC-Messtechnik CAD in der mechanischen Konstruktion IT und Medien Für die Vertiefungsphase bestehen folgende alternative Mindestanforderungen: Es müssen entweder 4 Fachmodule oder 2 Fachmodule und ein Ergänzungsfach nachgewiesen werden. Die Gestaltung der Forschungsphase des Masterstudiums richtet sich nach den Empfehlungen der Konferenz der Fachbereiche Physik (KFP) und der Deutschen Physikalischen Gesellschaft (DPG), die von der überwiegenden Mehrheit der Physikfachbereiche in Deutschland umgesetzt wurden. Danach umfasst die Forschungsphase des Masterstudiengangs 60 LP und gliedert sich in die zwei folgenden inhaltlich zusammenhängenden Abschnitte: Fachliche Spezialisierung (30 LP): In diesem Modul sollen sich die Studierenden unter Anleitung eines Betreuers weitgehend selbstständig in den Themenkreis der Masterarbeit einarbeiten. Sie eignen sich die für die Bearbeitung der Arbeit notwendigen experimentellen bzw. theoretischen Methoden an. Die Spezialisierungsphase ist mit einem Seminarvortrag abzuschließen. Masterarbeit (30 LP): Diese ist eine selbständige wissenschaftliche Arbeit. Sie soll zeigen, dass der Kandidat in der Lage ist, ein Problem aus einem Gebiet der Physik nach wissenschaftlichen Methoden zu bearbeiten und seine Ergebnisse in angemessener Weise sachlich einwandfrei und verständlich darzulegen. Ein typischer Master-Studienplan Sem. Veranstaltung SWSt ? SWSt M1 Fachmodule 10 22 Spezialvorlesungen 8 Projekt-Praktika 8 M2 Ergänzungsfach 10 22 Spezialvorlesungen 8 Projekt-Praktika 8 M3 Spezialvorlesungen 4 Fachliche Spezialisierung M4 Masterarbeit ? zum Seitenanfang Autor: Christoph Strunk; letztes Update: 10.10.2013 Christian Schüller / FW   Impressum Letzte Änderung: 10.03.2014 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/physik/MasterPhysE.phtml</field>
<field name="title">Physik ? Studium ? Das Masterstudium Physik</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/physik/MasterPhysE.phtml</field>
<field name="content">Physik ? Studium ? Das Masterstudium Physik Physik ? Studium ? Das Masterstudium Physik Master of Science in Physics The main focus of the consecutive Master?s degree course in physics at Universität Regensburg is on research. The degree aims at two different kinds of graduates: About 50 % of Master graduates will pursue a career in industry directly after graduation. During the research phase of the Master?s program, students will not only gain professional knowledge in their field but also a high level of autonomy. They are therefore highly sought after by employers across an extremely broad range of disciplines. Their areas of activity include the classic technical industries, but physicists also work as patent attorneys, auditors or analysts at the stock market. In conjunction with their scientific approach, the graduates? familiarity with modeling methods specific to physics have proved to be extremely versatile and in demand. The additional non-physics courses also offered in the Master?s program enable students to gain the special knowledge that is relevant to their intended career path at an early stage. The other 50 % of graduates will continue their scientific education by pursuing a Ph.D. in Physics. The work of these graduates will thus represent a cornerstone of university research in Germany, which is absolutely vital. For these students, the objective of the Master?s degree is the optimization of their training in the elected area of specialization. The following specific course objectives result from these career options: The program aims to provide students with in-depth knowledge in at least two (or four ? as desired) areas of specialization from experimental and theoretical physics of condensed matter and theoretical high-energy physics as well as knowledge and understanding of experimental and/or theoretical principles and methods applied in the chosen areas. the ability to investigate scientific problems in the two (or four) areas of specialization under supervision basic knowledge as well as knowledge and understanding of the current scientific methods of a subject other than physics, if the knowledge and skills listed above have been acquired in only two areas of specialization in physics. the ability to investigate a defined single problem in current research in the field of experimental or theoretical physics autonomously under supervision and to interpret the scientific results correctly within the context of the task. the capability to develop problem-solving strategies for scientific problems both autonomously and as a team member the skill to write scientific texts correctly and to present scientific results. Master?s students having passed the exam will receive the academic degree "Master of Science" (M.Sc.) by the Faculty of Physics of Universität Regensburg. The standard time for completing the Master?s degree is four semesters. The total credit requirement for the Master?s program is 120 credits, including the Master?s thesis. You will find application details on the overview page. The Master?s program consists of two parts: a consolidation phase during the first two semesters building upon the Bachelor?s program, and a research phase. The research phase includes both further scientific specialization courses and the Master?s thesis. During the consolidation phase students must complete modules from the Master?s program in Physics worth 60 CP or more. The courses comprise the following areas: Subject modules belonging to the areas of specialization in experimental, theoretical and applied physics, and are currently: Surface physics Infrared / Terahertz physics Laser physics Semiconductor physics Low temperature physics Magnetism Physics of nanostructures Computational Physics Quantum electrodynamics Quantum chromodynamics Quantum field theory Quantum theory of condensed matter I Quantum theory of condensed matter II Non-linearity in classical and quantum physics Complementary subjects chosen from the Master?s program in Physics or from courses offered by other faculties: Science Informatics Physics in medicine Advanced mathematics History of science Economic physics Bioinformatics Biophysics Further courses providing in-depth study of certain topics or interdisciplinary qualifications. Each semester, some special lectures are offered which cover a broad range of subjects. The topics and contents of these lectures will be different each year. Special lectures are both held at an advanced level ? in that case they complement the subject modules ? or as introductory courses. These introductions will give a broad overview on physical and interdisciplinary subjects. Special Topics Lecture Short Research projects Training Seminar Introduction to control engineering, data acquisition and digital signal processing Computer and microcontroller technology Databases and internet Programming of portable graphics applications Electronics Computer-based Measurements with LabView Computer-aided Mechanical Design IT and Media Linux: Basics, Concepts, Applications As to the consolidation phase, the following minimum (alternative) requirements apply: Students must complete either four subject modules or two subject modules and one complementary subject The design of the research phase of the Master?s program follows the recommendations of the Konferenz der Fachbereiche Physik (KFP, Conference of the Physics Departments) and of the Deutsche Physikalische Gesellschaft (DPG, German Physical Society) which have been put into practice by the great majority of the German physics departments. According to these recommendations, the credit requirement for the research phase of the Master?s program is 60 CP. The phase is divided into the following two blocks which complement each other in regards to their content: Specialization (30 CP): While completing this module, students should become acquainted with the subject area of their Master?s thesis under supervision but largely self-directed. They learn experimental or theoretical methods that are essential for their thesis. All students must conclude the specialization phase with a presentation. Master?s thesis (30 CP): The Master?s thesis is an independent academic work. It should demonstrate the candidate?s ability to investigate a problem in physics according to scientific methods and to present factually correct results in an appropriate and comprehensible manner. A typical timetable for Master students Sem. Course hrs/wk ? hrs/wk M1 Subject modules 10 22 Special lectures 8 Short research projects 8 M2 Complementary subject 10 22 Special lectures 8 Short research projects 8 M3 Special lectures 4 Specialization M4 Master?s thesis ? Top of page Author: Christoph Strunk; thanks to Annette.Eichinger for the translation; last update: Christian Schüller / FW   Legal Notice Last modified: 10 th Mar, 2014 by Webmaster</field>
<field name="important">Physik ? Studium ? Das Masterstudium Physik Physik ? Studium ? Das Masterstudium Physik Master of Science in Physics The main focus of the consecutive Master?s degree course in physics at Universität Regensburg is on research. The degree aims at two different kinds of graduates: About 50 % of Master graduates will pursue a career in industry directly after graduation. During the research phase of the Master?s program, students will not only gain professional knowledge in their field but also a high level of autonomy. They are therefore highly sought after by employers across an extremely broad range of disciplines. Their areas of activity include the classic technical industries, but physicists also work as patent attorneys, auditors or analysts at the stock market. In conjunction with their scientific approach, the graduates? familiarity with modeling methods specific to physics have proved to be extremely versatile and in demand. The additional non-physics courses also offered in the Master?s program enable students to gain the special knowledge that is relevant to their intended career path at an early stage. The other 50 % of graduates will continue their scientific education by pursuing a Ph.D. in Physics. The work of these graduates will thus represent a cornerstone of university research in Germany, which is absolutely vital. For these students, the objective of the Master?s degree is the optimization of their training in the elected area of specialization. The following specific course objectives result from these career options: The program aims to provide students with in-depth knowledge in at least two (or four ? as desired) areas of specialization from experimental and theoretical physics of condensed matter and theoretical high-energy physics as well as knowledge and understanding of experimental and/or theoretical principles and methods applied in the chosen areas. the ability to investigate scientific problems in the two (or four) areas of specialization under supervision basic knowledge as well as knowledge and understanding of the current scientific methods of a subject other than physics, if the knowledge and skills listed above have been acquired in only two areas of specialization in physics. the ability to investigate a defined single problem in current research in the field of experimental or theoretical physics autonomously under supervision and to interpret the scientific results correctly within the context of the task. the capability to develop problem-solving strategies for scientific problems both autonomously and as a team member the skill to write scientific texts correctly and to present scientific results. Master?s students having passed the exam will receive the academic degree "Master of Science" (M.Sc.) by the Faculty of Physics of Universität Regensburg. The standard time for completing the Master?s degree is four semesters. The total credit requirement for the Master?s program is 120 credits, including the Master?s thesis. You will find application details on the overview page. The Master?s program consists of two parts: a consolidation phase during the first two semesters building upon the Bachelor?s program, and a research phase. The research phase includes both further scientific specialization courses and the Master?s thesis. During the consolidation phase students must complete modules from the Master?s program in Physics worth 60 CP or more. The courses comprise the following areas: Subject modules belonging to the areas of specialization in experimental, theoretical and applied physics, and are currently: Surface physics Infrared / Terahertz physics Laser physics Semiconductor physics Low temperature physics Magnetism Physics of nanostructures Computational Physics Quantum electrodynamics Quantum chromodynamics Quantum field theory Quantum theory of condensed matter I Quantum theory of condensed matter II Non-linearity in classical and quantum physics Complementary subjects chosen from the Master?s program in Physics or from courses offered by other faculties: Science Informatics Physics in medicine Advanced mathematics History of science Economic physics Bioinformatics Biophysics Further courses providing in-depth study of certain topics or interdisciplinary qualifications. Each semester, some special lectures are offered which cover a broad range of subjects. The topics and contents of these lectures will be different each year. Special lectures are both held at an advanced level ? in that case they complement the subject modules ? or as introductory courses. These introductions will give a broad overview on physical and interdisciplinary subjects. Special Topics Lecture Short Research projects Training Seminar Introduction to control engineering, data acquisition and digital signal processing Computer and microcontroller technology Databases and internet Programming of portable graphics applications Electronics Computer-based Measurements with LabView Computer-aided Mechanical Design IT and Media Linux: Basics, Concepts, Applications As to the consolidation phase, the following minimum (alternative) requirements apply: Students must complete either four subject modules or two subject modules and one complementary subject The design of the research phase of the Master?s program follows the recommendations of the Konferenz der Fachbereiche Physik (KFP, Conference of the Physics Departments) and of the Deutsche Physikalische Gesellschaft (DPG, German Physical Society) which have been put into practice by the great majority of the German physics departments. According to these recommendations, the credit requirement for the research phase of the Master?s program is 60 CP. The phase is divided into the following two blocks which complement each other in regards to their content: Specialization (30 CP): While completing this module, students should become acquainted with the subject area of their Master?s thesis under supervision but largely self-directed. They learn experimental or theoretical methods that are essential for their thesis. All students must conclude the specialization phase with a presentation. Master?s thesis (30 CP): The Master?s thesis is an independent academic work. It should demonstrate the candidate?s ability to investigate a problem in physics according to scientific methods and to present factually correct results in an appropriate and comprehensible manner. A typical timetable for Master students Sem. Course hrs/wk ? hrs/wk M1 Subject modules 10 22 Special lectures 8 Short research projects 8 M2 Complementary subject 10 22 Special lectures 8 Short research projects 8 M3 Special lectures 4 Specialization M4 Master?s thesis ? Top of page Author: Christoph Strunk; thanks to Annette.Eichinger for the translation; last update: Christian Schüller / FW   Legal Notice Last modified: 10 th Mar, 2014 by Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/physik/beschleunigt.phtml</field>
<field name="title">Physik ? Studium ?
Sonderregelungen für den beschleunigten Studiengang</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/physik/beschleunigt.phtml</field>
<field name="content">Physik ? Studium ?Sonderregelungen für den beschleunigten Studiengang Physik ? Studium ?Sonderregelungen für den beschleunigten Studiengang Studienordnung für die konsekutiven Bachelor- und Masterstudiengänge Physik an der Universität Regensburg, Teil 3     ? Webseite aus Erlangen Sonderregelungen für den beschleunigten Studiengang Stand 18.1.2010 A. Schäfer Die Universitäten Erlangen-Nürnberg und Regensburg bieten ein beschleunigtes Verfahren zur Erlangung des Bachelor- und Masterabschlusses an. Ziel dieser Verfahrens ist es, beide Abschlüsse innerhalb von acht Semestern zu erlangen. Das beschleunigte Verfahren unterscheidet sich erst ab dem 4. Fachsemester (bzw. dem 3. Fachsemester bei Studienbeginn im Sommersemester) von dem Normalverfahren. Bewerbungen auf Zulassung zum beschleungten Verfahrens sind für das kommende Sommersemester jeweils bis zum 1. März bei dem Studiendekan zu stellen. Da die Minimaldauer von Bachelor- und Masterstudiengängen festgelegt ist (sechs bzw. vier Semester), ist ein beschleunigter Studienverlauf nur dadurch möglich, dass das letzte Jahr des Bachelorstudiengangs und das erste Jahr des Masterstudiengangs erlappen. Dies ist möglich, da es gestattet ist, Kandidaten für ein Jahr auf Probe in den Masterstudiengang Physik aufzunehmen, so dass die Bachelorurkunde erst zum dritten Semester des Masterstudiengangs vorliegen muss. Die Module des beschleunigten Bachelor- und Masterstudiengangs mit den jeweiligen Leistungspunkten sind: BACHELOR: Semester 1-3: Kein wesenlicher Unterschied zum normalen Bachelor Physik Module Leistungspunkte   Teil der Bachelornote Experimentalphysik A 14 LP ja Theoretische Physik I 16 LP ja Praktikum A 8 LP ja Praktikum B 8 LP ja Mathematik 30 LP ja Vorbereitungskurs Elitestudium = Experimentalphysik III: Wellen und Quanten 7 LP ja Ergänzungsfach 16 LP ja Zwischensumme 99 LP Semester 4-6: Module Leistungspunkte    Teil der Bachelornote Integrierte Kurse I-III, 3 * 16 LP = 48 LP ja ein Fachmodul 8 LP ja ein Bachelorarbeit 12 LP ja Fortgeschrittenenpraktikum 8 LP nein Elite-Seminare und Seminarwochen im 4. Semester 3 LP nein Wahlbereich 2 LP nein Zwischensumme 81 LP Summe Bachelor: 180 LP MASTER: Der Master wird im 5.-8. Semester stattfinden, d.h. Sie werden bereits zum 5. Semester auf Probe in den Masterstudiengang aufgenommen werden. Bachelor und Master überlappen ein Jahr lang. Module Leistungspunkte  Teil der Masternote  drei Fachmodule und drei Projekte hierzu 3*(8+6)= 42 LP ja Elite-Seminare im Semester 5-8 4*3= 12 LP nein Wahlbereich 6 LP nein Masterarbeit + Spezialisierung + Methodenkenntnis 60 LP ja Summe Master 120 LP Der Kern des beschleunigten Studiums sind somit die Integrierten Kurse und die vier Fachmodule und zugehörigen Projekte, von denen eines umfangreicher ist und als Bachelorarbeit gewertet wird. Sie sollten Ihr erstes Projekt nach Möglichkeit bereits vor Beginn des 5. Semesters abgeschlossen haben.   Impressum Letzte Änderung: 22.05.2013 von Webmaster</field>
<field name="important">Physik ? Studium ?Sonderregelungen für den beschleunigten Studiengang Physik ? Studium ?Sonderregelungen für den beschleunigten Studiengang Studienordnung für die konsekutiven Bachelor- und Masterstudiengänge Physik an der Universität Regensburg, Teil 3     ? Webseite aus Erlangen Sonderregelungen für den beschleunigten Studiengang Stand 18.1.2010 A. Schäfer Die Universitäten Erlangen-Nürnberg und Regensburg bieten ein beschleunigtes Verfahren zur Erlangung des Bachelor- und Masterabschlusses an. Ziel dieser Verfahrens ist es, beide Abschlüsse innerhalb von acht Semestern zu erlangen. Das beschleunigte Verfahren unterscheidet sich erst ab dem 4. Fachsemester (bzw. dem 3. Fachsemester bei Studienbeginn im Sommersemester) von dem Normalverfahren. Bewerbungen auf Zulassung zum beschleungten Verfahrens sind für das kommende Sommersemester jeweils bis zum 1. März bei dem Studiendekan zu stellen. Da die Minimaldauer von Bachelor- und Masterstudiengängen festgelegt ist (sechs bzw. vier Semester), ist ein beschleunigter Studienverlauf nur dadurch möglich, dass das letzte Jahr des Bachelorstudiengangs und das erste Jahr des Masterstudiengangs erlappen. Dies ist möglich, da es gestattet ist, Kandidaten für ein Jahr auf Probe in den Masterstudiengang Physik aufzunehmen, so dass die Bachelorurkunde erst zum dritten Semester des Masterstudiengangs vorliegen muss. Die Module des beschleunigten Bachelor- und Masterstudiengangs mit den jeweiligen Leistungspunkten sind: BACHELOR: Semester 1-3: Kein wesenlicher Unterschied zum normalen Bachelor Physik Module Leistungspunkte   Teil der Bachelornote Experimentalphysik A 14 LP ja Theoretische Physik I 16 LP ja Praktikum A 8 LP ja Praktikum B 8 LP ja Mathematik 30 LP ja Vorbereitungskurs Elitestudium = Experimentalphysik III: Wellen und Quanten 7 LP ja Ergänzungsfach 16 LP ja Zwischensumme 99 LP Semester 4-6: Module Leistungspunkte    Teil der Bachelornote Integrierte Kurse I-III, 3 * 16 LP = 48 LP ja ein Fachmodul 8 LP ja ein Bachelorarbeit 12 LP ja Fortgeschrittenenpraktikum 8 LP nein Elite-Seminare und Seminarwochen im 4. Semester 3 LP nein Wahlbereich 2 LP nein Zwischensumme 81 LP Summe Bachelor: 180 LP MASTER: Der Master wird im 5.-8. Semester stattfinden, d.h. Sie werden bereits zum 5. Semester auf Probe in den Masterstudiengang aufgenommen werden. Bachelor und Master überlappen ein Jahr lang. Module Leistungspunkte  Teil der Masternote  drei Fachmodule und drei Projekte hierzu 3*(8+6)= 42 LP ja Elite-Seminare im Semester 5-8 4*3= 12 LP nein Wahlbereich 6 LP nein Masterarbeit + Spezialisierung + Methodenkenntnis 60 LP ja Summe Master 120 LP Der Kern des beschleunigten Studiums sind somit die Integrierten Kurse und die vier Fachmodule und zugehörigen Projekte, von denen eines umfangreicher ist und als Bachelorarbeit gewertet wird. Sie sollten Ihr erstes Projekt nach Möglichkeit bereits vor Beginn des 5. Semesters abgeschlossen haben.   Impressum Letzte Änderung: 22.05.2013 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/physik/faqs.phtml</field>
<field name="title">Physik ? Studium ?
Das modulare Physik-Studium - Häufige Fragen</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/physik/faqs.phtml</field>
<field name="content">Physik ? Studium ?Das modulare Physik-Studium - Häufige Fragen Physik ? Studium ?Das modulare Physik-Studium - Häufige Fragen Das Bachelor- und Master-Studium Physik - Häufig gestellte Fragen Einige dieser Fragen (gestellt von Studierenden, Sekretärinnen, Dozenten) zielen ab auf den Studienverlauf an sich, auf mögliche Wahlfächer usw.. Am aller öftesten aber werden Fragen gestellt zur Prüfungsverwaltung mit FlexNow. Die Software FlexNow führt alle (Prüfungs-)Leistungen eines Studierenden vom ersten bis zum letzten Semester, aus FlexNow heraus werden Zeugnisse generiert. Zusammenstellung: Fritz Wünsch, nach Informationen der Studiendekane Prof. Dr. Andreas Schäfer, Prof. Dr. Klaus Richter und Prof. Dr. Christian Schüller, des Vorsitzenden des Bachelor-/Master-Prüfungsausschusses Physik, Prof. Dr. Franz-Josef Gießibl, des Studienberaters, Herrn Prof. Dr. Josef Zweck, und von Herrn Klessinger aus der Verwaltung. Diese Zusammenstellung erfolgte sehr sorgfältig, maßgeblich sind aber immer die jeweiligen Prüfungsordnungen. Einige grundlegende Infos Für welche Studiengänge gilt diese Info hier? Diese Dokumentation gilt für das Bachelor- und Master-Studium Physik. Sehr viele Punkte gelten aber analog auch für die Bachelor-Studiengänge Nanoscience und Computational Science. Ansprechpartner für Studierende des Lehramts bei allen prüfungstechnischen Fragen und Problemen ist das Zentrale Prüfungssekretariat (Leitung: Herr Hilz). Wie sehe ich, welche Prüfungsanmeldungen tatsächlich in FlexNow angeboten werden? Welche Prüfungen in FlexNow tatsächlich angeboten wurden und werden (alle Fächer), ist über den Punkt "Termine" dieser FlexNow-URL ersichtlich (z.B. SS13 - Regulärer Termin - An- und Abmeldefristen). Wenn hier eine bestimmte Prüfung nicht auftaucht, wurde i.d.R. beim Einstellen des Prüfungsangebotes ein Fehler gemacht. Zum Thema 'Prüfung ohne Anmeldung, Nichtantritt ohne Abmeldung' Seit März 2010 gilt: Wer zu einer Prüfung nicht angemeldet ist, darf zwar trotzdem zur Übung daran teilnehmen, eine Verbuchung von Leistungen in FlexNow erfolgt in diesem Fall aber grundsätzlich nicht. Wenn eine Anmeldung aus technischen Gründen nicht möglich ist, bitte rechtzeitig (spätestens eine Woche vor dem Prüfungstermin) beim Dozenten bzw. in seinem Sekretariat melden! Zum Thema Abmeldung: Wenn sich jemand zu einer Prüfung anmeldet, dann aber - ohne sich vorher wieder abgemeldet zu haben - nicht daran teilnimmt, für den wird diese Prüfung als nicht bestanden gewertet. Kurzfristige krankheitsbedingte Verhinderung ist hier natürlich ausgenommen, sie muss aber gemäß Prüfungsordnung nachgewiesen werden. Bei mündlichen Prüfungen erfolgt die Terminverwaltung i.d.R. nicht über FlexNow. Wer sich prüfen lassen will, macht einen Termin mit dem Prüfer aus und meldet sich dann in FlexNow an. Eine eventuelle Abmeldung muss auch bei solchen Prüfungen spätestens eine Woche vor dem ausgemachten Prüfungstermin sowohl in FlexNow als auch beim Prüfer erfolgen. Hinweis: Wenn man sich zu einer Prüfung in FlexNow angemeldet hat, muss man auch daran teilnehmen oder sich abmelden oder bei Verhinderung eine entsprechende Bescheinigung vorlegen. Dies gilt auch dann, wenn es sich um eine freiwillige Prüfungsleistung handelt, also z.B. eine Spezialveranstaltung. Solange auch nur ein Prüfungsvorgang noch offen ist, kann kein Abschlusszeugnis ausgestellt werden! Wechsel vom Bachelor- ins Masterstudium für BAföG-Empfänger Der Übergang vom Bachelor- zum Masterstudium ist für BAföG-Empfänger nicht ganz einfach. Mehr Informationen hierzu gibt's z.B. bei der Fachschaft Chemie und Mineralogie der Uni Leipzig oder bei Studis ONLINE . Und nun zur Liste der Fragen Wer sind meine Ansprechpartner? Zur Studienverlaufskontrolle gemäß §15 der Prüfungsordnung Welche Ergänzungsfächer gibt es im Bachelor-Studium? Zur Wichtung von Bachelor-Arbeit und Ergänzungsfächern (auch beschleunigtes Verfahren) Bewerbung um die Teilnahme am Beschleunigten Studium, weitere Infos hierzu Die Prüfungsordnung und ihre Abbildung auf FlexNow Einstellung des Prüfungsangebotes der Physik-Fakultät Studien- und Prüfungsangebote anderer Fakultäten Anmeldung, Prüfungs-Durchführung, Notenvergabe Spezielle Regelungen für zentral organisierte Modulprüfungen Anmeldung der Bachelor-Arbeit (? pdf-Formular); Formular Antrag auf Ausstellung der Bachelor-Urkunde Anmeldung der Master-Arbeit (? pdf-Formular); Formular Antrag auf Ausstellung der Master-Urkunde Nichtzulassung zu einer Prüfung, Abmeldung von einer Prüfung Wiederholungsprüfungen, Notenverbesserung Besuch von Master-Veranstaltungen während des Bachelor-Studiums Anerkennung von (externen) Prüfungsleistungen Studium von Lehramt Mathematik/Physik vertieft und parallel dazu Bachelor Physik (bzw. Doppelstudium allgemein) Zum Bachelor Wahlbereich: Vertiefung Physik (PHY-B-WV) Zum Bachelor Wahlbereich ? Sonstiges Zur Master Vertiefungsphase ? Sonstiges FlexNow-Anmeldung für IT-Kurse (Termine, Bereich Fachstudium und/oder IT-Ausbildung u.a.) Online-Kursanmeldungen und Prüfungsanmeldung in FlexNow Wer sind meine Ansprechpartner? Offizieller Ansprechpartner für alle Prüfungsangelegenheiten zum Bachelor- und Masterstudium Physik ist der Prüfungsausschuß. Vorsitz: Prof. Gießibl (für Studiengänge Physik, Nanoscience), Prof. Wettig (Studiengang Computational Physics). Weitere Mitglieder sind in dieser Liste zu finden. Bei Problemen sicher auch weiterhelfen wird die Prüfungssekretärin Physik, Frau Brigitta Lux und der Studiendekan. Zur Studienverlaufskontrolle gemäß §15 der Prüfungsordnung Ist bis zum Ende des zweiten Semesters des Bachelorstudiums nicht der Nachweis erbracht über eine Prüfungsleistung aus dem Modul PHY-B-P 1 sowie über eine Prüfungsleistung aus dem Modul PHY-B-P 11 oder über die bestandene Modulprüfung zu PHY-B-P 2, ist unverzüglich die Fachstudienberatung aufzusuchen. Welche Ergänzungsfächer gibt es im Bachelor-Studium? Gemäß Moduldatenbank alt und/oder Moduldatenbank neu gibt es zur Zeit die folgenden Ergängzungsfächer: PHY-B-WE1 - Chemie PHY-B-WE2 - Biologie PHY-B-WE3 - Mathematik PHY-B-WE4 - Volkswirtschaftslehre PHY-B-WE5 - Wissenschaftsgeschichte PHY-B-WE6 - Philosophie PHY-B-WE7 - Betriebswirtschaftslehre PHY-B-WE8 - Wirtschaftsinformatik PHY-B-WE9 - Politikwissenschaft PHY-B-WE10 - Bioinformatik PHY-B-WE11 - Biophysik PHY-B-WE12 - Didaktik der Physik Weitere Ergänzungsfächer können z.Z. nicht studiert werden! Besteht der Wunsch hierzu seitens eines Studierenden, so muss dieser Studierende zum Studiendekan der anbietende Fakultät gehen und diesen bitten, ein entsprechendes Studienangebot mit der zugehörigen Modulbeschreibung dem Physik-Studiendekan zuzuleiten. Danach wird der Fakultätsrat über die Zulassung dieses Fach für alle Studierenden als mögliches Ergänzungsfach befinden. Wichtig! Für alle Ergänzungsfächer gilt: die Anforderungen wurden in Absprache zwischen der Fremdfakultät und der Physik festgelegt. Z.T. sind die zu erbringenden Leistungen sehr detailliert vorgegeben, z.T. werden den Studierenden grosse Auswahlmöglichkeiten geboten. Alle nötigen Prüfungsleistungen (schriftlich oder mündlich) und dabei die Gesamtnote werden von der Fremdfakultät vergeben, die Prüfungsmodalitäten ausschließlich von ihr festgelegt. Die Fremdfakultät ist auch zuständig für die Einstellung des Prüfungsangebotes in FlexNow und die Verbuchung der Leistung. Bei jeglichen Unklarheiten bitte vor Besuch eines Ergänzungsfaches die zuständigen Personen in der Fremdfakultät kontaktieren, also z.B. Studiengangskoordinator, Studiendekan oder explizit aufgeführten Ansprechpartner. Nur hier kann Ihnen verbindlich mitgeteilt werden, ob Sie eine bestimmte Veranstaltung besuchen sollen, eine bestimmte Prüfung absolvieren dürfen, ob Ihnen hierfür Leistungspunkte gutgeschrieben werden können. Zur Wichtung von Bachelor-Arbeit und Ergänzungsfächern (auch beschleunigtes Verfahren) §35 der aktuellen Prüfungsordnung (ähnlich §24 (2) der alten PO) sagt aus: Die Gesamtnote der Bachelorprüfung setzt sich wie folgt zusammen: nach Leistungspunkten gewichtete Noten der Pflichtmodule PHY-B-P 1 (Experimentalphysik), PHY-B-P 2 (Mathematische Methoden und Lineare Algebra), PHY-B-P 6 (Theoretische Physik I: Klassische Physik), PHY-B-P 7 (Theoretische Physik II: Quantenmechanik I), PHY-B-P 9 (Struktur der Materie II: Festkörperphysik), i PHY-B-P 11 (Mathematik für Physiker), Noten des Vertiefungsmoduls PHY-B-WV 1 (Theoretische Physik III: Quantenmechanik II) oder PHY-B-WV 2 (Theoretische Physik IV: Quantenstatistik) sowie eines Ergänzungsfachs, gewichtet mit jeweils 10 LP, oder die Noten zweier Ergänzungsfächer, gewichtet mit jeweils 10 LP, Note der Bachelorarbeit, gewichtet mit 12 LP. Zum Beschleunigen Verfahren steht in §36 der aktuellen Prüfungsordnung: Studierende, die am beschleunigten Verfahren teilnehmen, besteht die Bachelorprüfung aus dem Nachweis von 180 LP. Diese werden erbracht durch das erfolgreiche Ablegen der folgenden ... Pflichtmodule und Lehrveranstaltungen im Umfang von insgesamt 142 LP: PHY-B-P 1 ? Experimentalphysik (Veranstaltungen a und b) (14 LP), PHY-E 1 ? Vorbereitungsmodul für die Aufnahme in das beschleunigte Verfahren: Veranstaltung c aus Modul PHY-B-P 1 ? Experimentalphysik (7 LP), PHY-B-P 2 ? Mathematische Methoden und Lineare Algebra (10 LP), PHY-B-P 3 ? Praktikum A (8 LP), PHY-B-P 4 ? Praktikum B (8 LP), PHY-B-P 5 ? Fortgeschrittenenpraktikum I (8 LP), PHY-B-P 6 ? Theoretische Physik I: Klassische Physik (16 LP), PHY-B-P 11 ? Mathematik für Physiker (20 LP), PHY-E 2 ? theoretischer und experimenteller Teil der Integrierten Vorlesung I (16 LP), PHY-E 3 ? theoretischer und experimenteller Teil der Integrierten Vorlesung II (16 LP), PHY-E 4 ? theoretischer und experimenteller Teil der Integrierten Vorlesung III (16 LP), PHY-E 6 ? Seminar und Seminarwochen des Beschleunigten Verfahrens (3 LP); einen Wahlbereich im Umfang von mindestens 26 LP; der Wahlbereich umfasst ein Ergänzungsfach gemäß § 30 Abs. 1, Satz 2, Nr.2, Buchst. b, ein Fachmodul aus dem Modulkatalog der Fakultät, Lehrveranstaltungen gemäß § 30 Abs. 1, Satz 2, Nr.2, Buchst. c; das erfolgreiche Anfertigen der Bachelorarbeit im Umfang von 12 LP. Bewerbung um die Teilnahme am Beschleunigten Studium §5 Abs.3 der Bachelor-Prüfungsordnung sagt: "Die Bewerbung zur Teilnahme am beschleunigten Verfahren kann jeweils für das kommende Sommersemester bis zu einem vom Prüfungsausschuss festgelegten Termin erfolgen." Interessenten am beschleunigten Verfahren mögen sich bitte direkt mit dem Studiendekan in Verbindung setzen. ? weitere Infos zum beschleunigten Studium Wichtig: Nachdem Sie in das beschleunigte Studium aufgenommen wurden, müssen Sie sich unbedingt im Prüfungssekretariat Physik in diesen Studiengang umschreiben lassen. Vergessen Sie dies, können Sie sich nicht zu Prüfungen dieses Studienganges anmelden, z.B. zum Integrierten Kurs. Die Prüfungsordnung und ihre Abbildung auf FlexNow Massgeblich für das Studium ist die jeweils gültige, genehmigte Prüfungs- und Studienordnung. Im Web gibt's neben der bisherigen Moduldatenbank den jetzt aktuellen neuen Modulkatalog. Die angebotenen Module mit Prüfungsformalitäten werden verbindlich beschrieben in der Modul-Katalog. Die Module teilen sich auf in die Bereiche Bachelor Pflichtbereich (PHY-B-P) Bachelor Wahlbereich: Vertiefung Physik (PHY-B-WV) Bachelor Wahlbereich: Ergänzungsfach (PHY-B-WE) Bachelor Wahlbereich: Sonstiges (PHY-B-WS) Es gibt unterschiedlich komplexe Module: ein Modul kann aus nur einem Modul-Element bestehen (z.B. Praktikum B). Wird diese Veranstaltung erfolgreich absolviert, wird die Leistung mit den entsprechenden Leistungspunkten (LPs) (benotet oder unbenotet, je nach Modulbeschreibung) in FlexNow vermerkt. ein Modul kann aus mehreren Elementen bestehen. In der Regel verlangt dann die Prüfungsordnung das Bestehen einer bestimmten Anzahl von Modulelementen (also z.B. 1 von 2 oder 2 von 4) und das Bestehen einer zusätzlichen Prüfung. In FlexNow ist in diesem Fall ein Eintrag zu jedem einzelnen Element und zu der Prüfung vorhanden. Die LPs für das Modul werden dem Studierenden erst dann gutgeschrieben, wenn er alle Voraussetzungen gemäß Prüfungsordnung erfüllt hat (also z.B. Bestehen eines Elementes und der Gesamtprüfung). Die Note des Moduls errechnet sich aus den Einzelresultaten gemäß den aktuellen Modulbeschreibungen. Alle möglichen Prüfungen mit den entsprechenden Regeln - unabhängig von einem bestimmten Termin oder Semester - werden von der Universitätsverwaltung (Frau Galusova) in FlexNow modelliert. Auch jedes neue Modul samt Beschreibung wird nach Verabschiedung an die Verwaltung zur Modellierung übermittelt. FlexNow enthält eine exakte Abbildung der Modalitäten gemäß dem Modulkatalog und der Prüfungsordnung. Dabei wird z.B. auch berücksichtigt, ob ein bestimmtes Prüfungsangebot für Bachelor Physik und/oder Nanoscience, Computational Science, oder/und auch für LA Gymnasien, LA mit Unterrichtsfach Physik gilt. Prüfungs- Instanzen (d.h. eine Prüfung in einem bestimmten Semester, mit konkreten Fristen zur An- und Abmeldung, mit bestimmten Prüfern etc.) werden in FlexNow nicht durch die Verwaltung eingestellt, sondern durch die jeweiligen Fakultäten (entweder zentral oder durch einzelne Lehrstühle, siehe nächster Punkt). Welche Prüfungen tatsächlich angeboten wurden und werden (alle Fächer), ist, wie erwähnt, über den Punkt "Termine" dieser FlexNow-URL ersichtlich (z.B. SS13 - Regulärer Termin - An- und Abmeldefristen). Einstellung des Prüfungsangebotes der Physik-Fakultät Es gibt grundsätzlich 2 Typen von Prüfungen in FlexNow: lehrveranstaltungsgebundene zentral organisierte Zur Zeit (Stand Februar 2013) sind folgende Prüfungen zentral organisiert und werden von F.Wünsch in FlexNow eingestellt. Eine An- und Abmeldung ist jederzeit möglich, da es sich i.d.R. um mündliche Prüfungen handelt, deren Termin individuell zwischen den Studierenden und den jeweiligen Prüfern vereinbart werden, es besteht Wahlmöglichkeit unter verscheidenen Prüfern: die Gesamt-Modul-Prüfungen zu Experimentalphysik A, Experimentalphysik B (nach der neuen Prüfungsordnung zusammengelegt), Theoretische Mechanik I: Klassische Mechanik sowie Mathematik für Physiker (komplett unter der Obhut der Mathematik-Fakultät) alle Prüfungen zu den Veranstaltungen der Master Vertiefungsphase Physik außer PHY-M-VF 8 die Prüfung zur Naturwissenschaftlichen Informatik (PHY-M-VE 1), zu Physik in der Medizin (PHY-M-VE2), Wirtschaftsphysik (PHY-M-VE6) Master Forschungsphase PHY-M-F1 und PHY-M-F2 Nanomaterialen (für Bachelor Nanoscience und Master Chemie) Weiter Infos zu den zentral organisierten Prüfungen gibt's weiter unten. Alle anderen Prüfungen sind lehrveranstaltungsgebunden Die Einstellung erfolgt durch den Lehrstuhl, der die Veranstaltung anbietet. Der Lehrstuhl legt die Anmeldefristen fest, ist auch zuständig für eventuelle Nachmeldungen. Jeder Dozent sieht - ohne weitere Aktionen des Prüfungssekretariats - sofort den Stand der Anmeldungen zu seinen Prüfungen (bei zentral organiserten Prüfungen ist das leider nicht ganz so ...) Sonderfälle sind die Bachelor-Arbeit und das F-Praktikum. Hier wird kein (öffentliches) Prüfungsangebot in FlexNow eingestellt, die Anmeldung von Studierenden und die Verbuchung der Leistungen erfolgt direkt durch das Prüfungssekretariat (bei der Bachelor-Arbeit) bzw. durch das Sekretariat Prof. Huber (Frau Franzke - F-Praktikum). Studien- und Prüfungsangebote anderer Fakultäten Gemäß Modulkatalog werden Module auch angeboten durch die Fakultäten für Mathematik, Chemie, Biologie, Wirtschaft, Philosophie (inkl. Wissenschaftsgeschichte), durch die Medizin und durch das Rechenzentrum. Ganz allgemein gilt, dass die veranstaltenden Fakultäten verantwortlich sind für das Einstellen der entsprechenden Prüfungsangebote und die komplette Eintragung aller Ergebnisse. Das Prüfungssekretariat Physik schaltet am Ende nur die Ergebnisse im Web frei. Auch für die Anerkennung von Fremdleistungen ist die entsprechende Fakultät zuständig, das Procedere entspricht aber dem der Physik. Konkret handelt es sich im Augenblick (im Bachelor-Bereich) um folgende Veranstaltungen, die auch in der Moduldatenbank ausführlich dokumentiert sind. PHY-B-P 2 - Modulelement Lineare Algebra PHY-B-P11 - Mathematik für Physiker PHY-B-WE1 - Ergänzungsfach Chemie PHY-B-WE2 - Ergänzungsfach Biologie PHY-B-WE3 - Ergänzungsfach Mathematik PHY-B-WE4 - Ergänzungsfach Volkswirtschaftslehre PHY-B-WE5 - Ergänzungsfach Wissenschaftsgeschichte PHY-B-WE6 - Ergänzungsfach Philisophie PHY-B-WE7 - Ergänzungsfach Betriebswirtschaftslehre PHY-B-WE8 - Ergänzungsfach Wirtschaftsinfornmatik PHY-B-WE9 - Ergänzungsfach Politikwissenschaften PHY-B-WE10 - Ergänzungsfach Bioinformatik PHY-B-WE11 - Ergänzungsfach Biophysik PHY-B-WS7 - Wahlbereich - IT und Medien Analoges gilt für die Module der Master Vertiefungsphase - Ergänzungsfach. Hin und wieder gibt es Probleme bei der Umsetzung dieser Regelung. Solche Probleme werden natürlich niemals Studierenden irgendwelche Nachteile bringen - wir werden sie hausintern auf geeignete Art und Weise lösen. In solchen Fällen müssen erbrachte Leistungen immer durch die veranstaltende Fakultät schriftlich bestätigt werden (z.B. durch Scheine, durch vom Dozenten unterschriebene Teilnehmerlisten etc.). Das Prüfungsamt Physik kann dann damit die Leistungen zu gegebener Zeit in FlexNow eingepflegen. Für PHY-B-WE 3 - Ergänzungsfach Mathematik werden alle Veranstaltungen im Fach Mathematik aus dem Bachelor- (und Master-)Bereich gemäß Vorlesungsverzeichnis der Naturwissenschaftlichen Fakultät I anerkannt. Ausgeschlossen sind die Veranstaltungen, die im Bachelor-Physik-Modul 'Mathematik für Physiker' genannt sind.) Anmeldung, Prüfungs-Durchführung, Notenvergabe Bei Veranstaltungen, die während der offiziellen Vorlesungszeit abgehalten werden (also die meisten Vorlesungen und Praktika), gilt nach Beschluss des Fakultätsrats Physik: die Anmeldung zu einer veranstaltungsbegleitenden Prüfung muss bis 1 Woche vor der ersten Prüfung, eine eventuelle Abmeldung auch bis 1 Woche vor der ersten Prüfung erfolgen. Sonderregelungen gelten für anderweitige Module/Modulelemente, z.B. Blockkurse - hier weist der Dozent auf die entsprechenden Fristen hin. Für die IT-Blockkurse aus dem Bachelor Wahlbereich: Sonstiges (B-WS) sowie Master Vertiefungsphase: Sonstiges (M-VS) kann man sich z.B. während der jeweiligen Kurszeit in FlexNow eintragen. Für zentral organisierte Modulprüfungen kann man sich jederzeit zu einer Prüfung anmelden - es existiert in FlexNow jeweils ein reguläres und ein Wiederholungsangebot für jedes Semester. Details siehe nächsten Punkt. Nach Abschluß der Prüfung (z.B. nach Bewertung der Klausur) verbucht der prüfende Dozent die Leistungen in FlexNow. Hat er alle Buchungen beendet, meldet er dies im Prüfungsamt, wo sozusagen ein Schalter umgelegt wird. Danach kann er keine Änderungen an den Verbuchungen mehr durchführen, ab diesem Zeitpunkt sind die Leistungen für die Studierenden einsehbar. Spezielle Regelungen für zentral organiserte Modulprüfungen Laut Prüfungsordnung und Modulbeschreibungen sind im Bachelor-Pflichtbereich zusätzlich zu den vorlesungsbegleitenden Prüfungen folgende Modulprüfungen abzulegen, die mehrere Veranstaltungen umfassen: Prüfung in Experimentalphysik A (Mechanik und Elektrodynamik), Prüfung in Experimentalphysik B (Wellen und Quanten sowie Thermodynamik) (in der neuen Prüfungsordnung zusammengefasst) Prüfung in Theoretischer Physik I - Klassische Physik (Klassische Mechanik und Elektrodynamik) Mathematik für Physiker - komplett unter der Obhut der Fakultät für Mathematik, wird daher hier nicht weiter behandelt Seit 22. Juli 2010 sind auch die Prüfungen zu (fast) allen Modulen aus der Master-Vertiefungsphase: Physik (Fachmodule) (PHY-M-VF) als Modulprüfungen organisiert (Ausnahme: PHY-M-VF8). Ebenso sind die mündliche Prüfungen zur Naturwissenschaftliche Informatik (Master-Vertiefungsphase: Ergänzungsfach, Modul PHY-M-VE1), zur Physik in der Medizin (Master-Vertiefungsphase: Ergänzungsfach, PHY-M-VE2) und zur Wirtschaftsphysik (Master-Vertiefungsphase: Ergänzungsfach, PHY-M-VE6) zentral organisiert. Zentral organisiert sind auch die Module PHY-M-F1 und PHY-M-F2 aus der Master-Forschungsphase. Das Procedere für alle Modulprüfungen ist inzwischen folgendermaßen: Für jedes Semester (Sommer und Winter) ist ein reguläres Prüfungsangebot in FlexNow eingestellt sowie eine Wiederholungsprüfung. Zur Wiederholungsprüfung kann sich nur anmelden, wer bereits einmal die entsprechende Prüfung nicht bestanden hat. Zur ersten Wiederholungsprüfung müssen Sie sich immer selbst anmelden, eine automatische Anmeldung erfolgt prinzipiell nicht! Die erste Wiederholungsprüfung muss spätestens ein Jahr nach der nicht bestandenen regulären Prüfung stattfinden. Die Anmeldung zur regulären und zur ersten Wiederholungsprüfung ist im Web spätestens freigeschaltet einen Monat vor Beginn des jeweiligen Semsters bis zum Ende dieses Semesters (also mindestens 7 Monate lang). Es wird durch die Fakultät Physik eingestellt (F.Wünsch), nicht durch einen bestimmten Lehrstuhl, auch nicht durch das zentrale Prüfungsamt der Universität. Jeder Studierende hat bei den Experimentalphysik-Prüfungen die Auswahl unter allen Prüfern des Instituts für experimentelle und Angewandte Physik, bei der Theorie-Prüfung unter denen des Instituts für Theoretische Physik, siehe http://www.physik.uni-regensburg.de/forschung/institute.phtml. Bei den Prüfungen zur Master-Vertiefungsphase: Physik (Fachmodule) gilt Analoges, nur haben wir hier noch unterschieden zwischen theoretischen Hochenergie- und Festkörperphysikern. Bei Physics of Nanostructures können die Prüfer aus der Experimentellen und Angewandten Physik kommen oder aus der Theoretischen Festkörperphysik. Bei der Naturwissenschaftlichen Informatik ist die Auswahl noch größer - jeder bestellte Prüfer aus der Mathematik/Physik/Biologie/Chemie kann als (Erst-)Prüfer ausgewählt werden. Der ganze Anmeldevorgang muss so ablaufen: Klären Sie als erstes die Prüfung und den Termin mit dem gewünschten Prüfer ab. Eine Terminplanung für mündliche Prüfungen wird nicht über FlexNow realisiert. Oft liegen in den Sekretariaten der Professoren, die die zugehörigen Vorlesungen gehalten haben, entsprechende Terminlisten aus. U.u. bieten manche Prüfer anstelle einer mündlichen Prüfung eine Klausur an - das vereinfacht natürlich das Verfahren - in diesem Fall ist eine persönliche Absprache nicht nötig. Die Anmeldung in FlexNow muss spätestens eine Woche vor dem Prüfungstermin erfolgen, und zwar beim Prüfungsangebot desjenigen Semesters, in dem der Prüfungstermin liegt (Terminangabe bei der Webanmeldung beachten!). Dabei müssen Sie den ausgewählten Prüfer in FlexNow angeben. Eine eventuelle Abmeldung muss sowohl dem Prüfer rechtzeitig angezeigt werden (entfällt bei Klausur) als auch in FlexNow erfolgen. Die Abmeldung muss spätestens eine Woche vor dem geplanten Prüfungstermin erfolgen. Kurzfristige krankheitsbedingte Verhinderung ist hier natürlich ausgenommen. Falls eine zweite Wiederholung notwendig wird, erfolgt die Anmeldung direkt über das Prüfungssekretariat Physik, nicht über das Web. Zuvor muss aber unbedingt eine Absprache mit dem gewünschten Prüfer erfolgen. Für die Modulprüfungen aus dem Bachelor-Pflichtbereich gilt außerdem noch: Die gesamten Leistungspunkte für das Modul werden erst dann gutgeschrieben, wenn sowohl ein Leistungsnachweis in einer Teilveranstaltungen vorliegt als auch die Modulprüfung erfolgreich abgelegt wurde, siehe Modulbeschreibungen. Wenn in der Modulbeschreibung nicht explizit anders vermerkt, kann die Modulprüfung auch bereits abgelegt werden, wenn noch keine der Teilveranstaltungsprüfungen bestanden wurde - dieses Vorgehen wird aber nicht empfohlen. Die Note für das Modul errechnet sich aus der Note der vorlesungsbegleitender Prüfung sowie der Modulprüfung gemäß Modulkatalog. Wurde zu mehr Teilveranstaltungen als vorgeschrieben eine Prüfung erfolgreich abgelegt, geht i.d.R. nur die beste Note in die Gesamtbewertung des Moduls ein. Anmeldung der Bachelor-Arbeit Wenn Sie die Bachelor-Arbeit angehen wollen, informieren Sie sich bitte erst über das Angebot, z.B. über diesen Link. Die Zuteilung eines bestimmten Themas erfolgt aber prinzipiell erst nach persönlicher Absprache mit der/dem Arbeitsgruppenleiter(in). Wie geht's dann weiter? Sie gehen danach zu Frau Lux ins Prüfungssekretariat Physik. Bei Frau Lux unterzeichnen Sie eine Erklärung (keine endgültig nichtbestandene Vordiplom-, Zwischen-, Bachelor-, Diplom- oder Masterprüfung im Studiengang Physik usw.). Dann trägt Frau Lux Ihre(n) Betreuer(in), Ihr Thema und den Beginn der Arbeit in FlexNow ein. Der Fakultätsrat hat am 12.5.10 beschlossen, dass in Zukunft bei Anmeldung der Bachelor-Arbeit nur noch 120 Leistungspunkte nachgewiesen werden müssen. Diesen Nachweis brauchen Sie aber nicht vorlegen, FlexNow kennt ja Ihre Leistungen. Noch fehlende Leitungspunkte für das Bachelor-Studium können Sie bis zum Ende des 6. Semsters nachreichen. I.d.R. spätestens nach 3 Monaten geben Sie die fertige Arbeit bei Frau Lux ab, der Abgabetermin wird wieder in FlexNow vermerkt. Im Detail gilt natürlich die Prüfungsordnung. Anmeldung der Master-Arbeit Im ersten Schritt überlegen Sie sich immer, in welcher Arbeitsgruppe Sie die Forschungsphase (Module M-F1 bis F3 nach der alten bzw. PHY-M-F1 und PHY-M-F2 nach der neuen Prüfungsordnung) absolvieren wollen. Sie starten mit der dreimonatigen (nach alter PO) Fachlichen Spezialisierung (M-F1), die Sie auch in FlexNow anmelden. Dabei werden Sie nach dem Dozentennamen gefragt. In der neuen Prüfungsordnung ist PHY-M-F1 6 Monate lang, die zugehörige Modulbeschreibung ist hier zu finden. Kommen Sie mit dem Thema zurecht, werden Sie in dieser Arbeitsgruppe auch das Modul M-F 2: Methodenkenntnis und Projektplanung absolvieren (nur alte Prüfungsordnung). Zu Methodenkenntnis und Projektplanung müssen Sie sich auch in FlexNow anmelden. Anschließend werden Sie die eigentliche Masterarbeit (M-F3) absolvieren; in der neuen Püfungsordnung hat sie die Modul-Nummer PHY-M-F2. Die Anmeldung zur Masterarbeit jedoch erfolgt über das Prüfungssekretariat Physik, dabei müssen Sie dieses Formblatt ausgefüllt abgeben. Die Bearbeitungszeit der Masterarbeit soll ab Themenvergabe sieben Monate nicht überschreiten. Am Ende ist die Arbeit wieder im Prüfungssekretariat abzugeben. Nichtzulassung zu einer Prüfung, Abmeldung von einer Prüfung Frage: Ich habe mich für eine Klausur angemeldet, werde aber zur Teilnahme an der Klausur (z.B. wegen unregelmäßiger Übungsgruppenbesuche, unvollständig eingereichter Hausaufgaben etc.) nicht zugelassen. Gilt dies als ein rechtzeitiger Rücktritt von der Prüfung? Antwort: Nein! Wenn Sie sich für die Klausur in einer Veranstaltung anmelden, dann bekunden Sie damit Ihr Bestreben, diese Veranstaltung erfolgreich zu absolvieren. Wenn Sie die zum erfolgreichen Bestehen der Veranstaltung nötigen Vorleistungen nicht erbringen, dann wird der gesamte Prüfungsversuch als nicht ausreichend gewertet. Sie müssen also in diesem Fall rechtzeitig (fragen Sie im Zweifel Ihren Dozenten) von der Anmeldung zur Klausurteilnahme zurücktreten. Wiederholungsprüfungen, Notenverbesserung Eine Wiederholungsmöglichkeit wird in der Regel für alle Prüfungen angeboten. Eine Wiederholung ist nur möglich, wenn die ursprüngliche Prüfung nicht bestanden oder versäumt wurde oder die Zulassungsvoraussetzungen noch nicht erfüllt waren. Man muss sich selbst aktiv zu einer Wiederholungsprüfung anmelden. Diese Anmeldung ist möglich, nachdem der ursprüngliche Prüfungsprozess dem Prüfungssekretariat als abgeschlossen gemeldet wurde. Die erste Wiederholung soll i.d.R. gemäß Prüfungsordnung nach maximal 6 Monaten stattfinden, die zweite Wiederholung muss spätestens ein Jahr nach dem erstmaligen Nichtbestehen erfolgen. Sonderregelung für Veranstaltungen der Theoretischen Physik und Struktur der Materie Die Veranstaltungen der Theoretischen Physik I (Klassische Mechanik im SS, Elektrodynamik im WS) sind weitestgehend identisch zu den entsprechenden Veranstaltungen für Lehramt Gymnasien ein Semester später. Wenn Sie also z.B. im Sommersemester die Klausur zur Theoretischen Mechanik für Bachelor nicht bestanden haben, dann können Sie entweder die zu dieser Veranstaltung angebotene Nachholklausur mitschreiben, oder im darauf folgenden Wintersemester die Vorlesung "Theoretische Mechanik für LA Gymnasien" hören und sich dort zur Klausur anmelden, welche dann Ihre erste Wiederholung ist. Analoges gilt für die Veranstaltungen Quantenmechanik und Thermodynamik und für Struktur der Materie I (Atome und Moleküle). Für die weiteren Veranstaltungen zur Struktur der Materie (Festkörperphysik, Kerne und Teilchen) gilt diese aber nicht, da hier die entsprechenden Veranstaltungen ganz unterscheidlichen Umfang haben. Notenverbesserung bei Modulprüfungen Eine Wiederholung einer bestandenen Prüfung zur Notenverbesserung ist nach dem oben Gesagten nicht möglich. Was aber definitiv geht: jemand hat die Prüfung zur Vorlesung Experimentalphysik I - Mechanik bestanden sowie die Prüfung zum Gesamtmodul Experimentalphysik. Somit steht die Modulnote eigentlich fest. Legt der Studierende später noch zusätzlich die Prüfung zur Vorlesung Experimentalphysik II - Elektrodynamik ab, und zwar mit einer besseren Note als bei der Vorlesung Mechanik, verbessert er dadurch auch nachträglich seine Modulnote von Experimentalphysik. Analoges gilt für Theoretische Physik A und Mathematik für Physiker. Besuch von Master-Veranstaltungen während des Bachelor-Studiums Alle Studierenden der Bachelor-Studiengänge können auch vorzeitig schon Master-Veranstaltungen besuchen und erfolgreich absolvieren. Sie werden zunächst dem Bachelor-Wahlbereich 'Sonstiges' zugeordnet. Eventuell vergeben Noten werden hier nicht berücksichtigt, jedoch werden die Veranstaltungen im Bachelor-Zeugnis aufgelistet. Wenn Sie nach dem Bachelor-Studium noch den Master machen wollen, greift folgendes Verfahren: 9 Punkte aus dem Bachelor-Bereich 'Sonstiges' sind ja für das Bachelor-Studium verpflichtend (Wahlbereich insgesamt: 41, davon 2 Ergänzungsfächer zu je 16 Punkten oder 1 Ergänzungsfach zu 16 Punkten und 16 Punkte Vertiefung Physik, also bleiben 9 Punkte). Diese 9 Punkte können Sie natürlich nicht nochmals im Master-Studium nutzen. Vor der Erstellung des Bachelor-Zeugnisses muss jeder Studierende im Prüfungsamt eine schriftliche Erklärung darüber abgeben, welche Veranstaltungen in den Masterbereich verschoben werden sollen. Anerkennung von (externen) Prüfungsleistungen Die Anerkennung von (externen) Prüfungsleistungen erfolgt folgendermaßen: Wenn möglich, meldet sich der Studierende zu der entsprechenden Prüfung in FlexNow an. Ein zuständiger Prüfer der Physik stellt die Gleichwertigkeit der externen Leistung mit dieser Prüfungsleistung fest. Handelt es sich um eine Veranstaltung einer anderen Fakultät (z.B. Mathematik), muss natürlich ein Dozent aus dieser Fakultät gefunden werden, der die Gleichwertigkeit bestätigt. Mit der Bescheinigung der Gleichwertigkeit stellt der Studierende einen Antrag auf Anerkennung an den Vorsitzenden des Prüfungsausschusses (formlos oder auch mit diesem Formular). Findet sich kein Dozent, der die Gleichwertigkeit bestätigen kann, entscheidet darüber der Bachelor-Prüfungsausschuß. Die Verbuchung in FlexNow erfolgt am Ende wieder durch das Prüfungssekretariat. Hinweis: Für Studierende des Lehramtes muss für jede einzelne anzuerkennende Veranstaltung zunächst dieses Formular ausgefüllt werden. Ein Fachdozent sowie der Vorsitzende des LA-Prüfungsausschusses (in der Physik Prof. Rincke) bestätigen die Gleichwertigkeit, die Leistung verbucht dann am Ende das zentrale Prüfungsamt. Unabhängig von Obigem ? Wie schon im Abschnitt "Wiederholungsprüfungen" angemerkt, können einige Vorlesungen des Lehramtsstudienganges (z.B. Theoretische Mechanik, Elektrodynamik, Quantenmechanik, Thermodynamik) auch für den Bachelor-Studiengang angerechnet werden. Prozedere: Wenn die Anmeldung z.B. für die LA-Veranstaltung Theoretische Physik I (Mechanik) für LA möglich ist, können sich auch Bachelor-Studenten anmelden. Hat ein Bachelor-Studierender diese Veranstaltung erfolgreich absolviert, wird ihm der Erfolg im Bachelor-Modulelement Theoretische Physik Ia: Klassische Mechanik gutgeschrieben. Studium von Lehramt Mathematik/Physik vertieft und parallel dazu Bachelor Physik (bzw. Doppelstudium allgemein) Frage: Ich studiere zur Zeit Lehramt vertieft auf Mathe/Physik im zweiten Semester, möchte aber nächstes Jahr den Physik Bachelor zusätzlich machen. Ich habe dieses und letztes Semester schon die gleichen Vorlesungen wie die Physik-Bachelor gehört, habe alle Versuche des A1 Praktikums mitgemacht und auch Noten auf allen meinen 'Scheinen'. Das erforderliche Nebenfach plane ich durch die Mathevorlesungen, die ich im Lehramt sowieso höre, abzudecken. Können Sie mir sagen, wie ich bei der Einschreibung zum Bachelor am besten vorgehen soll, an wen ich mich zum Beispiel zur Anerkennung meiner Studienleistungen wenden soll? Antwort: Bitte wenden Sie sich an die Studentenkanzlei, um sich im kommenden Semester in ein Zweitstudium Physik-Bachelor einzuschreiben. Für die Anerkennung der Studienleistungen gilt (s.o.): Gehen Sie zu dem jeweiligen Dozenten, der zuletzt die betreffende Veranstaltung abgehalten hat. Er kann Ihnen gegebenenfalls die Gleichwertigkeit bestätigen. Sie können ein Prüfungsergebnis nur dann verwerten, wenn Sie sich zuvor korrekt für diese Prüfung in FlexNow angemeldet haben. Dies ist aber nur möglich, wenn Sie für den zugehörigen Studiengang auch eingeschrieben haben. Bei einem Doppelstudium ganz allgemein sollten Sie daher so vorgehen: Sie wählen sich einen primären Studiengang, schreiben sich hier ein, und erfüllen Stück für Stück alle Anforderungen dieses Studienganges. Sie melden sich auch zum Zweitstudium an. Jetzt können Sie auch Prüfungsleistungen des Zweitstudium erbringen, die im Erststudium nicht erforderlich waren - eine FlexNow-Anmeldung ist ja jetzt möglich. Bei gleichen Prüfungsleistungen in den beiden Studiengängen: Eine Doppelverbuchung erfolgt prinzipiell nicht automatisch. Sie erbringen zunächst die Leistung im primären Studiengang. Dann gehen Sie in das zuständige Prüfungssekretariat und lassen sich die Leistung auch für das Zweitstudium anerkennen. Beispiel: Sie haben Analysis III erfolgreich absolviert und studieren primär Bachelor Physik, sekundär Bachelor Mathematik. Damit Ihnen Analysis III auch für das Mathematik-Studium anerkannt wird, gehen Sie in das Prüfungsamt Mathematik. Bitte beachten Sie auch den Link Hinweise für Studierende des Lehramts Gymnasien Physik/Mathematik, die gleichzeitig den Bachelor Physik erweben möchten. Zum Bachelor Wahlbereich: Vertiefung Physik (PHY-B-WV) Für diesen Bereich sind gemäß Prüfungsordnung zwei Positionen in FlexNow modelliert: Vertiefung 1 und Vertiefung 2. Bei beiden kann man entsprechend dem Modulkatalog wählen unter Theoretische Physik III: Quantenmechanik II Theoretische Physik IV: Quantenstatistik Fortgeschrittenenpraktikum II Möchte jemand alle drei Veranstaltungen absolvieren, so muss sie/er die dritte Veranstaltung im FlexNow-Bereich 'Sonstiges' anmelden. Ein Tausch von Veranstaltungen zwischen den Bereichen 'Vertiefung Physik' und 'Sonstiges' durch das Prüfungsamt Physik ist möglich. Zum Bachelor Wahlbereich ? Sonstiges Für das Bachelor-Studium Physik verwertbar sind hier insgesamt Leistungen im Umfang von max. 9LPs (aus der expliziten Liste gemäß Moduldatenbank oder beliebige Veranstaltungen der Uni Regensburg). Erbringt ein Studierender hier weitergehende Leistungen, so können diese durch das Prüfungsamt Physik in FlexNow eingetragen und später auf dem Bachelor-Zeugnis als Anmerkung angezeigt werden. Hinweis: Wird im Bachelor-Studiengang Physik freiwillig die Veranstaltung Nanomaterialien aus dem Studiengang Nanoscience besucht, so kann nur das komplette Modul NS-P8 (Teil I - Grundlagen und Teil 2 - Strukturierung und Selbstorganisation) eingebracht werden. Zur Master Vertiefungsphase ? Sonstiges Gemäß Fakultätsratsbeschluss vom 10.11.2010: Die Liste der hier verwertbaren Veranstaltungen wird sich von Jahr zu Jahr ändern. Es werden z.B. regelmäßig neue Spezialvorlesungen zu aktuellen Themen der Physik angeboten. Im Rahmen der Vertiefungsphase - Sonstiges (M-VS) können (und sollen) mehrere dieser Vorlesungen absolviert werden. Alle im jeweils aktuellen Vorlesungsverzeichnis Physik unter der Rubrik 'Spezialvorlesungen' angebotenen Veranstaltungen, die mit der Bemerkung "Bestandteil von Master Vertiefungsphase - Sonstiges" versehen sind, können hier eingebracht werden. Unter solchen Spezialvorlesungen sind i.d.R. auch fortgeschrittene IT-Veranstaltungen der Physik gelistet, soweit sie nicht im Modulkatalog explizit aufgeführt sind. Mit Genehmigung des Prüfungsausschusses können auch Vorlesungen anderer naturwissenschaftlicher Fakultäten (mit Leistungsnachweis) eingebracht werden. Ebenso kann eingebracht werden aus dem Studiengang Bachelor Nanoscience der Teil A des Nanowissenschaftlichen Praktikums (NS-P8a, nanowissenschaftliche Versuche), nicht aber das Modul Nanomaterialien. Bisher nicht verrechnete Veranstaltungen aus dem Bachelor Wahlbereich Vertiefung Physik, sowie Fachmodule Physik oder Veranstaltungen aus den naturwissenschaftlichen Ergänzungsfächern können im Sinne einer Spezialvorlesung (s.o.) auch unter "Sonstiges" eingebracht werden. Veranstaltungen aus dem Bereich "IT und Medien" sowie (elementare) IT-Veranstaltungen (Programmieren in C und C++, LaTeX, Matlab, Maple, Java) aus dem Bachelor Wahlbereich - Sonstiges können mit insgesamt bis zu 10 LP eingebracht werden. Veranstaltungen aus der Gruppe "Sonstiges" werden in der Regel nicht benotet. FlexNow-Anmeldung für IT-Kurse Um an unseren IT-Kursen teilnehmen zu können, müssen Sie sich nach wie vor zunächst einmal anmelden, und zwar ab Frühjahr 2013 in HIS LSF. ? nur so können wir planen. Die FlexNow-Anmeldung erfolgt bei den Blockkursen immer in der Zeit, in der der Kurs läuft - wenn Sie Probleme mit der Anmeldung haben, unbedingt gleich beim Kursleiter rühren (am besten per Mail)! Dazu brauchen wir Ihren Namen, Matrikelnummer und Studienfach/Abschluss. Nur so können wir den Problemen nachgehen. IT-Kurse, die sie bereits früher absolviert haben, werden bei Vorlage der entsprechenden Scheine vom Prüfungssekretariat nachträglich in FlexNow verbucht. IT-Ausbildung und / oder Fachstudium? Eine erfolgreich besuchte IT-Veranstaltung kann gleichzeitig für das Fachstudium verwendet werden (z.B. bei Bachelor-Physik im Bereich Bachelor Wahlbereich: Sonstiges (B-WS) bzw. Master Vertiefungsphase: Sonstiges (M-VS) und für die IT-Zusatzqualifikation der Universität Regensburg. Das Procedere ist wie folgt: Das zentrale Prüfungsamt empfiehlt: wenn irgendwie möglich, melden Sie sich in FlexNow unter dem Fachstudium an. Wenn Sie die Veranstaltung zusätzlich im Rahmen der IT-Zusatzqualifikation nutzen wollen, besuchen Sie bitte Frau Dr. Bachmaier im Rechenzentrum (Raum RZ 0.09, E-Mail: Regine.Bachmaier(at)rz..., Telefon 0941 943-4856). Sie wird dann mit Ihnen zusammen die Leistung auch für die IT-Zusatzausbildung verbuchen. Jede einzelne erfolgreich besuchte Veranstaltung der IT-Ausbildung wird in einem sog. Transcript of Records gelistet, das Sie auch bei Frau Dr. Bachmaier bekommen. Haben Sie mehrere Veranstaltungen gemäß den Bedingungen der studienbegleitenden IT-Ausbildung erfolgreich absolviert, gibt es zusätzlich ein Zeugnis. Hatten Sie sich in FlexNow bereits unter der Rubrik IT-Ausbildung angemeldet, wollen die Veranstaltung aber (auch) für Ihr Fachstudium nutzen, so gehen Sie bitte zu dem für Sie zuständigen Prüfungsamt, also z.B. bei Bachelor Physik zu Frau Lux. Sie kann Ihnen eine erfolgreich besuchte Veranstaltung der IT-Zusatzausbildung auch für das Fachstudium Physik anerkennen. Online-Kursanmeldungen und Prüfungsanmeldung in FlexNow FlexNow ist ein reines Prüfungsverwaltungssystem. Eine Online-Anmeldung mit HIS-LSF über die entsprechenden Links im Vorlesungsverzeichnis dient zur Organisation einer Veranstaltung, zur Einteilung in Übungsgruppen etc. Eine Zusammenführung wäre nur unter größten Schwierigkeiten zu realisieren. Daher werden auch in Zukunft weiterhin beide Systeme verwendet.   Impressum Letzte Änderung: 20.03.2013 von Webmaster</field>
<field name="important">Physik ? Studium ?Das modulare Physik-Studium - Häufige Fragen Physik ? Studium ?Das modulare Physik-Studium - Häufige Fragen Das Bachelor- und Master-Studium Physik - Häufig gestellte Fragen Einige dieser Fragen (gestellt von Studierenden, Sekretärinnen, Dozenten) zielen ab auf den Studienverlauf an sich, auf mögliche Wahlfächer usw.. Am aller öftesten aber werden Fragen gestellt zur Prüfungsverwaltung mit FlexNow. Die Software FlexNow führt alle (Prüfungs-)Leistungen eines Studierenden vom ersten bis zum letzten Semester, aus FlexNow heraus werden Zeugnisse generiert. Zusammenstellung: Fritz Wünsch, nach Informationen der Studiendekane Prof. Dr. Andreas Schäfer, Prof. Dr. Klaus Richter und Prof. Dr. Christian Schüller, des Vorsitzenden des Bachelor-/Master-Prüfungsausschusses Physik, Prof. Dr. Franz-Josef Gießibl, des Studienberaters, Herrn Prof. Dr. Josef Zweck, und von Herrn Klessinger aus der Verwaltung. Diese Zusammenstellung erfolgte sehr sorgfältig, maßgeblich sind aber immer die jeweiligen Prüfungsordnungen. Einige grundlegende Infos Für welche Studiengänge gilt diese Info hier? Diese Dokumentation gilt für das Bachelor- und Master-Studium Physik. Sehr viele Punkte gelten aber analog auch für die Bachelor-Studiengänge Nanoscience und Computational Science. Ansprechpartner für Studierende des Lehramts bei allen prüfungstechnischen Fragen und Problemen ist das Zentrale Prüfungssekretariat (Leitung: Herr Hilz). Wie sehe ich, welche Prüfungsanmeldungen tatsächlich in FlexNow angeboten werden? Welche Prüfungen in FlexNow tatsächlich angeboten wurden und werden (alle Fächer), ist über den Punkt "Termine" dieser FlexNow-URL ersichtlich (z.B. SS13 - Regulärer Termin - An- und Abmeldefristen). Wenn hier eine bestimmte Prüfung nicht auftaucht, wurde i.d.R. beim Einstellen des Prüfungsangebotes ein Fehler gemacht. Zum Thema 'Prüfung ohne Anmeldung, Nichtantritt ohne Abmeldung' Seit März 2010 gilt: Wer zu einer Prüfung nicht angemeldet ist, darf zwar trotzdem zur Übung daran teilnehmen, eine Verbuchung von Leistungen in FlexNow erfolgt in diesem Fall aber grundsätzlich nicht. Wenn eine Anmeldung aus technischen Gründen nicht möglich ist, bitte rechtzeitig (spätestens eine Woche vor dem Prüfungstermin) beim Dozenten bzw. in seinem Sekretariat melden! Zum Thema Abmeldung: Wenn sich jemand zu einer Prüfung anmeldet, dann aber - ohne sich vorher wieder abgemeldet zu haben - nicht daran teilnimmt, für den wird diese Prüfung als nicht bestanden gewertet. Kurzfristige krankheitsbedingte Verhinderung ist hier natürlich ausgenommen, sie muss aber gemäß Prüfungsordnung nachgewiesen werden. Bei mündlichen Prüfungen erfolgt die Terminverwaltung i.d.R. nicht über FlexNow. Wer sich prüfen lassen will, macht einen Termin mit dem Prüfer aus und meldet sich dann in FlexNow an. Eine eventuelle Abmeldung muss auch bei solchen Prüfungen spätestens eine Woche vor dem ausgemachten Prüfungstermin sowohl in FlexNow als auch beim Prüfer erfolgen. Hinweis: Wenn man sich zu einer Prüfung in FlexNow angemeldet hat, muss man auch daran teilnehmen oder sich abmelden oder bei Verhinderung eine entsprechende Bescheinigung vorlegen. Dies gilt auch dann, wenn es sich um eine freiwillige Prüfungsleistung handelt, also z.B. eine Spezialveranstaltung. Solange auch nur ein Prüfungsvorgang noch offen ist, kann kein Abschlusszeugnis ausgestellt werden! Wechsel vom Bachelor- ins Masterstudium für BAföG-Empfänger Der Übergang vom Bachelor- zum Masterstudium ist für BAföG-Empfänger nicht ganz einfach. Mehr Informationen hierzu gibt's z.B. bei der Fachschaft Chemie und Mineralogie der Uni Leipzig oder bei Studis ONLINE . Und nun zur Liste der Fragen Wer sind meine Ansprechpartner? Zur Studienverlaufskontrolle gemäß §15 der Prüfungsordnung Welche Ergänzungsfächer gibt es im Bachelor-Studium? Zur Wichtung von Bachelor-Arbeit und Ergänzungsfächern (auch beschleunigtes Verfahren) Bewerbung um die Teilnahme am Beschleunigten Studium, weitere Infos hierzu Die Prüfungsordnung und ihre Abbildung auf FlexNow Einstellung des Prüfungsangebotes der Physik-Fakultät Studien- und Prüfungsangebote anderer Fakultäten Anmeldung, Prüfungs-Durchführung, Notenvergabe Spezielle Regelungen für zentral organisierte Modulprüfungen Anmeldung der Bachelor-Arbeit (? pdf-Formular); Formular Antrag auf Ausstellung der Bachelor-Urkunde Anmeldung der Master-Arbeit (? pdf-Formular); Formular Antrag auf Ausstellung der Master-Urkunde Nichtzulassung zu einer Prüfung, Abmeldung von einer Prüfung Wiederholungsprüfungen, Notenverbesserung Besuch von Master-Veranstaltungen während des Bachelor-Studiums Anerkennung von (externen) Prüfungsleistungen Studium von Lehramt Mathematik/Physik vertieft und parallel dazu Bachelor Physik (bzw. Doppelstudium allgemein) Zum Bachelor Wahlbereich: Vertiefung Physik (PHY-B-WV) Zum Bachelor Wahlbereich ? Sonstiges Zur Master Vertiefungsphase ? Sonstiges FlexNow-Anmeldung für IT-Kurse (Termine, Bereich Fachstudium und/oder IT-Ausbildung u.a.) Online-Kursanmeldungen und Prüfungsanmeldung in FlexNow Wer sind meine Ansprechpartner? Offizieller Ansprechpartner für alle Prüfungsangelegenheiten zum Bachelor- und Masterstudium Physik ist der Prüfungsausschuß. Vorsitz: Prof. Gießibl (für Studiengänge Physik, Nanoscience), Prof. Wettig (Studiengang Computational Physics). Weitere Mitglieder sind in dieser Liste zu finden. Bei Problemen sicher auch weiterhelfen wird die Prüfungssekretärin Physik, Frau Brigitta Lux und der Studiendekan. Zur Studienverlaufskontrolle gemäß §15 der Prüfungsordnung Ist bis zum Ende des zweiten Semesters des Bachelorstudiums nicht der Nachweis erbracht über eine Prüfungsleistung aus dem Modul PHY-B-P 1 sowie über eine Prüfungsleistung aus dem Modul PHY-B-P 11 oder über die bestandene Modulprüfung zu PHY-B-P 2, ist unverzüglich die Fachstudienberatung aufzusuchen. Welche Ergänzungsfächer gibt es im Bachelor-Studium? Gemäß Moduldatenbank alt und/oder Moduldatenbank neu gibt es zur Zeit die folgenden Ergängzungsfächer: PHY-B-WE1 - Chemie PHY-B-WE2 - Biologie PHY-B-WE3 - Mathematik PHY-B-WE4 - Volkswirtschaftslehre PHY-B-WE5 - Wissenschaftsgeschichte PHY-B-WE6 - Philosophie PHY-B-WE7 - Betriebswirtschaftslehre PHY-B-WE8 - Wirtschaftsinformatik PHY-B-WE9 - Politikwissenschaft PHY-B-WE10 - Bioinformatik PHY-B-WE11 - Biophysik PHY-B-WE12 - Didaktik der Physik Weitere Ergänzungsfächer können z.Z. nicht studiert werden! Besteht der Wunsch hierzu seitens eines Studierenden, so muss dieser Studierende zum Studiendekan der anbietende Fakultät gehen und diesen bitten, ein entsprechendes Studienangebot mit der zugehörigen Modulbeschreibung dem Physik-Studiendekan zuzuleiten. Danach wird der Fakultätsrat über die Zulassung dieses Fach für alle Studierenden als mögliches Ergänzungsfach befinden. Wichtig! Für alle Ergänzungsfächer gilt: die Anforderungen wurden in Absprache zwischen der Fremdfakultät und der Physik festgelegt. Z.T. sind die zu erbringenden Leistungen sehr detailliert vorgegeben, z.T. werden den Studierenden grosse Auswahlmöglichkeiten geboten. Alle nötigen Prüfungsleistungen (schriftlich oder mündlich) und dabei die Gesamtnote werden von der Fremdfakultät vergeben, die Prüfungsmodalitäten ausschließlich von ihr festgelegt. Die Fremdfakultät ist auch zuständig für die Einstellung des Prüfungsangebotes in FlexNow und die Verbuchung der Leistung. Bei jeglichen Unklarheiten bitte vor Besuch eines Ergänzungsfaches die zuständigen Personen in der Fremdfakultät kontaktieren, also z.B. Studiengangskoordinator, Studiendekan oder explizit aufgeführten Ansprechpartner. Nur hier kann Ihnen verbindlich mitgeteilt werden, ob Sie eine bestimmte Veranstaltung besuchen sollen, eine bestimmte Prüfung absolvieren dürfen, ob Ihnen hierfür Leistungspunkte gutgeschrieben werden können. Zur Wichtung von Bachelor-Arbeit und Ergänzungsfächern (auch beschleunigtes Verfahren) §35 der aktuellen Prüfungsordnung (ähnlich §24 (2) der alten PO) sagt aus: Die Gesamtnote der Bachelorprüfung setzt sich wie folgt zusammen: nach Leistungspunkten gewichtete Noten der Pflichtmodule PHY-B-P 1 (Experimentalphysik), PHY-B-P 2 (Mathematische Methoden und Lineare Algebra), PHY-B-P 6 (Theoretische Physik I: Klassische Physik), PHY-B-P 7 (Theoretische Physik II: Quantenmechanik I), PHY-B-P 9 (Struktur der Materie II: Festkörperphysik), i PHY-B-P 11 (Mathematik für Physiker), Noten des Vertiefungsmoduls PHY-B-WV 1 (Theoretische Physik III: Quantenmechanik II) oder PHY-B-WV 2 (Theoretische Physik IV: Quantenstatistik) sowie eines Ergänzungsfachs, gewichtet mit jeweils 10 LP, oder die Noten zweier Ergänzungsfächer, gewichtet mit jeweils 10 LP, Note der Bachelorarbeit, gewichtet mit 12 LP. Zum Beschleunigen Verfahren steht in §36 der aktuellen Prüfungsordnung: Studierende, die am beschleunigten Verfahren teilnehmen, besteht die Bachelorprüfung aus dem Nachweis von 180 LP. Diese werden erbracht durch das erfolgreiche Ablegen der folgenden ... Pflichtmodule und Lehrveranstaltungen im Umfang von insgesamt 142 LP: PHY-B-P 1 ? Experimentalphysik (Veranstaltungen a und b) (14 LP), PHY-E 1 ? Vorbereitungsmodul für die Aufnahme in das beschleunigte Verfahren: Veranstaltung c aus Modul PHY-B-P 1 ? Experimentalphysik (7 LP), PHY-B-P 2 ? Mathematische Methoden und Lineare Algebra (10 LP), PHY-B-P 3 ? Praktikum A (8 LP), PHY-B-P 4 ? Praktikum B (8 LP), PHY-B-P 5 ? Fortgeschrittenenpraktikum I (8 LP), PHY-B-P 6 ? Theoretische Physik I: Klassische Physik (16 LP), PHY-B-P 11 ? Mathematik für Physiker (20 LP), PHY-E 2 ? theoretischer und experimenteller Teil der Integrierten Vorlesung I (16 LP), PHY-E 3 ? theoretischer und experimenteller Teil der Integrierten Vorlesung II (16 LP), PHY-E 4 ? theoretischer und experimenteller Teil der Integrierten Vorlesung III (16 LP), PHY-E 6 ? Seminar und Seminarwochen des Beschleunigten Verfahrens (3 LP); einen Wahlbereich im Umfang von mindestens 26 LP; der Wahlbereich umfasst ein Ergänzungsfach gemäß § 30 Abs. 1, Satz 2, Nr.2, Buchst. b, ein Fachmodul aus dem Modulkatalog der Fakultät, Lehrveranstaltungen gemäß § 30 Abs. 1, Satz 2, Nr.2, Buchst. c; das erfolgreiche Anfertigen der Bachelorarbeit im Umfang von 12 LP. Bewerbung um die Teilnahme am Beschleunigten Studium §5 Abs.3 der Bachelor-Prüfungsordnung sagt: "Die Bewerbung zur Teilnahme am beschleunigten Verfahren kann jeweils für das kommende Sommersemester bis zu einem vom Prüfungsausschuss festgelegten Termin erfolgen." Interessenten am beschleunigten Verfahren mögen sich bitte direkt mit dem Studiendekan in Verbindung setzen. ? weitere Infos zum beschleunigten Studium Wichtig: Nachdem Sie in das beschleunigte Studium aufgenommen wurden, müssen Sie sich unbedingt im Prüfungssekretariat Physik in diesen Studiengang umschreiben lassen. Vergessen Sie dies, können Sie sich nicht zu Prüfungen dieses Studienganges anmelden, z.B. zum Integrierten Kurs. Die Prüfungsordnung und ihre Abbildung auf FlexNow Massgeblich für das Studium ist die jeweils gültige, genehmigte Prüfungs- und Studienordnung. Im Web gibt's neben der bisherigen Moduldatenbank den jetzt aktuellen neuen Modulkatalog. Die angebotenen Module mit Prüfungsformalitäten werden verbindlich beschrieben in der Modul-Katalog. Die Module teilen sich auf in die Bereiche Bachelor Pflichtbereich (PHY-B-P) Bachelor Wahlbereich: Vertiefung Physik (PHY-B-WV) Bachelor Wahlbereich: Ergänzungsfach (PHY-B-WE) Bachelor Wahlbereich: Sonstiges (PHY-B-WS) Es gibt unterschiedlich komplexe Module: ein Modul kann aus nur einem Modul-Element bestehen (z.B. Praktikum B). Wird diese Veranstaltung erfolgreich absolviert, wird die Leistung mit den entsprechenden Leistungspunkten (LPs) (benotet oder unbenotet, je nach Modulbeschreibung) in FlexNow vermerkt. ein Modul kann aus mehreren Elementen bestehen. In der Regel verlangt dann die Prüfungsordnung das Bestehen einer bestimmten Anzahl von Modulelementen (also z.B. 1 von 2 oder 2 von 4) und das Bestehen einer zusätzlichen Prüfung. In FlexNow ist in diesem Fall ein Eintrag zu jedem einzelnen Element und zu der Prüfung vorhanden. Die LPs für das Modul werden dem Studierenden erst dann gutgeschrieben, wenn er alle Voraussetzungen gemäß Prüfungsordnung erfüllt hat (also z.B. Bestehen eines Elementes und der Gesamtprüfung). Die Note des Moduls errechnet sich aus den Einzelresultaten gemäß den aktuellen Modulbeschreibungen. Alle möglichen Prüfungen mit den entsprechenden Regeln - unabhängig von einem bestimmten Termin oder Semester - werden von der Universitätsverwaltung (Frau Galusova) in FlexNow modelliert. Auch jedes neue Modul samt Beschreibung wird nach Verabschiedung an die Verwaltung zur Modellierung übermittelt. FlexNow enthält eine exakte Abbildung der Modalitäten gemäß dem Modulkatalog und der Prüfungsordnung. Dabei wird z.B. auch berücksichtigt, ob ein bestimmtes Prüfungsangebot für Bachelor Physik und/oder Nanoscience, Computational Science, oder/und auch für LA Gymnasien, LA mit Unterrichtsfach Physik gilt. Prüfungs- Instanzen (d.h. eine Prüfung in einem bestimmten Semester, mit konkreten Fristen zur An- und Abmeldung, mit bestimmten Prüfern etc.) werden in FlexNow nicht durch die Verwaltung eingestellt, sondern durch die jeweiligen Fakultäten (entweder zentral oder durch einzelne Lehrstühle, siehe nächster Punkt). Welche Prüfungen tatsächlich angeboten wurden und werden (alle Fächer), ist, wie erwähnt, über den Punkt "Termine" dieser FlexNow-URL ersichtlich (z.B. SS13 - Regulärer Termin - An- und Abmeldefristen). Einstellung des Prüfungsangebotes der Physik-Fakultät Es gibt grundsätzlich 2 Typen von Prüfungen in FlexNow: lehrveranstaltungsgebundene zentral organisierte Zur Zeit (Stand Februar 2013) sind folgende Prüfungen zentral organisiert und werden von F.Wünsch in FlexNow eingestellt. Eine An- und Abmeldung ist jederzeit möglich, da es sich i.d.R. um mündliche Prüfungen handelt, deren Termin individuell zwischen den Studierenden und den jeweiligen Prüfern vereinbart werden, es besteht Wahlmöglichkeit unter verscheidenen Prüfern: die Gesamt-Modul-Prüfungen zu Experimentalphysik A, Experimentalphysik B (nach der neuen Prüfungsordnung zusammengelegt), Theoretische Mechanik I: Klassische Mechanik sowie Mathematik für Physiker (komplett unter der Obhut der Mathematik-Fakultät) alle Prüfungen zu den Veranstaltungen der Master Vertiefungsphase Physik außer PHY-M-VF 8 die Prüfung zur Naturwissenschaftlichen Informatik (PHY-M-VE 1), zu Physik in der Medizin (PHY-M-VE2), Wirtschaftsphysik (PHY-M-VE6) Master Forschungsphase PHY-M-F1 und PHY-M-F2 Nanomaterialen (für Bachelor Nanoscience und Master Chemie) Weiter Infos zu den zentral organisierten Prüfungen gibt's weiter unten. Alle anderen Prüfungen sind lehrveranstaltungsgebunden Die Einstellung erfolgt durch den Lehrstuhl, der die Veranstaltung anbietet. Der Lehrstuhl legt die Anmeldefristen fest, ist auch zuständig für eventuelle Nachmeldungen. Jeder Dozent sieht - ohne weitere Aktionen des Prüfungssekretariats - sofort den Stand der Anmeldungen zu seinen Prüfungen (bei zentral organiserten Prüfungen ist das leider nicht ganz so ...) Sonderfälle sind die Bachelor-Arbeit und das F-Praktikum. Hier wird kein (öffentliches) Prüfungsangebot in FlexNow eingestellt, die Anmeldung von Studierenden und die Verbuchung der Leistungen erfolgt direkt durch das Prüfungssekretariat (bei der Bachelor-Arbeit) bzw. durch das Sekretariat Prof. Huber (Frau Franzke - F-Praktikum). Studien- und Prüfungsangebote anderer Fakultäten Gemäß Modulkatalog werden Module auch angeboten durch die Fakultäten für Mathematik, Chemie, Biologie, Wirtschaft, Philosophie (inkl. Wissenschaftsgeschichte), durch die Medizin und durch das Rechenzentrum. Ganz allgemein gilt, dass die veranstaltenden Fakultäten verantwortlich sind für das Einstellen der entsprechenden Prüfungsangebote und die komplette Eintragung aller Ergebnisse. Das Prüfungssekretariat Physik schaltet am Ende nur die Ergebnisse im Web frei. Auch für die Anerkennung von Fremdleistungen ist die entsprechende Fakultät zuständig, das Procedere entspricht aber dem der Physik. Konkret handelt es sich im Augenblick (im Bachelor-Bereich) um folgende Veranstaltungen, die auch in der Moduldatenbank ausführlich dokumentiert sind. PHY-B-P 2 - Modulelement Lineare Algebra PHY-B-P11 - Mathematik für Physiker PHY-B-WE1 - Ergänzungsfach Chemie PHY-B-WE2 - Ergänzungsfach Biologie PHY-B-WE3 - Ergänzungsfach Mathematik PHY-B-WE4 - Ergänzungsfach Volkswirtschaftslehre PHY-B-WE5 - Ergänzungsfach Wissenschaftsgeschichte PHY-B-WE6 - Ergänzungsfach Philisophie PHY-B-WE7 - Ergänzungsfach Betriebswirtschaftslehre PHY-B-WE8 - Ergänzungsfach Wirtschaftsinfornmatik PHY-B-WE9 - Ergänzungsfach Politikwissenschaften PHY-B-WE10 - Ergänzungsfach Bioinformatik PHY-B-WE11 - Ergänzungsfach Biophysik PHY-B-WS7 - Wahlbereich - IT und Medien Analoges gilt für die Module der Master Vertiefungsphase - Ergänzungsfach. Hin und wieder gibt es Probleme bei der Umsetzung dieser Regelung. Solche Probleme werden natürlich niemals Studierenden irgendwelche Nachteile bringen - wir werden sie hausintern auf geeignete Art und Weise lösen. In solchen Fällen müssen erbrachte Leistungen immer durch die veranstaltende Fakultät schriftlich bestätigt werden (z.B. durch Scheine, durch vom Dozenten unterschriebene Teilnehmerlisten etc.). Das Prüfungsamt Physik kann dann damit die Leistungen zu gegebener Zeit in FlexNow eingepflegen. Für PHY-B-WE 3 - Ergänzungsfach Mathematik werden alle Veranstaltungen im Fach Mathematik aus dem Bachelor- (und Master-)Bereich gemäß Vorlesungsverzeichnis der Naturwissenschaftlichen Fakultät I anerkannt. Ausgeschlossen sind die Veranstaltungen, die im Bachelor-Physik-Modul 'Mathematik für Physiker' genannt sind.) Anmeldung, Prüfungs-Durchführung, Notenvergabe Bei Veranstaltungen, die während der offiziellen Vorlesungszeit abgehalten werden (also die meisten Vorlesungen und Praktika), gilt nach Beschluss des Fakultätsrats Physik: die Anmeldung zu einer veranstaltungsbegleitenden Prüfung muss bis 1 Woche vor der ersten Prüfung, eine eventuelle Abmeldung auch bis 1 Woche vor der ersten Prüfung erfolgen. Sonderregelungen gelten für anderweitige Module/Modulelemente, z.B. Blockkurse - hier weist der Dozent auf die entsprechenden Fristen hin. Für die IT-Blockkurse aus dem Bachelor Wahlbereich: Sonstiges (B-WS) sowie Master Vertiefungsphase: Sonstiges (M-VS) kann man sich z.B. während der jeweiligen Kurszeit in FlexNow eintragen. Für zentral organisierte Modulprüfungen kann man sich jederzeit zu einer Prüfung anmelden - es existiert in FlexNow jeweils ein reguläres und ein Wiederholungsangebot für jedes Semester. Details siehe nächsten Punkt. Nach Abschluß der Prüfung (z.B. nach Bewertung der Klausur) verbucht der prüfende Dozent die Leistungen in FlexNow. Hat er alle Buchungen beendet, meldet er dies im Prüfungsamt, wo sozusagen ein Schalter umgelegt wird. Danach kann er keine Änderungen an den Verbuchungen mehr durchführen, ab diesem Zeitpunkt sind die Leistungen für die Studierenden einsehbar. Spezielle Regelungen für zentral organiserte Modulprüfungen Laut Prüfungsordnung und Modulbeschreibungen sind im Bachelor-Pflichtbereich zusätzlich zu den vorlesungsbegleitenden Prüfungen folgende Modulprüfungen abzulegen, die mehrere Veranstaltungen umfassen: Prüfung in Experimentalphysik A (Mechanik und Elektrodynamik), Prüfung in Experimentalphysik B (Wellen und Quanten sowie Thermodynamik) (in der neuen Prüfungsordnung zusammengefasst) Prüfung in Theoretischer Physik I - Klassische Physik (Klassische Mechanik und Elektrodynamik) Mathematik für Physiker - komplett unter der Obhut der Fakultät für Mathematik, wird daher hier nicht weiter behandelt Seit 22. Juli 2010 sind auch die Prüfungen zu (fast) allen Modulen aus der Master-Vertiefungsphase: Physik (Fachmodule) (PHY-M-VF) als Modulprüfungen organisiert (Ausnahme: PHY-M-VF8). Ebenso sind die mündliche Prüfungen zur Naturwissenschaftliche Informatik (Master-Vertiefungsphase: Ergänzungsfach, Modul PHY-M-VE1), zur Physik in der Medizin (Master-Vertiefungsphase: Ergänzungsfach, PHY-M-VE2) und zur Wirtschaftsphysik (Master-Vertiefungsphase: Ergänzungsfach, PHY-M-VE6) zentral organisiert. Zentral organisiert sind auch die Module PHY-M-F1 und PHY-M-F2 aus der Master-Forschungsphase. Das Procedere für alle Modulprüfungen ist inzwischen folgendermaßen: Für jedes Semester (Sommer und Winter) ist ein reguläres Prüfungsangebot in FlexNow eingestellt sowie eine Wiederholungsprüfung. Zur Wiederholungsprüfung kann sich nur anmelden, wer bereits einmal die entsprechende Prüfung nicht bestanden hat. Zur ersten Wiederholungsprüfung müssen Sie sich immer selbst anmelden, eine automatische Anmeldung erfolgt prinzipiell nicht! Die erste Wiederholungsprüfung muss spätestens ein Jahr nach der nicht bestandenen regulären Prüfung stattfinden. Die Anmeldung zur regulären und zur ersten Wiederholungsprüfung ist im Web spätestens freigeschaltet einen Monat vor Beginn des jeweiligen Semsters bis zum Ende dieses Semesters (also mindestens 7 Monate lang). Es wird durch die Fakultät Physik eingestellt (F.Wünsch), nicht durch einen bestimmten Lehrstuhl, auch nicht durch das zentrale Prüfungsamt der Universität. Jeder Studierende hat bei den Experimentalphysik-Prüfungen die Auswahl unter allen Prüfern des Instituts für experimentelle und Angewandte Physik, bei der Theorie-Prüfung unter denen des Instituts für Theoretische Physik, siehe http://www.physik.uni-regensburg.de/forschung/institute.phtml. Bei den Prüfungen zur Master-Vertiefungsphase: Physik (Fachmodule) gilt Analoges, nur haben wir hier noch unterschieden zwischen theoretischen Hochenergie- und Festkörperphysikern. Bei Physics of Nanostructures können die Prüfer aus der Experimentellen und Angewandten Physik kommen oder aus der Theoretischen Festkörperphysik. Bei der Naturwissenschaftlichen Informatik ist die Auswahl noch größer - jeder bestellte Prüfer aus der Mathematik/Physik/Biologie/Chemie kann als (Erst-)Prüfer ausgewählt werden. Der ganze Anmeldevorgang muss so ablaufen: Klären Sie als erstes die Prüfung und den Termin mit dem gewünschten Prüfer ab. Eine Terminplanung für mündliche Prüfungen wird nicht über FlexNow realisiert. Oft liegen in den Sekretariaten der Professoren, die die zugehörigen Vorlesungen gehalten haben, entsprechende Terminlisten aus. U.u. bieten manche Prüfer anstelle einer mündlichen Prüfung eine Klausur an - das vereinfacht natürlich das Verfahren - in diesem Fall ist eine persönliche Absprache nicht nötig. Die Anmeldung in FlexNow muss spätestens eine Woche vor dem Prüfungstermin erfolgen, und zwar beim Prüfungsangebot desjenigen Semesters, in dem der Prüfungstermin liegt (Terminangabe bei der Webanmeldung beachten!). Dabei müssen Sie den ausgewählten Prüfer in FlexNow angeben. Eine eventuelle Abmeldung muss sowohl dem Prüfer rechtzeitig angezeigt werden (entfällt bei Klausur) als auch in FlexNow erfolgen. Die Abmeldung muss spätestens eine Woche vor dem geplanten Prüfungstermin erfolgen. Kurzfristige krankheitsbedingte Verhinderung ist hier natürlich ausgenommen. Falls eine zweite Wiederholung notwendig wird, erfolgt die Anmeldung direkt über das Prüfungssekretariat Physik, nicht über das Web. Zuvor muss aber unbedingt eine Absprache mit dem gewünschten Prüfer erfolgen. Für die Modulprüfungen aus dem Bachelor-Pflichtbereich gilt außerdem noch: Die gesamten Leistungspunkte für das Modul werden erst dann gutgeschrieben, wenn sowohl ein Leistungsnachweis in einer Teilveranstaltungen vorliegt als auch die Modulprüfung erfolgreich abgelegt wurde, siehe Modulbeschreibungen. Wenn in der Modulbeschreibung nicht explizit anders vermerkt, kann die Modulprüfung auch bereits abgelegt werden, wenn noch keine der Teilveranstaltungsprüfungen bestanden wurde - dieses Vorgehen wird aber nicht empfohlen. Die Note für das Modul errechnet sich aus der Note der vorlesungsbegleitender Prüfung sowie der Modulprüfung gemäß Modulkatalog. Wurde zu mehr Teilveranstaltungen als vorgeschrieben eine Prüfung erfolgreich abgelegt, geht i.d.R. nur die beste Note in die Gesamtbewertung des Moduls ein. Anmeldung der Bachelor-Arbeit Wenn Sie die Bachelor-Arbeit angehen wollen, informieren Sie sich bitte erst über das Angebot, z.B. über diesen Link. Die Zuteilung eines bestimmten Themas erfolgt aber prinzipiell erst nach persönlicher Absprache mit der/dem Arbeitsgruppenleiter(in). Wie geht's dann weiter? Sie gehen danach zu Frau Lux ins Prüfungssekretariat Physik. Bei Frau Lux unterzeichnen Sie eine Erklärung (keine endgültig nichtbestandene Vordiplom-, Zwischen-, Bachelor-, Diplom- oder Masterprüfung im Studiengang Physik usw.). Dann trägt Frau Lux Ihre(n) Betreuer(in), Ihr Thema und den Beginn der Arbeit in FlexNow ein. Der Fakultätsrat hat am 12.5.10 beschlossen, dass in Zukunft bei Anmeldung der Bachelor-Arbeit nur noch 120 Leistungspunkte nachgewiesen werden müssen. Diesen Nachweis brauchen Sie aber nicht vorlegen, FlexNow kennt ja Ihre Leistungen. Noch fehlende Leitungspunkte für das Bachelor-Studium können Sie bis zum Ende des 6. Semsters nachreichen. I.d.R. spätestens nach 3 Monaten geben Sie die fertige Arbeit bei Frau Lux ab, der Abgabetermin wird wieder in FlexNow vermerkt. Im Detail gilt natürlich die Prüfungsordnung. Anmeldung der Master-Arbeit Im ersten Schritt überlegen Sie sich immer, in welcher Arbeitsgruppe Sie die Forschungsphase (Module M-F1 bis F3 nach der alten bzw. PHY-M-F1 und PHY-M-F2 nach der neuen Prüfungsordnung) absolvieren wollen. Sie starten mit der dreimonatigen (nach alter PO) Fachlichen Spezialisierung (M-F1), die Sie auch in FlexNow anmelden. Dabei werden Sie nach dem Dozentennamen gefragt. In der neuen Prüfungsordnung ist PHY-M-F1 6 Monate lang, die zugehörige Modulbeschreibung ist hier zu finden. Kommen Sie mit dem Thema zurecht, werden Sie in dieser Arbeitsgruppe auch das Modul M-F 2: Methodenkenntnis und Projektplanung absolvieren (nur alte Prüfungsordnung). Zu Methodenkenntnis und Projektplanung müssen Sie sich auch in FlexNow anmelden. Anschließend werden Sie die eigentliche Masterarbeit (M-F3) absolvieren; in der neuen Püfungsordnung hat sie die Modul-Nummer PHY-M-F2. Die Anmeldung zur Masterarbeit jedoch erfolgt über das Prüfungssekretariat Physik, dabei müssen Sie dieses Formblatt ausgefüllt abgeben. Die Bearbeitungszeit der Masterarbeit soll ab Themenvergabe sieben Monate nicht überschreiten. Am Ende ist die Arbeit wieder im Prüfungssekretariat abzugeben. Nichtzulassung zu einer Prüfung, Abmeldung von einer Prüfung Frage: Ich habe mich für eine Klausur angemeldet, werde aber zur Teilnahme an der Klausur (z.B. wegen unregelmäßiger Übungsgruppenbesuche, unvollständig eingereichter Hausaufgaben etc.) nicht zugelassen. Gilt dies als ein rechtzeitiger Rücktritt von der Prüfung? Antwort: Nein! Wenn Sie sich für die Klausur in einer Veranstaltung anmelden, dann bekunden Sie damit Ihr Bestreben, diese Veranstaltung erfolgreich zu absolvieren. Wenn Sie die zum erfolgreichen Bestehen der Veranstaltung nötigen Vorleistungen nicht erbringen, dann wird der gesamte Prüfungsversuch als nicht ausreichend gewertet. Sie müssen also in diesem Fall rechtzeitig (fragen Sie im Zweifel Ihren Dozenten) von der Anmeldung zur Klausurteilnahme zurücktreten. Wiederholungsprüfungen, Notenverbesserung Eine Wiederholungsmöglichkeit wird in der Regel für alle Prüfungen angeboten. Eine Wiederholung ist nur möglich, wenn die ursprüngliche Prüfung nicht bestanden oder versäumt wurde oder die Zulassungsvoraussetzungen noch nicht erfüllt waren. Man muss sich selbst aktiv zu einer Wiederholungsprüfung anmelden. Diese Anmeldung ist möglich, nachdem der ursprüngliche Prüfungsprozess dem Prüfungssekretariat als abgeschlossen gemeldet wurde. Die erste Wiederholung soll i.d.R. gemäß Prüfungsordnung nach maximal 6 Monaten stattfinden, die zweite Wiederholung muss spätestens ein Jahr nach dem erstmaligen Nichtbestehen erfolgen. Sonderregelung für Veranstaltungen der Theoretischen Physik und Struktur der Materie Die Veranstaltungen der Theoretischen Physik I (Klassische Mechanik im SS, Elektrodynamik im WS) sind weitestgehend identisch zu den entsprechenden Veranstaltungen für Lehramt Gymnasien ein Semester später. Wenn Sie also z.B. im Sommersemester die Klausur zur Theoretischen Mechanik für Bachelor nicht bestanden haben, dann können Sie entweder die zu dieser Veranstaltung angebotene Nachholklausur mitschreiben, oder im darauf folgenden Wintersemester die Vorlesung "Theoretische Mechanik für LA Gymnasien" hören und sich dort zur Klausur anmelden, welche dann Ihre erste Wiederholung ist. Analoges gilt für die Veranstaltungen Quantenmechanik und Thermodynamik und für Struktur der Materie I (Atome und Moleküle). Für die weiteren Veranstaltungen zur Struktur der Materie (Festkörperphysik, Kerne und Teilchen) gilt diese aber nicht, da hier die entsprechenden Veranstaltungen ganz unterscheidlichen Umfang haben. Notenverbesserung bei Modulprüfungen Eine Wiederholung einer bestandenen Prüfung zur Notenverbesserung ist nach dem oben Gesagten nicht möglich. Was aber definitiv geht: jemand hat die Prüfung zur Vorlesung Experimentalphysik I - Mechanik bestanden sowie die Prüfung zum Gesamtmodul Experimentalphysik. Somit steht die Modulnote eigentlich fest. Legt der Studierende später noch zusätzlich die Prüfung zur Vorlesung Experimentalphysik II - Elektrodynamik ab, und zwar mit einer besseren Note als bei der Vorlesung Mechanik, verbessert er dadurch auch nachträglich seine Modulnote von Experimentalphysik. Analoges gilt für Theoretische Physik A und Mathematik für Physiker. Besuch von Master-Veranstaltungen während des Bachelor-Studiums Alle Studierenden der Bachelor-Studiengänge können auch vorzeitig schon Master-Veranstaltungen besuchen und erfolgreich absolvieren. Sie werden zunächst dem Bachelor-Wahlbereich 'Sonstiges' zugeordnet. Eventuell vergeben Noten werden hier nicht berücksichtigt, jedoch werden die Veranstaltungen im Bachelor-Zeugnis aufgelistet. Wenn Sie nach dem Bachelor-Studium noch den Master machen wollen, greift folgendes Verfahren: 9 Punkte aus dem Bachelor-Bereich 'Sonstiges' sind ja für das Bachelor-Studium verpflichtend (Wahlbereich insgesamt: 41, davon 2 Ergänzungsfächer zu je 16 Punkten oder 1 Ergänzungsfach zu 16 Punkten und 16 Punkte Vertiefung Physik, also bleiben 9 Punkte). Diese 9 Punkte können Sie natürlich nicht nochmals im Master-Studium nutzen. Vor der Erstellung des Bachelor-Zeugnisses muss jeder Studierende im Prüfungsamt eine schriftliche Erklärung darüber abgeben, welche Veranstaltungen in den Masterbereich verschoben werden sollen. Anerkennung von (externen) Prüfungsleistungen Die Anerkennung von (externen) Prüfungsleistungen erfolgt folgendermaßen: Wenn möglich, meldet sich der Studierende zu der entsprechenden Prüfung in FlexNow an. Ein zuständiger Prüfer der Physik stellt die Gleichwertigkeit der externen Leistung mit dieser Prüfungsleistung fest. Handelt es sich um eine Veranstaltung einer anderen Fakultät (z.B. Mathematik), muss natürlich ein Dozent aus dieser Fakultät gefunden werden, der die Gleichwertigkeit bestätigt. Mit der Bescheinigung der Gleichwertigkeit stellt der Studierende einen Antrag auf Anerkennung an den Vorsitzenden des Prüfungsausschusses (formlos oder auch mit diesem Formular). Findet sich kein Dozent, der die Gleichwertigkeit bestätigen kann, entscheidet darüber der Bachelor-Prüfungsausschuß. Die Verbuchung in FlexNow erfolgt am Ende wieder durch das Prüfungssekretariat. Hinweis: Für Studierende des Lehramtes muss für jede einzelne anzuerkennende Veranstaltung zunächst dieses Formular ausgefüllt werden. Ein Fachdozent sowie der Vorsitzende des LA-Prüfungsausschusses (in der Physik Prof. Rincke) bestätigen die Gleichwertigkeit, die Leistung verbucht dann am Ende das zentrale Prüfungsamt. Unabhängig von Obigem ? Wie schon im Abschnitt "Wiederholungsprüfungen" angemerkt, können einige Vorlesungen des Lehramtsstudienganges (z.B. Theoretische Mechanik, Elektrodynamik, Quantenmechanik, Thermodynamik) auch für den Bachelor-Studiengang angerechnet werden. Prozedere: Wenn die Anmeldung z.B. für die LA-Veranstaltung Theoretische Physik I (Mechanik) für LA möglich ist, können sich auch Bachelor-Studenten anmelden. Hat ein Bachelor-Studierender diese Veranstaltung erfolgreich absolviert, wird ihm der Erfolg im Bachelor-Modulelement Theoretische Physik Ia: Klassische Mechanik gutgeschrieben. Studium von Lehramt Mathematik/Physik vertieft und parallel dazu Bachelor Physik (bzw. Doppelstudium allgemein) Frage: Ich studiere zur Zeit Lehramt vertieft auf Mathe/Physik im zweiten Semester, möchte aber nächstes Jahr den Physik Bachelor zusätzlich machen. Ich habe dieses und letztes Semester schon die gleichen Vorlesungen wie die Physik-Bachelor gehört, habe alle Versuche des A1 Praktikums mitgemacht und auch Noten auf allen meinen 'Scheinen'. Das erforderliche Nebenfach plane ich durch die Mathevorlesungen, die ich im Lehramt sowieso höre, abzudecken. Können Sie mir sagen, wie ich bei der Einschreibung zum Bachelor am besten vorgehen soll, an wen ich mich zum Beispiel zur Anerkennung meiner Studienleistungen wenden soll? Antwort: Bitte wenden Sie sich an die Studentenkanzlei, um sich im kommenden Semester in ein Zweitstudium Physik-Bachelor einzuschreiben. Für die Anerkennung der Studienleistungen gilt (s.o.): Gehen Sie zu dem jeweiligen Dozenten, der zuletzt die betreffende Veranstaltung abgehalten hat. Er kann Ihnen gegebenenfalls die Gleichwertigkeit bestätigen. Sie können ein Prüfungsergebnis nur dann verwerten, wenn Sie sich zuvor korrekt für diese Prüfung in FlexNow angemeldet haben. Dies ist aber nur möglich, wenn Sie für den zugehörigen Studiengang auch eingeschrieben haben. Bei einem Doppelstudium ganz allgemein sollten Sie daher so vorgehen: Sie wählen sich einen primären Studiengang, schreiben sich hier ein, und erfüllen Stück für Stück alle Anforderungen dieses Studienganges. Sie melden sich auch zum Zweitstudium an. Jetzt können Sie auch Prüfungsleistungen des Zweitstudium erbringen, die im Erststudium nicht erforderlich waren - eine FlexNow-Anmeldung ist ja jetzt möglich. Bei gleichen Prüfungsleistungen in den beiden Studiengängen: Eine Doppelverbuchung erfolgt prinzipiell nicht automatisch. Sie erbringen zunächst die Leistung im primären Studiengang. Dann gehen Sie in das zuständige Prüfungssekretariat und lassen sich die Leistung auch für das Zweitstudium anerkennen. Beispiel: Sie haben Analysis III erfolgreich absolviert und studieren primär Bachelor Physik, sekundär Bachelor Mathematik. Damit Ihnen Analysis III auch für das Mathematik-Studium anerkannt wird, gehen Sie in das Prüfungsamt Mathematik. Bitte beachten Sie auch den Link Hinweise für Studierende des Lehramts Gymnasien Physik/Mathematik, die gleichzeitig den Bachelor Physik erweben möchten. Zum Bachelor Wahlbereich: Vertiefung Physik (PHY-B-WV) Für diesen Bereich sind gemäß Prüfungsordnung zwei Positionen in FlexNow modelliert: Vertiefung 1 und Vertiefung 2. Bei beiden kann man entsprechend dem Modulkatalog wählen unter Theoretische Physik III: Quantenmechanik II Theoretische Physik IV: Quantenstatistik Fortgeschrittenenpraktikum II Möchte jemand alle drei Veranstaltungen absolvieren, so muss sie/er die dritte Veranstaltung im FlexNow-Bereich 'Sonstiges' anmelden. Ein Tausch von Veranstaltungen zwischen den Bereichen 'Vertiefung Physik' und 'Sonstiges' durch das Prüfungsamt Physik ist möglich. Zum Bachelor Wahlbereich ? Sonstiges Für das Bachelor-Studium Physik verwertbar sind hier insgesamt Leistungen im Umfang von max. 9LPs (aus der expliziten Liste gemäß Moduldatenbank oder beliebige Veranstaltungen der Uni Regensburg). Erbringt ein Studierender hier weitergehende Leistungen, so können diese durch das Prüfungsamt Physik in FlexNow eingetragen und später auf dem Bachelor-Zeugnis als Anmerkung angezeigt werden. Hinweis: Wird im Bachelor-Studiengang Physik freiwillig die Veranstaltung Nanomaterialien aus dem Studiengang Nanoscience besucht, so kann nur das komplette Modul NS-P8 (Teil I - Grundlagen und Teil 2 - Strukturierung und Selbstorganisation) eingebracht werden. Zur Master Vertiefungsphase ? Sonstiges Gemäß Fakultätsratsbeschluss vom 10.11.2010: Die Liste der hier verwertbaren Veranstaltungen wird sich von Jahr zu Jahr ändern. Es werden z.B. regelmäßig neue Spezialvorlesungen zu aktuellen Themen der Physik angeboten. Im Rahmen der Vertiefungsphase - Sonstiges (M-VS) können (und sollen) mehrere dieser Vorlesungen absolviert werden. Alle im jeweils aktuellen Vorlesungsverzeichnis Physik unter der Rubrik 'Spezialvorlesungen' angebotenen Veranstaltungen, die mit der Bemerkung "Bestandteil von Master Vertiefungsphase - Sonstiges" versehen sind, können hier eingebracht werden. Unter solchen Spezialvorlesungen sind i.d.R. auch fortgeschrittene IT-Veranstaltungen der Physik gelistet, soweit sie nicht im Modulkatalog explizit aufgeführt sind. Mit Genehmigung des Prüfungsausschusses können auch Vorlesungen anderer naturwissenschaftlicher Fakultäten (mit Leistungsnachweis) eingebracht werden. Ebenso kann eingebracht werden aus dem Studiengang Bachelor Nanoscience der Teil A des Nanowissenschaftlichen Praktikums (NS-P8a, nanowissenschaftliche Versuche), nicht aber das Modul Nanomaterialien. Bisher nicht verrechnete Veranstaltungen aus dem Bachelor Wahlbereich Vertiefung Physik, sowie Fachmodule Physik oder Veranstaltungen aus den naturwissenschaftlichen Ergänzungsfächern können im Sinne einer Spezialvorlesung (s.o.) auch unter "Sonstiges" eingebracht werden. Veranstaltungen aus dem Bereich "IT und Medien" sowie (elementare) IT-Veranstaltungen (Programmieren in C und C++, LaTeX, Matlab, Maple, Java) aus dem Bachelor Wahlbereich - Sonstiges können mit insgesamt bis zu 10 LP eingebracht werden. Veranstaltungen aus der Gruppe "Sonstiges" werden in der Regel nicht benotet. FlexNow-Anmeldung für IT-Kurse Um an unseren IT-Kursen teilnehmen zu können, müssen Sie sich nach wie vor zunächst einmal anmelden, und zwar ab Frühjahr 2013 in HIS LSF. ? nur so können wir planen. Die FlexNow-Anmeldung erfolgt bei den Blockkursen immer in der Zeit, in der der Kurs läuft - wenn Sie Probleme mit der Anmeldung haben, unbedingt gleich beim Kursleiter rühren (am besten per Mail)! Dazu brauchen wir Ihren Namen, Matrikelnummer und Studienfach/Abschluss. Nur so können wir den Problemen nachgehen. IT-Kurse, die sie bereits früher absolviert haben, werden bei Vorlage der entsprechenden Scheine vom Prüfungssekretariat nachträglich in FlexNow verbucht. IT-Ausbildung und / oder Fachstudium? Eine erfolgreich besuchte IT-Veranstaltung kann gleichzeitig für das Fachstudium verwendet werden (z.B. bei Bachelor-Physik im Bereich Bachelor Wahlbereich: Sonstiges (B-WS) bzw. Master Vertiefungsphase: Sonstiges (M-VS) und für die IT-Zusatzqualifikation der Universität Regensburg. Das Procedere ist wie folgt: Das zentrale Prüfungsamt empfiehlt: wenn irgendwie möglich, melden Sie sich in FlexNow unter dem Fachstudium an. Wenn Sie die Veranstaltung zusätzlich im Rahmen der IT-Zusatzqualifikation nutzen wollen, besuchen Sie bitte Frau Dr. Bachmaier im Rechenzentrum (Raum RZ 0.09, E-Mail: Regine.Bachmaier(at)rz..., Telefon 0941 943-4856). Sie wird dann mit Ihnen zusammen die Leistung auch für die IT-Zusatzausbildung verbuchen. Jede einzelne erfolgreich besuchte Veranstaltung der IT-Ausbildung wird in einem sog. Transcript of Records gelistet, das Sie auch bei Frau Dr. Bachmaier bekommen. Haben Sie mehrere Veranstaltungen gemäß den Bedingungen der studienbegleitenden IT-Ausbildung erfolgreich absolviert, gibt es zusätzlich ein Zeugnis. Hatten Sie sich in FlexNow bereits unter der Rubrik IT-Ausbildung angemeldet, wollen die Veranstaltung aber (auch) für Ihr Fachstudium nutzen, so gehen Sie bitte zu dem für Sie zuständigen Prüfungsamt, also z.B. bei Bachelor Physik zu Frau Lux. Sie kann Ihnen eine erfolgreich besuchte Veranstaltung der IT-Zusatzausbildung auch für das Fachstudium Physik anerkennen. Online-Kursanmeldungen und Prüfungsanmeldung in FlexNow FlexNow ist ein reines Prüfungsverwaltungssystem. Eine Online-Anmeldung mit HIS-LSF über die entsprechenden Links im Vorlesungsverzeichnis dient zur Organisation einer Veranstaltung, zur Einteilung in Übungsgruppen etc. Eine Zusammenführung wäre nur unter größten Schwierigkeiten zu realisieren. Daher werden auch in Zukunft weiterhin beide Systeme verwendet.   Impressum Letzte Änderung: 20.03.2013 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/physrgb.phtml</field>
<field name="title">Physik ? Studium</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/physrgb.phtml</field>
<field name="content">Physik ? Studium Physik ? Studium Studieren an der Physik-Fakultät in Regensburg Sie interessieren sich für Physik? Prima, bei uns sind Sie richtig! Erinnern Sie sich an früher, als Sie Astronaut werden wollten, oder Pilot? Und auch jetzt wissen Sie vielleicht schon detailliert, woran Sie später einmal forschen wollen? Vermutlich ändern Sie Ihre Meinung aber noch ein paar mal. Das ist normal und gut so, und es ist genau unsere Stärke: Wir bieten die Abschlüsse ?Bachelor of Science? in drei verschiedenen Studiengängen an: Den klassischen Studiengang Physik mit einer fachlich großen Breite sowie neue Studiengänge in Nanoscience und in Computational Science, die eine schnellere Praxisnähe bieten. Damit möchten wir die Forschungsschwerpunkte unserer Fakultät hervorheben und Ihnen ein besonders flexibles Studieren ermöglichen: Sie können sich bis etwa Mitte des Studiums ohne Zeitverlust zwischen unseren Studiengängen umentscheiden, wenn sich Ihre persönlichen Interessen ändern ? wir erkennen Ihre Studienleistungen natürlich voll an und freuen uns auf Ihr Engagement! (P.S.: Für ganz besonders Leistungsfähige bieten wir ab dem 3. Semester auch einen Elitestudiengang an; Studium + Promotion (Dr. rer. nat.) in nur 12 Semestern!) Ein Bachelor-Studium in Physik sieht typischerweise so aus: Sem. Pflichtbereich Wahlbereich 1 Experimental- Physik Mathematik I Physikalische Praktika Physik - Vertiefung, Ergänzung 2 Theoretische Physik Mathematik II 3 Mathematik III 4 5 6 Bachelorarbeit Im Nanoscience-Studiengang werden Sie weniger Mathematik und Quantenfeldtheorie, mehr Chemie und Praktika, und besonders schnell die Festkörperphysik kennenlernen. Computational Science ist interdiziplinär angelegt und betont das ABC computergestützter Verfahren in den Naturwissenschaften. Lehramt bei uns können Sie folgende Lehramtsstudiengänge studieren: Lehramt Physik für Gymnasien (in der Regel zusammen mit Mathematik) Lehramt Physik für; Realschulen Lehramt Physik für Grund- und Hauptschulen sowie NaturWissenschaft und Technik als Didaktikfach für das Lehramt an Grund- und Hauptschulen Was müssen Sie mitbringen? Lassen wir einmal die Formalitäten (= Abitur o.ä.) beiseite: Um die ganze Faszination und Schönheit der Physik zu begreifen und aufregende eigene Erfolge zu feiern, brauchen Sie im Studium ein ausgeprägtes Interesse an der Physik, Ausdauer und Biss, Neugierde, viel Offenheit für Neues, und etwas Mut, sich an ein schwieriges Studium zu wagen. Sie werden es nicht bereuen: Es ist kein Zufall, dass Sie später einen sehr chancenreichen und krisenfesten Abschluss haben, der Ihnen auch jenseits der Physik viele überraschende Möglichkeiten eröffnen wird ? sogar Bundeskanzlerin kann man damit werden! Ob Sie in der Schule Leistungskurse in Mathe und Physik besucht haben, ist dabei nicht so entscheidend. Viel wichtiger ist erfahrungsgemäß, dass Sie mit der Schulmathematik(!) keine nennenswerten Schwierigkeiten hatten. Physik und Regensburg passen gut zusammen! Die Stadt Regensburg mit ihrer einmaligen historischen Altstadt (UNESCO Welterbe) sowie die landschaftlich sehr reizvolle Umgebung mit zahlreichen Sportmöglichkeiten haben Ihnen neben dem Studium einiges an Flair, Kultur und Abwechslung zu bieten. Gerade diese große Dichte, Nähe und Vielfalt des Angebots werden Sie Dank der sehr kurzen Wege in intensiveren Lernphasen ganz besonders schätzen. Autor: Dr. Jörg Mertins / FW   Impressum Letzte Änderung: 20.03.2013 von Webmaster</field>
<field name="important">Physik ? Studium Physik ? Studium Studieren an der Physik-Fakultät in Regensburg Sie interessieren sich für Physik? Prima, bei uns sind Sie richtig! Erinnern Sie sich an früher, als Sie Astronaut werden wollten, oder Pilot? Und auch jetzt wissen Sie vielleicht schon detailliert, woran Sie später einmal forschen wollen? Vermutlich ändern Sie Ihre Meinung aber noch ein paar mal. Das ist normal und gut so, und es ist genau unsere Stärke: Wir bieten die Abschlüsse ?Bachelor of Science? in drei verschiedenen Studiengängen an: Den klassischen Studiengang Physik mit einer fachlich großen Breite sowie neue Studiengänge in Nanoscience und in Computational Science, die eine schnellere Praxisnähe bieten. Damit möchten wir die Forschungsschwerpunkte unserer Fakultät hervorheben und Ihnen ein besonders flexibles Studieren ermöglichen: Sie können sich bis etwa Mitte des Studiums ohne Zeitverlust zwischen unseren Studiengängen umentscheiden, wenn sich Ihre persönlichen Interessen ändern ? wir erkennen Ihre Studienleistungen natürlich voll an und freuen uns auf Ihr Engagement! (P.S.: Für ganz besonders Leistungsfähige bieten wir ab dem 3. Semester auch einen Elitestudiengang an; Studium + Promotion (Dr. rer. nat.) in nur 12 Semestern!) Ein Bachelor-Studium in Physik sieht typischerweise so aus: Sem. Pflichtbereich Wahlbereich 1 Experimental- Physik Mathematik I Physikalische Praktika Physik - Vertiefung, Ergänzung 2 Theoretische Physik Mathematik II 3 Mathematik III 4 5 6 Bachelorarbeit Im Nanoscience-Studiengang werden Sie weniger Mathematik und Quantenfeldtheorie, mehr Chemie und Praktika, und besonders schnell die Festkörperphysik kennenlernen. Computational Science ist interdiziplinär angelegt und betont das ABC computergestützter Verfahren in den Naturwissenschaften. Lehramt bei uns können Sie folgende Lehramtsstudiengänge studieren: Lehramt Physik für Gymnasien (in der Regel zusammen mit Mathematik) Lehramt Physik für; Realschulen Lehramt Physik für Grund- und Hauptschulen sowie NaturWissenschaft und Technik als Didaktikfach für das Lehramt an Grund- und Hauptschulen Was müssen Sie mitbringen? Lassen wir einmal die Formalitäten (= Abitur o.ä.) beiseite: Um die ganze Faszination und Schönheit der Physik zu begreifen und aufregende eigene Erfolge zu feiern, brauchen Sie im Studium ein ausgeprägtes Interesse an der Physik, Ausdauer und Biss, Neugierde, viel Offenheit für Neues, und etwas Mut, sich an ein schwieriges Studium zu wagen. Sie werden es nicht bereuen: Es ist kein Zufall, dass Sie später einen sehr chancenreichen und krisenfesten Abschluss haben, der Ihnen auch jenseits der Physik viele überraschende Möglichkeiten eröffnen wird ? sogar Bundeskanzlerin kann man damit werden! Ob Sie in der Schule Leistungskurse in Mathe und Physik besucht haben, ist dabei nicht so entscheidend. Viel wichtiger ist erfahrungsgemäß, dass Sie mit der Schulmathematik(!) keine nennenswerten Schwierigkeiten hatten. Physik und Regensburg passen gut zusammen! Die Stadt Regensburg mit ihrer einmaligen historischen Altstadt (UNESCO Welterbe) sowie die landschaftlich sehr reizvolle Umgebung mit zahlreichen Sportmöglichkeiten haben Ihnen neben dem Studium einiges an Flair, Kultur und Abwechslung zu bieten. Gerade diese große Dichte, Nähe und Vielfalt des Angebots werden Sie Dank der sehr kurzen Wege in intensiveren Lernphasen ganz besonders schätzen. Autor: Dr. Jörg Mertins / FW   Impressum Letzte Änderung: 20.03.2013 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/praktika/a1/</field>
<field name="title">Physik ? Studium</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/praktika/a1/</field>
<field name="content">Physik ? Studium Physik ? Studium Sommersemester 2014 ? Hier finden Sie die Einteilung zum Praktikum.   Letzte Änderung: 18.11.2013 von Webmaster 1</field>
<field name="important">Physik ? Studium Physik ? Studium Sommersemester 2014 ? Hier finden Sie die Einteilung zum Praktikum.   Letzte Änderung: 18.11.2013 von Webmaster 1</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/praktika/a1/index.phtml</field>
<field name="title">Physik ? Studium</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/praktika/a1/index.phtml</field>
<field name="content">Physik ? Studium Physik ? Studium Sommersemester 2014 ? Hier finden Sie die Einteilung zum Praktikum.   Letzte Änderung: 18.11.2013 von Webmaster 1</field>
<field name="important">Physik ? Studium Physik ? Studium Sommersemester 2014 ? Hier finden Sie die Einteilung zum Praktikum.   Letzte Änderung: 18.11.2013 von Webmaster 1</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/praktika/a2/</field>
<field name="title">Physik ? Studium ? Anfängerpraktikum A2</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/praktika/a2/</field>
<field name="content">Physik ? Studium ? Anfängerpraktikum A2 Physik ? Studium ? Anfängerpraktikum A2 Sommersemester 2014 Praktikumsbegleitende Vorlesung: folgende Dienstagstermine werden verschoben: alt: 03.06. neu: Do, 05.06.14 um 14ct PHY 2.1.29 (Seminarraum Huber/Bougeard) alt: 24.06. neu: Do, 26.06.14 um 14ct PHY 2.1.29 (Seminarraum Huber/Bougeard)   Letzte Änderung: 22.05.2014 von Webmaster</field>
<field name="important">Physik ? Studium ? Anfängerpraktikum A2 Physik ? Studium ? Anfängerpraktikum A2 Sommersemester 2014 Praktikumsbegleitende Vorlesung: folgende Dienstagstermine werden verschoben: alt: 03.06. neu: Do, 05.06.14 um 14ct PHY 2.1.29 (Seminarraum Huber/Bougeard) alt: 24.06. neu: Do, 26.06.14 um 14ct PHY 2.1.29 (Seminarraum Huber/Bougeard)   Letzte Änderung: 22.05.2014 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/praktika/chem/</field>
<field name="title">Physik ? Studium</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/praktika/chem/</field>
<field name="content">Physik ? Studium Physik ? Studium Sommersemester 2014 Wichtiger Hinweis: Die Webseiten des Physikalischen Praktikums für Chemiker sind noch im Aufbau befindlich! Bitte schauen Sie regelmässig auf die Seite, um den aktuellen Stand der Dinge zu erfahren!   Letzte Änderung: 25.11.2012 von Webmaster</field>
<field name="important">Physik ? Studium Physik ? Studium Sommersemester 2014 Wichtiger Hinweis: Die Webseiten des Physikalischen Praktikums für Chemiker sind noch im Aufbau befindlich! Bitte schauen Sie regelmässig auf die Seite, um den aktuellen Stand der Dinge zu erfahren!   Letzte Änderung: 25.11.2012 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/praktika/cs-grundlagen/</field>
<field name="title">Physikpraktikum für den Studiengang Computational Science</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/praktika/cs-grundlagen/</field>
<field name="content">Physikpraktikum für den Studiengang Computational Science Physikpraktikum für den Studiengang Computational Science Wintersemester 2013/2014   Letzte Änderung: 28.08.2013 von Webmaster</field>
<field name="important">Physikpraktikum für den Studiengang Computational Science Physikpraktikum für den Studiengang Computational Science Wintersemester 2013/2014   Letzte Änderung: 28.08.2013 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/praktika/nano-grundlagen-a/</field>
<field name="title">Physikalisches Grundlagenpraktikum A für den Studiengang Nanoscience</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/praktika/nano-grundlagen-a/</field>
<field name="content">Physikalisches Grundlagenpraktikum A für den Studiengang Nanoscience Physikalisches Grundlagenpraktikum A für den Studiengang Nanoscience Sommersemester 2014 ? hier ist die Einteilung zum Praktikum.   Letzte Änderung: 24.02.2014 von Webmaster</field>
<field name="important">Physikalisches Grundlagenpraktikum A für den Studiengang Nanoscience Physikalisches Grundlagenpraktikum A für den Studiengang Nanoscience Sommersemester 2014 ? hier ist die Einteilung zum Praktikum.   Letzte Änderung: 24.02.2014 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/praktika/pharma/</field>
<field name="title">Physik ? Studium</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/praktika/pharma/</field>
<field name="content">Physik ? Studium Physik ? Studium Physikalisches Praktikum für Studierende der Pharmazie und der Molekularen Medizin: Sommersemester 2014 Einteilung: Die Einteilungist über den Link "Gruppenenteilung" verfügbar. Kontakt: Nicola Paradiso Raum: PHY 9.0.13 Tel: 1614 Mail: nicola.paradiso(at)physik.uni-regensburg.de Für Nachfrage über die vorgangene Semester (z.B. WiSe 2013-2014) kontaktieren Sie bitte Maximilian Schmid (maximilian.schmid(at)physik.uni-regensburg.de) News: Am 10. und 11. Juni gibt es kein Praktikum. Wir fahren es am 17. (Mol.Med.) und 18. (Pharma) Juni mit dem Versuch 8 fort.   Letzte Änderung: 22.10.2012 von Webmaster</field>
<field name="important">Physik ? Studium Physik ? Studium Physikalisches Praktikum für Studierende der Pharmazie und der Molekularen Medizin: Sommersemester 2014 Einteilung: Die Einteilungist über den Link "Gruppenenteilung" verfügbar. Kontakt: Nicola Paradiso Raum: PHY 9.0.13 Tel: 1614 Mail: nicola.paradiso(at)physik.uni-regensburg.de Für Nachfrage über die vorgangene Semester (z.B. WiSe 2013-2014) kontaktieren Sie bitte Maximilian Schmid (maximilian.schmid(at)physik.uni-regensburg.de) News: Am 10. und 11. Juni gibt es kein Praktikum. Wir fahren es am 17. (Mol.Med.) und 18. (Pharma) Juni mit dem Versuch 8 fort.   Letzte Änderung: 22.10.2012 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/sciinf/sciinf_ws1011/</field>
<field name="title">Naturwissenschaftliche Informatik</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/sciinf/sciinf_ws1011/</field>
<field name="content">Naturwissenschaftliche Informatik  Naturwissenschaftliche Informatik Naturwissenschaftliche Informatik (Science Informatics) Angebote im WS10/11 (Archiv: WS01/02, SS 02, WS02/03, SS 03, WS03/04, SS04, WS04/05, SS05, WS05/06, SS06, WS06/07, SS07, WS07/08, SS08, WS08/09, SS09 WS09/10, SS10) Mathematik Numerische Mathematik I (L.Blank; 4+4 SWSt., 10LP) Physik Numerische Methoden (Numerical recipes) (Enno Scholz) (4+2 SWSt, 8LP) Datenbanken und das Internet (Fritz Wünsch; 4 SWSt als Block, 6LP) Technische IT: Regelung, Messwerterfassung, Digitale Signalverarbeitung (Dieter Schuh, Fritz Wünsch, 4 SWSt, 6LP) Computer- und Microcontroller-Technik (N. Meyer, F. Wünsch, 4SWSt. als Block, 6LP) Biologie Bioinformatik (E.Lang, R.Merkl, R.Spang; Seminar, Praktika) Genomische Datenanalyse (Rainer Spang, 4SWSt., 6LP) Chemie Interdisziplinärer Kurs Scientific Computing in Chemistry (Martin Schütz, Stefan Dove, 2+1SWSt, 5LP) Rechenzentrum Nichtnumerische Algorithmen (Frank Braun, 2 SWSt, 3 LP) Programmierung von Parallelrechnern - Schwerpunkt: PGAS-Sprachen (Partitioned Global Address Space) (Frank Braun, 2 SWSt, 3 LP) Allgemeine Informationen Die Naturwissenschaftliche Informatik ist seit WS01/02 Wahlpflichtfach / Nebenfach für Mathematik / Physik / Biologie / Chemie im Hauptstudium; Angebote auch aus dem Rechenzentrum Hier ist die Pr?fungsordnung Vermittlung von fachübergreifenden Fähigkeiten insgesamt 12SWSt. Umfang, davon max. 4 aus der eigenen Fakultät es wird ein Schein verlangt (nicht aus der eigenen Fakultät) Prüfung mit 2 Prüfenden, die nicht aus einer Fakultät kommen (auch das RZ prüft) alle Veranstaltungen verständlich für Studierende aller vier Fakultäten Voraussetzung: Programmierkenntnisse und etwas Erfahrung in Maple o.ä. Anmerkung Neue Pr?fungsordnungen einiger beteiligter Fakult?ten stellen inzwischen h?here Anforderungen an ein Nebenfach, z.B. 12SWSt. komplett bescheinigt. F?r Studierende dieser Fakult?ten gelten als erstes die lokalen Regelungen. Aktuelle Erg?nzungen nach Sitzung der Pr?fungskommission vom 26.10.07 Die Naturwissenschaftliche Informatik ist/wird auch integriert in die Bachelor-/Master-Studieng?nge der beteiligten Fakult?ten. Daher werden ab SS08 alle Leistungen benotet; die Note wird - nach Wahl des Dozenten - auf Grund einer m?ndlichen Pr?fung, eines Abschlu?projektes,... vergeben. Keine Leistung / kein Stoffgebiet darf mehrfach im Rahmen eines Studienganges eingebracht werden. Relevant ist hierbei der Inhalt der Verstaltungen, nicht der Name. Stand: 11.6.2010 / 18.10.2010   Dr. Friedrich Wünsch           ? Druckbare Version</field>
<field name="important">Naturwissenschaftliche Informatik  Naturwissenschaftliche Informatik Naturwissenschaftliche Informatik (Science Informatics) Angebote im WS10/11 (Archiv: WS01/02, SS 02, WS02/03, SS 03, WS03/04, SS04, WS04/05, SS05, WS05/06, SS06, WS06/07, SS07, WS07/08, SS08, WS08/09, SS09 WS09/10, SS10) Mathematik Numerische Mathematik I (L.Blank; 4+4 SWSt., 10LP) Physik Numerische Methoden (Numerical recipes) (Enno Scholz) (4+2 SWSt, 8LP) Datenbanken und das Internet (Fritz Wünsch; 4 SWSt als Block, 6LP) Technische IT: Regelung, Messwerterfassung, Digitale Signalverarbeitung (Dieter Schuh, Fritz Wünsch, 4 SWSt, 6LP) Computer- und Microcontroller-Technik (N. Meyer, F. Wünsch, 4SWSt. als Block, 6LP) Biologie Bioinformatik (E.Lang, R.Merkl, R.Spang; Seminar, Praktika) Genomische Datenanalyse (Rainer Spang, 4SWSt., 6LP) Chemie Interdisziplinärer Kurs Scientific Computing in Chemistry (Martin Schütz, Stefan Dove, 2+1SWSt, 5LP) Rechenzentrum Nichtnumerische Algorithmen (Frank Braun, 2 SWSt, 3 LP) Programmierung von Parallelrechnern - Schwerpunkt: PGAS-Sprachen (Partitioned Global Address Space) (Frank Braun, 2 SWSt, 3 LP) Allgemeine Informationen Die Naturwissenschaftliche Informatik ist seit WS01/02 Wahlpflichtfach / Nebenfach für Mathematik / Physik / Biologie / Chemie im Hauptstudium; Angebote auch aus dem Rechenzentrum Hier ist die Pr?fungsordnung Vermittlung von fachübergreifenden Fähigkeiten insgesamt 12SWSt. Umfang, davon max. 4 aus der eigenen Fakultät es wird ein Schein verlangt (nicht aus der eigenen Fakultät) Prüfung mit 2 Prüfenden, die nicht aus einer Fakultät kommen (auch das RZ prüft) alle Veranstaltungen verständlich für Studierende aller vier Fakultäten Voraussetzung: Programmierkenntnisse und etwas Erfahrung in Maple o.ä. Anmerkung Neue Pr?fungsordnungen einiger beteiligter Fakult?ten stellen inzwischen h?here Anforderungen an ein Nebenfach, z.B. 12SWSt. komplett bescheinigt. F?r Studierende dieser Fakult?ten gelten als erstes die lokalen Regelungen. Aktuelle Erg?nzungen nach Sitzung der Pr?fungskommission vom 26.10.07 Die Naturwissenschaftliche Informatik ist/wird auch integriert in die Bachelor-/Master-Studieng?nge der beteiligten Fakult?ten. Daher werden ab SS08 alle Leistungen benotet; die Note wird - nach Wahl des Dozenten - auf Grund einer m?ndlichen Pr?fung, eines Abschlu?projektes,... vergeben. Keine Leistung / kein Stoffgebiet darf mehrfach im Rahmen eines Studienganges eingebracht werden. Relevant ist hierbei der Inhalt der Verstaltungen, nicht der Name. Stand: 11.6.2010 / 18.10.2010   Dr. Friedrich Wünsch           ? Druckbare Version</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/softskills.phtml</field>
<field name="title">Physik ? Studium ? Soft Skills</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/softskills.phtml</field>
<field name="content">Physik ? Studium ? Soft Skills Physik ? Studium ? Soft Skills Soft Skills - Soziale Kompetenzen Angebote des Zentrums für Hochschul- und Wissenschaftsdidaktik (ZHW) Das ZHW beitet regelmäßig Veranstaltungen an zu den Themengebieten Arbeit in Projektgruppen und Teams Gesprächsführung, Rhetorik Kompetenzen in der Bewerbung und im Vorstellungsgespräch Kritik- und Konfliktgespräche Lern- und Arbeitstechniken Stressmanagement Wissenschaftliches Präsentieren Hier finden Sie das Veranstaltungsangebot des ZHW für das WS13/14. Zentrum für Sprache und Kommunikation (ZSK) Am ZSK haben Sie (u.a.) die Möglichkeit, Schlüsselkompetenzen im Bereich Kommunikation und Fremdsprachen zu erwerben. eigene Schreibkompetenz zu entwickeln und gezielt zu erweitern. Hier finden Sie das Vorlesungsverzeichnis des ZSK im WS 2013/14 mit den Angboten zur Mündlichen Kommunikation und Sprecherziehung und zur Akademischen Schreibberatung. Gewerblicher Rechtsschutz für Naturwissenschaftler Diese Veranstaltung wird regelmäßig von der Fakultät Physik angeboten, auch wieder im WS13/14. Soft Skills im Rahmen der Studienbegleitende IT-Ausbildung Die studienbegleitende IT-Ausbildung der Uni Regensburg umfasst neben eher Informatik-orientierten Themen auch die Bereiche M11: Digitales Publizieren M51: Mediengestützte Lern- und Arbeitstechniken M52: Mediengestützte Kommunikation und Interaktion M53: Projektmanagement Die angegebenen Links führen direkt zu den Angeboten vom WS13/14. Karrieretag des Bioparks Diese regelmäßige Veranstaltung beschäftigt sich mit Themen wie Einstiegsmöglichkeiten in der Industrie Industrielle Forschung Marketing und Vertrieb Gewerblicher Rechtsschutz Public Relation Karrierechancen in Academia Forschung und Familie Hier die Links zu den Veranstaltungen der Jahre 2013 und 2012.   Impressum Letzte Änderung: 18.10.2013 von Webmaster</field>
<field name="important">Physik ? Studium ? Soft Skills Physik ? Studium ? Soft Skills Soft Skills - Soziale Kompetenzen Angebote des Zentrums für Hochschul- und Wissenschaftsdidaktik (ZHW) Das ZHW beitet regelmäßig Veranstaltungen an zu den Themengebieten Arbeit in Projektgruppen und Teams Gesprächsführung, Rhetorik Kompetenzen in der Bewerbung und im Vorstellungsgespräch Kritik- und Konfliktgespräche Lern- und Arbeitstechniken Stressmanagement Wissenschaftliches Präsentieren Hier finden Sie das Veranstaltungsangebot des ZHW für das WS13/14. Zentrum für Sprache und Kommunikation (ZSK) Am ZSK haben Sie (u.a.) die Möglichkeit, Schlüsselkompetenzen im Bereich Kommunikation und Fremdsprachen zu erwerben. eigene Schreibkompetenz zu entwickeln und gezielt zu erweitern. Hier finden Sie das Vorlesungsverzeichnis des ZSK im WS 2013/14 mit den Angboten zur Mündlichen Kommunikation und Sprecherziehung und zur Akademischen Schreibberatung. Gewerblicher Rechtsschutz für Naturwissenschaftler Diese Veranstaltung wird regelmäßig von der Fakultät Physik angeboten, auch wieder im WS13/14. Soft Skills im Rahmen der Studienbegleitende IT-Ausbildung Die studienbegleitende IT-Ausbildung der Uni Regensburg umfasst neben eher Informatik-orientierten Themen auch die Bereiche M11: Digitales Publizieren M51: Mediengestützte Lern- und Arbeitstechniken M52: Mediengestützte Kommunikation und Interaktion M53: Projektmanagement Die angegebenen Links führen direkt zu den Angeboten vom WS13/14. Karrieretag des Bioparks Diese regelmäßige Veranstaltung beschäftigt sich mit Themen wie Einstiegsmöglichkeiten in der Industrie Industrielle Forschung Marketing und Vertrieb Gewerblicher Rechtsschutz Public Relation Karrierechancen in Academia Forschung und Familie Hier die Links zu den Veranstaltungen der Jahre 2013 und 2012.   Impressum Letzte Änderung: 18.10.2013 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/uebungen/ws1314/genrel/</field>
<field name="title">Exercises for General Relativity and Cosmology WS1314</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/uebungen/ws1314/genrel/</field>
<field name="content">Exercises for General Relativity and Cosmology WS1314 Exercises for General Relativity and Cosmology WS1314 Universität Regensburg / Fakultät für Physik / Quantum Transport and Spintronics Exercises for General Relativity and Cosmology current issues Time and place changed for the We-group! Please chose between exercises on We (15:00 ct - 17:00) in PHY 3.1.26 OR on Fr (15:00 ct - 17:00). Warm-up exercise sheet (sheet0) will be discussed on We, 23.10.2013/Fr, 25.10.2013. Class data: exercises No. 52448 2SWS Exercises We.  15:00 ct - 17:00, room PHYG - PHY 3.1.26 OR Fr.    15:15 ct - 17:00, room PHYG - PHY 9.1.08 Question time ... Literature Steven Weinberg: Gravitation and Cosmology, Wiley 1972 Torsten Fliessbach: Allgemeine Relativitätstheorie, Spektrum Akademischer Verlag L.D. Landau and E.M. Lifschitz: Lehrbuch der Theoretischen Physik II: Klassische Feldtheorie, Akademie-Verlag Berlin 1976 Robert M. Wald: General Relativity, The University of Chicago Press 1984 Michael Berry: Kosmologie und Gravitation, Teubner 1989 Hermann Weyl: Raum. Zeit. Materie., Springer 1988 Lecturer Prof. Dr. John Schliemann Office: 3.1.27 Tel: +49 941 943 2037 E-mail: john.schliemann@physik.uni-regensburg.de Homepage: homepages.uni-regensburg.de/~scj13915/ Teaching-Assistant Dr. Paul Wenk Büro: PHY 3.1.20 Tel: +49 (0)941 943 2044 E-mail: paul.wenk@physik.uni-regensburg.de Exercise sheets sheet 0 sheet 1 sheet 2 sheet 3 sheet 4 sheet 5 sheet 6 (V2) sheet 7 sheet 8 sheet 9 sheet 10 sheet 11 sheet 12 points Interesting Links Relativistic Orbits of Matter and Light in the Equatorial Plane of a Schwarzschild Black Hole Gravitational Lensing by a Point Mass</field>
<field name="important">Exercises for General Relativity and Cosmology WS1314 Exercises for General Relativity and Cosmology WS1314 Universität Regensburg / Fakultät für Physik / Quantum Transport and Spintronics Exercises for General Relativity and Cosmology current issues Time and place changed for the We-group! Please chose between exercises on We (15:00 ct - 17:00) in PHY 3.1.26 OR on Fr (15:00 ct - 17:00). Warm-up exercise sheet (sheet0) will be discussed on We, 23.10.2013/Fr, 25.10.2013. Class data: exercises No. 52448 2SWS Exercises We.  15:00 ct - 17:00, room PHYG - PHY 3.1.26 OR Fr.    15:15 ct - 17:00, room PHYG - PHY 9.1.08 Question time ... Literature Steven Weinberg: Gravitation and Cosmology, Wiley 1972 Torsten Fliessbach: Allgemeine Relativitätstheorie, Spektrum Akademischer Verlag L.D. Landau and E.M. Lifschitz: Lehrbuch der Theoretischen Physik II: Klassische Feldtheorie, Akademie-Verlag Berlin 1976 Robert M. Wald: General Relativity, The University of Chicago Press 1984 Michael Berry: Kosmologie und Gravitation, Teubner 1989 Hermann Weyl: Raum. Zeit. Materie., Springer 1988 Lecturer Prof. Dr. John Schliemann Office: 3.1.27 Tel: +49 941 943 2037 E-mail: john.schliemann@physik.uni-regensburg.de Homepage: homepages.uni-regensburg.de/~scj13915/ Teaching-Assistant Dr. Paul Wenk Büro: PHY 3.1.20 Tel: +49 (0)941 943 2044 E-mail: paul.wenk@physik.uni-regensburg.de Exercise sheets sheet 0 sheet 1 sheet 2 sheet 3 sheet 4 sheet 5 sheet 6 (V2) sheet 7 sheet 8 sheet 9 sheet 10 sheet 11 sheet 12 points Interesting Links Relativistic Orbits of Matter and Light in the Equatorial Plane of a Schwarzschild Black Hole Gravitational Lensing by a Point Mass</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/unterlagen/</field>
<field name="title">Physik ? Studium  ? Veranstaltungsunterlagen</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/unterlagen/</field>
<field name="content">Physik ? Studium  ? Veranstaltungsunterlagen Physik ? Studium  ? Veranstaltungsunterlagen Veranstaltungsunterlagen Hier gibt's Skripten, Materialien, Übungsblätter und viele weitere Infos zu Veranstaltungen aus dem laufenden und aus früheren Semestern (außer Praktika, die haben eigene Homepages ? siehe Einstiegsseite Studium ). Auch Unterlagen aus der Datenbank Materialien für Lehrveranstaltungen sind hier aufgenommen. Auf einige Unterlagen können Sie nur mit einer IP-Adresse der Uni Regensburg zugreifen. Wenn Sie von ausserhalb kommen, einfach den VPN-Zugang nutzen. Bitte aber auch daran denken: viele Professoren bieten Unterrichtmaterialien über ihre jeweilige Homepage an. Sommersemester 14 Theoretische Physik 2 (Quantenmechanik I) (Prof. Bali) Physik IV (Wärmelehre) für LA (Prof. Bougeard) Struktur der Materie II für LA Gym (Dr. Schuh) Theoretische Physik Ib (Elektrodynamik und Optik) für LA Gy und Bachelor (Dr. Göckeler) Quantenelektrodynamik (Prof. Wettig) Elektronik für LA (Dr. Schuh) Klausurenkurs Experimentalphysik (Dr. Mertins) Physik II für LAUP und Chemiker (Prof. Gießibl) Aufbau der Materie 1 (LAUP) (Prof. Zweck) Wintersemester 13/14 Physik 3 (Prof. Zweck, nur uni-intern) Theoretische Physik 1b Elektrodynamik) (Prof. Bali) Struktur der Materie IIb (Kerne und Elementarteilchen) für LA GYM (Dr. Göckeler) Struktur der Materie III (Dr. Offen) Tieftemperaturphysik (Dr. Hüttel) Physics of Nanostructures (Prof. Bougeard) Physik III (Optik) für LA mit Unterrichtsfach Physik (RS, HS, GS) und Molekulare Medizin (Prof. Gießibl) General Relativity and Cosmology (Prof. Schliemann) The "Big Bang" oder die Physik des frühen Kosmos (Prof. Gebhardt, Bali) Eneuerbare Energien (Prof. Maier) Klausurenkurs Experimentalphysik (Dr. Mertins) Sommersemester 13 Experimentalphysik II: Elektrodynamik (Prof. Schüller) Experimentalphysik IV: Thermodynamik (pdf) (Prof. Repp) Quantum Theory of Condensed Matter I (Prof. Schliemann) Quantenelektrodynamik (Prof. Braun) Quantum Field Theory (Prof. Bali) Theoretische Physik IV (Thermodynamik und Quantenstatistik) (Dr.Göckeler) Struktur der Materie II für LA Gym (Dr. Schuh) Quantenmechanik als Teil des Integrierten Kurses (Prof. Wettig; nur intern) Physik II für Chemiker und LAUP (Prof. Giessibl) Klausurenkurs Experimentalphysik (Dr. Mertins) Ausbildungsseminar "Breaking News in Nanoscience" (Dr. Mertins) Wintersemester 12/13 Physik 3 (Prof. Zweck) Theoretische Physik II (Quantenmechanik) für LA und Nanoscience (Dr. Göckeler) Quantenmechanik II (Prof. Schliemann) Struktur der Materie III (Dr. Offen) Aufbau der Materie II (Festkörperphysik) für Nebenfachstudenten und LA mit Unterrichtsfach Physik (Prof. Repp, mit Passwort) General Relativity (Prof. Bali) Tieftemperaturphysik (Dr, Hüttel) Rastersondenmikroskopie (Prof. Gießibl) Wetter und Klima (Prof. Gebhardt, Richter - Ausbildungsseminar) Klausurenkurs Experimentalphysik (Dr. Mertins) Sommersemester 12 Theoretische Physik Ia (Mechanik) (Dr. Göckeler) Theoretische Physik Ib (Elektrodynamik und Optik) für Lehramt (Prof. Bali) Theoretische Physik II - Quantenmechanik (Prof. Schliemann, M. Trushin) Aufbau der Materie 1 (LAUP) (Prof. Zweck) Quantenelektrodynamik (Prof. Wettig) Klausurenkurs Experimentalphysik (Dr. Mertins) Wintersemester 11/12 Physik III (Wellen und Quanten) (Prof. Zweck) Klausurenkurs Experimentalphysik (Dr. Mertins) Moderne Physik IIb (Kerne und Elementarteilchen) für LA vertieft (Dr. Göckeler) Struktur der Materie 3 (Dr. Offen) Exercises in Quantum Chromodynamics (Prof. Bali) Vom Urknall zu den Sternen (Prof. Gebhardt) Sommersemester 11 Experimentalphysik II - Elektrodynamik (Prof. Zweck) Quantenmechanik I (Dr. Göckeler) Quantenelektrodynamok (Prof.Wettig) Aufbau der Materie IIb (Dr. Offen) Klausurenkurs Experimentalphysik (Dr. Mertins) Physik II für Chemiker und LA mit Unterrichtsfach Physik (Prof. Giessibl) Wintersemester 10/11 Physik III (Prof. Zweck) Theoretische Physik Ia (Klassische Mechanik) für LA (Prof. Wettig) Theoretische Physik II (Quantenmechanik) für LA (Prof. Bali) Struktur der Materie III (Dr. Offen) Quantenfeldtheorie auf dem Gitter (Dr. Göckeler) Klausurenkurs Experimentalphysik für LA (Dr. Mertins) Physik III (Optik) für HS, GS (Dr. Schiel) Seminar Breaking News in Physics (Dr. Mertins) Messen, Steuern, Regeln (Dr. Schuh) Sommersemester 10 Physik 2 (Prof. Giessibl) Struktur der Materie I (Prof. Schüller) Theoretische Physik Ib für Lehramt (Dr.Göckeler) Experimentalphysik IV für LA Gym - Wärmelehre (Prof. Bougeard) Moderne Physik II a (Festkörperphysik) für LA vertieft Moderne Physik II b (Kerne und Elementarteilchen) für LA vertieft (Dr.Bloch) Integrierter Kurs: Quantenmechanik (Profs. Bali, Strunk, Dr. Collins) Gruppentheorie für Physiker (Prof. Wettig) Ausbildungseminar Softmatter (Dr.Mertins) Klausurenkurs Experimentalphysik (Dr.Mertins) Physik IV (Optik) für Lehramt mit Unterrichtsfach Physik (GS,HS,RS) (Prof. Bougeard) Aufbau der Materie I (Atome und Moleküle) für Nebenfach und LAUP (Prof.Zweck) Wintersemester 09/10 Physik 1 (Prof. Gießibl) Physik 3 (Prof. Zweck) Theoretische Physik Ib (Elektrodynamik) (Prof. Bali) Tieftemperturphysik (Dr. Hüttel) Theoretische Physik II (Quantenmechanik) für LA (Dr. Göckeler) Struktur der Materie 3 (Dr. Hemmert) Klausurenkurs Experimentalphysik für LA (Dr.Mertins) Erneuerbare Energien (nur intern, nur mit Passwort) Oberflächenphysik (nur mit Passwort) Sommersemester 09 Experimentalphysik 2 (Franz Gießibl) Physik für Chemiker und Lehramt nicht vertieft (Andreas Hüttel) Theorie Ia: Klassische Mechanik (Meinulf Göckeler) Theorie II für LA (Tilo Wettig) Theorie V bzw. IV LA: Thermodynamik und Statistik (Gunnar Bali) Aufbau der Materie I (Nebenfach und LA nv) (Prof. Zweck) Defekte in Festkörpern (Seminar Mertins/Zweck) Klausurenkurs Experimentalphysik für LA (Jörg Mertins) (nur intern) Übungen zum Integrierten Kurs: Quantenmechanik (Juan-Diego Urbina) Wintersemester 08/09 Theoretische Physik I (Mechanik) für LA Theoretische Physik III (Quantenmechanik) für LA Struktur der Materie 2 Quantentheorie der kondensierten Materie II (Mesoskopische Physik) (Klaus Richter) Klausurenkurs Experimentalphysik für LA (nur intern) Sommersemester 08 Theoretische Physik I (Mechanik) (Prof. Richter) Nanophysik (Prof. Dr. Ludwig; nur intern) Moderne Physik II a (Festkörperphysik) für LA vertieft (Prof. Dr. Ludwig; nur intern) Übungen zur Modernen Physik für LA vertieft (Festkörperphysik) (Prof. Ludwig) Übungen zu Theorie III (Prof. Bali) Wintersemester 07/08 Nichtlinearität in klassischer und Quantenphysik (Dr. Schlagheck) Theoretische Physik IV (Quantentheorie II) (Prof. Richter) Physik III (Prof. Zweck) (nur intern) Science Computing (Prof. Wettig) Theoretische Physik I (Mechanik) für LA (Dr. Göckeler) Theoretische Physik III (Quantenmechanik) für LA (Prof. Wettig) Aus dem Physikalischen Kolloquium: Wie entsteht eine Wettervorhersage? (Prof. Geerd-R. Hoffmann, Deutscher Wetterdienst, Offenbach, 15.1.07 Sommersemester 2007 Theoretische Physik I (Mechanik) (V+Ü) (Prof. Schliemann) Quantentheorie der kondensierten Materie I (V+Ü) (Prof. Grifoni) Übungen zum Integrierten Kurs Quantenmechanik (Prof. Back, Wettig) Übungen zu Theoretische Physik III - Quantenmechanik I (Prof. Bali) Übungen zu Theoretische Physik II für LA (Elektrodynamik und Optik) (Dr. Göckeler) Fouriertransformationen: Theorie und Praxis (Prof. Zweck) (nur intern) Elektronenmikroskopie (Prof. Zweck) (nur intern) Wintersemester 2006/07 Theoretische Physik IV (Quantentheorie II) (V+Ü) (Prof. Schliemann) Mathematische Ergänzungen zur Physik (V+Ü) (Prof. Richter) Gruppentheorie für Physiker (Prof. Wettig) Übungen zu Theoretische Physik I für LA (Prof. Bali) Übungen zur Physik III (Optik) (Prof. Zweck) Sommersemester 2006 Tutorat für Erstsemester (Prof. Zweck) QED (Prof. Wettig) Übungen zur Physik II für Chemiker und LA nicht vertieft (Prof. Giessibl) Correlations, condensates, and quantum devices in the quantum Hall effect regime (Matthew Grayson, WSI) (nur intern) Wintersemester 2005/06 Nichtlinearität in klassischer und Quantenphysik (V+Ü) (Prof. Richter) Übungen zur Theoretischen Physik II - Elektrodynamik (Prof. Wettig) Scientific Computing (Prof. Wettig) Übungen zur Physik I für Chemiker und LA nicht vertieft (Dr. Pavone) Sommersemester 2005 Übungen zur Physik IV - Thermodynamik (Prof. Strunk) Übungen zur Physik II - Elektrodynamik (Prof. Maier) Übungen zur Theoretischen Physik III - Quantenmechanik I (Prof. Wettig) Physik 2 für Chemiker und Lehramt (nicht vertieft) (Prof. Zweck) Wintersemester 2004/05 Übungen zur Theoretischen Physik II - Elektrodynamik (Prof. Wettig) Design und Entwicklung von Supercomputern (Prof. Wettig) Seminar Einführung in die Nukleare Astrophysik (Prof. Schäfer, Gebhardt) (Ausarbeitungen nur intern) Seminar Konzepte der Energiegewinnung (Prof. Zweck) (Ausarbeitungen nur intern) Quantenmechanik mit Maple (Prof. Keller) Sommersemester 2004 Seminar Wetter und Klima: Physik der Atmosphäre (Prof. Gebhardt, Prettl) (nur intern) Sommersemester 2003 Übungen zur Physik II (Prof. Zweck) Wintersemester 2002/03 Übungen zur Physik IV (Thermodynamik) (Prof. Göritz) Sommersemester 2002 Übungen zu Theoretische Physik IV (Thermodynamik und Statistik) (Prof. Braun) Übungen zur experimentellen Festkörperphysik (Prof. Zweck) Wintersemester 2000/2001 Übungen zu Moderne Physik I (Prof. Penzkofer) Übungen zu Physik IV - Thermodynamik (Prof. Maier)   Impressum Letzte Änderung: 29.04.2014 von Webmaster</field>
<field name="important">Physik ? Studium  ? Veranstaltungsunterlagen Physik ? Studium  ? Veranstaltungsunterlagen Veranstaltungsunterlagen Hier gibt's Skripten, Materialien, Übungsblätter und viele weitere Infos zu Veranstaltungen aus dem laufenden und aus früheren Semestern (außer Praktika, die haben eigene Homepages ? siehe Einstiegsseite Studium ). Auch Unterlagen aus der Datenbank Materialien für Lehrveranstaltungen sind hier aufgenommen. Auf einige Unterlagen können Sie nur mit einer IP-Adresse der Uni Regensburg zugreifen. Wenn Sie von ausserhalb kommen, einfach den VPN-Zugang nutzen. Bitte aber auch daran denken: viele Professoren bieten Unterrichtmaterialien über ihre jeweilige Homepage an. Sommersemester 14 Theoretische Physik 2 (Quantenmechanik I) (Prof. Bali) Physik IV (Wärmelehre) für LA (Prof. Bougeard) Struktur der Materie II für LA Gym (Dr. Schuh) Theoretische Physik Ib (Elektrodynamik und Optik) für LA Gy und Bachelor (Dr. Göckeler) Quantenelektrodynamik (Prof. Wettig) Elektronik für LA (Dr. Schuh) Klausurenkurs Experimentalphysik (Dr. Mertins) Physik II für LAUP und Chemiker (Prof. Gießibl) Aufbau der Materie 1 (LAUP) (Prof. Zweck) Wintersemester 13/14 Physik 3 (Prof. Zweck, nur uni-intern) Theoretische Physik 1b Elektrodynamik) (Prof. Bali) Struktur der Materie IIb (Kerne und Elementarteilchen) für LA GYM (Dr. Göckeler) Struktur der Materie III (Dr. Offen) Tieftemperaturphysik (Dr. Hüttel) Physics of Nanostructures (Prof. Bougeard) Physik III (Optik) für LA mit Unterrichtsfach Physik (RS, HS, GS) und Molekulare Medizin (Prof. Gießibl) General Relativity and Cosmology (Prof. Schliemann) The "Big Bang" oder die Physik des frühen Kosmos (Prof. Gebhardt, Bali) Eneuerbare Energien (Prof. Maier) Klausurenkurs Experimentalphysik (Dr. Mertins) Sommersemester 13 Experimentalphysik II: Elektrodynamik (Prof. Schüller) Experimentalphysik IV: Thermodynamik (pdf) (Prof. Repp) Quantum Theory of Condensed Matter I (Prof. Schliemann) Quantenelektrodynamik (Prof. Braun) Quantum Field Theory (Prof. Bali) Theoretische Physik IV (Thermodynamik und Quantenstatistik) (Dr.Göckeler) Struktur der Materie II für LA Gym (Dr. Schuh) Quantenmechanik als Teil des Integrierten Kurses (Prof. Wettig; nur intern) Physik II für Chemiker und LAUP (Prof. Giessibl) Klausurenkurs Experimentalphysik (Dr. Mertins) Ausbildungsseminar "Breaking News in Nanoscience" (Dr. Mertins) Wintersemester 12/13 Physik 3 (Prof. Zweck) Theoretische Physik II (Quantenmechanik) für LA und Nanoscience (Dr. Göckeler) Quantenmechanik II (Prof. Schliemann) Struktur der Materie III (Dr. Offen) Aufbau der Materie II (Festkörperphysik) für Nebenfachstudenten und LA mit Unterrichtsfach Physik (Prof. Repp, mit Passwort) General Relativity (Prof. Bali) Tieftemperaturphysik (Dr, Hüttel) Rastersondenmikroskopie (Prof. Gießibl) Wetter und Klima (Prof. Gebhardt, Richter - Ausbildungsseminar) Klausurenkurs Experimentalphysik (Dr. Mertins) Sommersemester 12 Theoretische Physik Ia (Mechanik) (Dr. Göckeler) Theoretische Physik Ib (Elektrodynamik und Optik) für Lehramt (Prof. Bali) Theoretische Physik II - Quantenmechanik (Prof. Schliemann, M. Trushin) Aufbau der Materie 1 (LAUP) (Prof. Zweck) Quantenelektrodynamik (Prof. Wettig) Klausurenkurs Experimentalphysik (Dr. Mertins) Wintersemester 11/12 Physik III (Wellen und Quanten) (Prof. Zweck) Klausurenkurs Experimentalphysik (Dr. Mertins) Moderne Physik IIb (Kerne und Elementarteilchen) für LA vertieft (Dr. Göckeler) Struktur der Materie 3 (Dr. Offen) Exercises in Quantum Chromodynamics (Prof. Bali) Vom Urknall zu den Sternen (Prof. Gebhardt) Sommersemester 11 Experimentalphysik II - Elektrodynamik (Prof. Zweck) Quantenmechanik I (Dr. Göckeler) Quantenelektrodynamok (Prof.Wettig) Aufbau der Materie IIb (Dr. Offen) Klausurenkurs Experimentalphysik (Dr. Mertins) Physik II für Chemiker und LA mit Unterrichtsfach Physik (Prof. Giessibl) Wintersemester 10/11 Physik III (Prof. Zweck) Theoretische Physik Ia (Klassische Mechanik) für LA (Prof. Wettig) Theoretische Physik II (Quantenmechanik) für LA (Prof. Bali) Struktur der Materie III (Dr. Offen) Quantenfeldtheorie auf dem Gitter (Dr. Göckeler) Klausurenkurs Experimentalphysik für LA (Dr. Mertins) Physik III (Optik) für HS, GS (Dr. Schiel) Seminar Breaking News in Physics (Dr. Mertins) Messen, Steuern, Regeln (Dr. Schuh) Sommersemester 10 Physik 2 (Prof. Giessibl) Struktur der Materie I (Prof. Schüller) Theoretische Physik Ib für Lehramt (Dr.Göckeler) Experimentalphysik IV für LA Gym - Wärmelehre (Prof. Bougeard) Moderne Physik II a (Festkörperphysik) für LA vertieft Moderne Physik II b (Kerne und Elementarteilchen) für LA vertieft (Dr.Bloch) Integrierter Kurs: Quantenmechanik (Profs. Bali, Strunk, Dr. Collins) Gruppentheorie für Physiker (Prof. Wettig) Ausbildungseminar Softmatter (Dr.Mertins) Klausurenkurs Experimentalphysik (Dr.Mertins) Physik IV (Optik) für Lehramt mit Unterrichtsfach Physik (GS,HS,RS) (Prof. Bougeard) Aufbau der Materie I (Atome und Moleküle) für Nebenfach und LAUP (Prof.Zweck) Wintersemester 09/10 Physik 1 (Prof. Gießibl) Physik 3 (Prof. Zweck) Theoretische Physik Ib (Elektrodynamik) (Prof. Bali) Tieftemperturphysik (Dr. Hüttel) Theoretische Physik II (Quantenmechanik) für LA (Dr. Göckeler) Struktur der Materie 3 (Dr. Hemmert) Klausurenkurs Experimentalphysik für LA (Dr.Mertins) Erneuerbare Energien (nur intern, nur mit Passwort) Oberflächenphysik (nur mit Passwort) Sommersemester 09 Experimentalphysik 2 (Franz Gießibl) Physik für Chemiker und Lehramt nicht vertieft (Andreas Hüttel) Theorie Ia: Klassische Mechanik (Meinulf Göckeler) Theorie II für LA (Tilo Wettig) Theorie V bzw. IV LA: Thermodynamik und Statistik (Gunnar Bali) Aufbau der Materie I (Nebenfach und LA nv) (Prof. Zweck) Defekte in Festkörpern (Seminar Mertins/Zweck) Klausurenkurs Experimentalphysik für LA (Jörg Mertins) (nur intern) Übungen zum Integrierten Kurs: Quantenmechanik (Juan-Diego Urbina) Wintersemester 08/09 Theoretische Physik I (Mechanik) für LA Theoretische Physik III (Quantenmechanik) für LA Struktur der Materie 2 Quantentheorie der kondensierten Materie II (Mesoskopische Physik) (Klaus Richter) Klausurenkurs Experimentalphysik für LA (nur intern) Sommersemester 08 Theoretische Physik I (Mechanik) (Prof. Richter) Nanophysik (Prof. Dr. Ludwig; nur intern) Moderne Physik II a (Festkörperphysik) für LA vertieft (Prof. Dr. Ludwig; nur intern) Übungen zur Modernen Physik für LA vertieft (Festkörperphysik) (Prof. Ludwig) Übungen zu Theorie III (Prof. Bali) Wintersemester 07/08 Nichtlinearität in klassischer und Quantenphysik (Dr. Schlagheck) Theoretische Physik IV (Quantentheorie II) (Prof. Richter) Physik III (Prof. Zweck) (nur intern) Science Computing (Prof. Wettig) Theoretische Physik I (Mechanik) für LA (Dr. Göckeler) Theoretische Physik III (Quantenmechanik) für LA (Prof. Wettig) Aus dem Physikalischen Kolloquium: Wie entsteht eine Wettervorhersage? (Prof. Geerd-R. Hoffmann, Deutscher Wetterdienst, Offenbach, 15.1.07 Sommersemester 2007 Theoretische Physik I (Mechanik) (V+Ü) (Prof. Schliemann) Quantentheorie der kondensierten Materie I (V+Ü) (Prof. Grifoni) Übungen zum Integrierten Kurs Quantenmechanik (Prof. Back, Wettig) Übungen zu Theoretische Physik III - Quantenmechanik I (Prof. Bali) Übungen zu Theoretische Physik II für LA (Elektrodynamik und Optik) (Dr. Göckeler) Fouriertransformationen: Theorie und Praxis (Prof. Zweck) (nur intern) Elektronenmikroskopie (Prof. Zweck) (nur intern) Wintersemester 2006/07 Theoretische Physik IV (Quantentheorie II) (V+Ü) (Prof. Schliemann) Mathematische Ergänzungen zur Physik (V+Ü) (Prof. Richter) Gruppentheorie für Physiker (Prof. Wettig) Übungen zu Theoretische Physik I für LA (Prof. Bali) Übungen zur Physik III (Optik) (Prof. Zweck) Sommersemester 2006 Tutorat für Erstsemester (Prof. Zweck) QED (Prof. Wettig) Übungen zur Physik II für Chemiker und LA nicht vertieft (Prof. Giessibl) Correlations, condensates, and quantum devices in the quantum Hall effect regime (Matthew Grayson, WSI) (nur intern) Wintersemester 2005/06 Nichtlinearität in klassischer und Quantenphysik (V+Ü) (Prof. Richter) Übungen zur Theoretischen Physik II - Elektrodynamik (Prof. Wettig) Scientific Computing (Prof. Wettig) Übungen zur Physik I für Chemiker und LA nicht vertieft (Dr. Pavone) Sommersemester 2005 Übungen zur Physik IV - Thermodynamik (Prof. Strunk) Übungen zur Physik II - Elektrodynamik (Prof. Maier) Übungen zur Theoretischen Physik III - Quantenmechanik I (Prof. Wettig) Physik 2 für Chemiker und Lehramt (nicht vertieft) (Prof. Zweck) Wintersemester 2004/05 Übungen zur Theoretischen Physik II - Elektrodynamik (Prof. Wettig) Design und Entwicklung von Supercomputern (Prof. Wettig) Seminar Einführung in die Nukleare Astrophysik (Prof. Schäfer, Gebhardt) (Ausarbeitungen nur intern) Seminar Konzepte der Energiegewinnung (Prof. Zweck) (Ausarbeitungen nur intern) Quantenmechanik mit Maple (Prof. Keller) Sommersemester 2004 Seminar Wetter und Klima: Physik der Atmosphäre (Prof. Gebhardt, Prettl) (nur intern) Sommersemester 2003 Übungen zur Physik II (Prof. Zweck) Wintersemester 2002/03 Übungen zur Physik IV (Thermodynamik) (Prof. Göritz) Sommersemester 2002 Übungen zu Theoretische Physik IV (Thermodynamik und Statistik) (Prof. Braun) Übungen zur experimentellen Festkörperphysik (Prof. Zweck) Wintersemester 2000/2001 Übungen zu Moderne Physik I (Prof. Penzkofer) Übungen zu Physik IV - Thermodynamik (Prof. Maier)   Impressum Letzte Änderung: 29.04.2014 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/vorkurs.phtml</field>
<field name="title">Physik ? Studium ? Mathematik-Vorkurs</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/vorkurs.phtml</field>
<field name="content">Physik ? Studium ? Mathematik-Vorkurs Physik ? Studium ? Mathematik-Vorkurs Mathematik-Vorkurs für Studierende an der Fakultät für Physik Liebe Studienanfängerinnen und Studienanfänger in den Bachelor-Studiengängen Physik, Nanoscience, Computational Science und den verschiedenen Lehramtsstudiengängen an der Fakultät für Physik. Wir bieten Ihnen kurz vor dem offiziellen Vorlesungsbeginn einen Mathematik-Vorkurs an, der Ihnen den Übergang von der Schule zum Studium erleichtern soll. In allen Physik-orientierten Studiengängen stellt die Mathematik ein besonders wichtiges ?Handwerkszeug? dar. Ziel des Vorkurses ist es daher, den Schulstoff aufzufrischen und ausgewählte Themen der Schulmathematik sowie Rechentechniken zu vermitteln, die in den ersten Semestern besonders nützlich und erforderlich sind. Der Vorkurs beschränkt sich im Wesentlichen auf den Stoff des Gymnasiums. Zu den Themen gehören unter anderen: Integral- und Differentialrechnung, Vektorrechnung Winkel-, Logarithmus- und Exponentialfunktionen Der nächste Vorkurs findet statt Mo. 8.9.14 bis Fr., 12.9.14, Treffpunkt Mo., 8.9.2014, 10h00 im H33 Der Brückenkurs der Mathematik findet statt 15.9.-26.9.2014. Die Erstsemestereinführung der Fachschaft in Karlstein im Zeitraum 29.9. - 2.10.2014. Die Teilnahme ist freiwillig und eine vorherige Anmeldung nicht erforderlich. Wir freuen uns auf Ihre Teilnahme und wünschen Ihnen schon jetzt einen guten Start in Ihr Studium! Hinweis: Begleitend zur Vorlesung "Mathematische Methoden" (Vorlesungsverzeichnis: 52105) wird in der ersten Semesterwoche zusätzlich ein Auffrischungskurs Mathematik (Vorlesungsverzeichnis: 52101) angeboten, der wichtige grundlegende mathematische Konzepte jenseits des gewöhnlichen Schulstoffs zum Thema hat. Prof. Dr. Christian Schüller (Studiendekan der Fakultät für Physik) Email: christian.schueller(at)ur.de Tel.: 0941 / 943-2080       PD Dr. Michael Seidl (Leitung des Vorkurses) Email: michael.seidl(at)ur.de Tel.: 0941/ 943-2009 Weitere Auskünfte gerne per Email oder telefonisch.   Impressum Letzte Änderung: 07.07.2014 von Webmaster</field>
<field name="important">Physik ? Studium ? Mathematik-Vorkurs Physik ? Studium ? Mathematik-Vorkurs Mathematik-Vorkurs für Studierende an der Fakultät für Physik Liebe Studienanfängerinnen und Studienanfänger in den Bachelor-Studiengängen Physik, Nanoscience, Computational Science und den verschiedenen Lehramtsstudiengängen an der Fakultät für Physik. Wir bieten Ihnen kurz vor dem offiziellen Vorlesungsbeginn einen Mathematik-Vorkurs an, der Ihnen den Übergang von der Schule zum Studium erleichtern soll. In allen Physik-orientierten Studiengängen stellt die Mathematik ein besonders wichtiges ?Handwerkszeug? dar. Ziel des Vorkurses ist es daher, den Schulstoff aufzufrischen und ausgewählte Themen der Schulmathematik sowie Rechentechniken zu vermitteln, die in den ersten Semestern besonders nützlich und erforderlich sind. Der Vorkurs beschränkt sich im Wesentlichen auf den Stoff des Gymnasiums. Zu den Themen gehören unter anderen: Integral- und Differentialrechnung, Vektorrechnung Winkel-, Logarithmus- und Exponentialfunktionen Der nächste Vorkurs findet statt Mo. 8.9.14 bis Fr., 12.9.14, Treffpunkt Mo., 8.9.2014, 10h00 im H33 Der Brückenkurs der Mathematik findet statt 15.9.-26.9.2014. Die Erstsemestereinführung der Fachschaft in Karlstein im Zeitraum 29.9. - 2.10.2014. Die Teilnahme ist freiwillig und eine vorherige Anmeldung nicht erforderlich. Wir freuen uns auf Ihre Teilnahme und wünschen Ihnen schon jetzt einen guten Start in Ihr Studium! Hinweis: Begleitend zur Vorlesung "Mathematische Methoden" (Vorlesungsverzeichnis: 52105) wird in der ersten Semesterwoche zusätzlich ein Auffrischungskurs Mathematik (Vorlesungsverzeichnis: 52101) angeboten, der wichtige grundlegende mathematische Konzepte jenseits des gewöhnlichen Schulstoffs zum Thema hat. Prof. Dr. Christian Schüller (Studiendekan der Fakultät für Physik) Email: christian.schueller(at)ur.de Tel.: 0941 / 943-2080       PD Dr. Michael Seidl (Leitung des Vorkurses) Email: michael.seidl(at)ur.de Tel.: 0941/ 943-2009 Weitere Auskünfte gerne per Email oder telefonisch.   Impressum Letzte Änderung: 07.07.2014 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/vvalt.phtml</field>
<field name="title">Physik ? Studium ? Ältere
Vorlesungsverzeichnisse</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/vvalt.phtml</field>
<field name="content">Physik ? Studium ? ÄltereVorlesungsverzeichnisse Physik ? Studium ? ÄltereVorlesungsverzeichnisse Ältere Vorlesungsverzeichnisse der Physik   SS 14 (pdf) WS13/14 (pdf) SS 13 (pdf) WS 2012/13 SS 2012 WS 2011/12 SS 2011 WS 2010/11 (pdf) SS 2010 (pdf) WS 2009/10 (pdf) SS 2009 (pdf) WS 2008/09 SS 2008   Impressum Letzte Änderung: 30.06.2014 von Webmaster</field>
<field name="important">Physik ? Studium ? ÄltereVorlesungsverzeichnisse Physik ? Studium ? ÄltereVorlesungsverzeichnisse Ältere Vorlesungsverzeichnisse der Physik   SS 14 (pdf) WS13/14 (pdf) SS 13 (pdf) WS 2012/13 SS 2012 WS 2011/12 SS 2011 WS 2010/11 (pdf) SS 2010 (pdf) WS 2009/10 (pdf) SS 2009 (pdf) WS 2008/09 SS 2008   Impressum Letzte Änderung: 30.06.2014 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.physik.uni-regensburg.de/studium/zulassung.phtml</field>
<field name="title">Physik ? Studium ? Zulassungsvoraussetzungen</field>
<field name="url">http://www.physik.uni-regensburg.de/studium/zulassung.phtml</field>
<field name="content">Physik ? Studium ? Zulassungsvoraussetzungen Physik ? Studium ? Zulassungsvoraussetzungen Zulassungsvoraussetzungen zum Studiengang Bachelor of Science Physik, Nanoscience, Computational Physics an Bayerischen Universitäten (Stand 17.7.2008) Allgemeine Hochschulreife (erworben i.A. am Gymnasium) Vorprüfung an einer Fachhochschule in den Studienrichtungen Physikalische Technik Feinwerk- und Mikrotechnik Mikrosystemtechnik Vordiplom in Physik einer Universität im Bundesgebiet, falls Fachoberschulabschluss besteht. Für die fachgebundene Hochschulreife auf Antrag auch andere schulische Abschlüsse. Berufsoberschule mit Studienabschluss in Fachrichtung Technik Fachakademie: Zeugnis der Fachhochschulreife mit der Note "sehr gut" und Abschluss mit der Note "sehr gut" in Augenoptik Medizintechnik Andere Fachrichtungen von 4. und 5. sowie der Fachoberschule können über den Weg 2. (Vorprüfung an der Fachhochschule) zum Physikstudium kommen. Andere Ausbildungen im mathematisch-naturwissenschaftlichen-technischen Bereich können auf Antrag als ausreichend für die Zulassung zum Physikstudium anerkannt werden. Prof. Dr. Josef Zweck, Studienberater der Fakultät Physik   Impressum Letzte Änderung: 12.10.2009 von Webmaster</field>
<field name="important">Physik ? Studium ? Zulassungsvoraussetzungen Physik ? Studium ? Zulassungsvoraussetzungen Zulassungsvoraussetzungen zum Studiengang Bachelor of Science Physik, Nanoscience, Computational Physics an Bayerischen Universitäten (Stand 17.7.2008) Allgemeine Hochschulreife (erworben i.A. am Gymnasium) Vorprüfung an einer Fachhochschule in den Studienrichtungen Physikalische Technik Feinwerk- und Mikrotechnik Mikrosystemtechnik Vordiplom in Physik einer Universität im Bundesgebiet, falls Fachoberschulabschluss besteht. Für die fachgebundene Hochschulreife auf Antrag auch andere schulische Abschlüsse. Berufsoberschule mit Studienabschluss in Fachrichtung Technik Fachakademie: Zeugnis der Fachhochschulreife mit der Note "sehr gut" und Abschluss mit der Note "sehr gut" in Augenoptik Medizintechnik Andere Fachrichtungen von 4. und 5. sowie der Fachoberschule können über den Weg 2. (Vorprüfung an der Fachhochschule) zum Physikstudium kommen. Andere Ausbildungen im mathematisch-naturwissenschaftlichen-technischen Bereich können auf Antrag als ausreichend für die Zulassung zum Physikstudium anerkannt werden. Prof. Dr. Josef Zweck, Studienberater der Fakultät Physik   Impressum Letzte Änderung: 12.10.2009 von Webmaster</field>
</doc>
<doc>
<field name="id">http://www.psychologie.uni-regensburg.de/Zimmer/mitarbeiter/</field>
<field name="title">302 Found</field>
<field name="url">http://www.psychologie.uni-regensburg.de/Zimmer/mitarbeiter/</field>
<field name="content">302 Found Found The document has moved here.</field>
<field name="important">302 Found Found The document has moved here.</field>
</doc>
<doc>
<field name="id">http://www.uni-regensburg.de/EDV/CIP/CIP-Rechner.html</field>
<field name="title">302 Found</field>
<field name="url">http://www.uni-regensburg.de/EDV/CIP/CIP-Rechner.html</field>
<field name="content">302 Found Found The document has moved here.</field>
<field name="important">302 Found Found The document has moved here.</field>
</doc>
<doc>
<field name="id">http://www.uni-regensburg.de/EDV/CIP/Lageplan.html</field>
<field name="title">302 Found</field>
<field name="url">http://www.uni-regensburg.de/EDV/CIP/Lageplan.html</field>
<field name="content">302 Found Found The document has moved here.</field>
<field name="important">302 Found Found The document has moved here.</field>
</doc>
<doc>
<field name="id">http://www.uni-regensburg.de/EDV/CIP/index.html</field>
<field name="title">302 Found</field>
<field name="url">http://www.uni-regensburg.de/EDV/CIP/index.html</field>
<field name="content">302 Found Found The document has moved here.</field>
<field name="important">302 Found Found The document has moved here.</field>
</doc>
<doc>
<field name="id">http://www.uni-regensburg.de/EDV/PC/Beschaffung/</field>
<field name="title">302 Found</field>
<field name="url">http://www.uni-regensburg.de/EDV/PC/Beschaffung/</field>
<field name="content">302 Found Found The document has moved here.</field>
<field name="important">302 Found Found The document has moved here.</field>
</doc>
<doc>
<field name="id">http://www.uni-regensburg.de/EDV/PC/soft/index.html</field>
<field name="title">302 Found</field>
<field name="url">http://www.uni-regensburg.de/EDV/PC/soft/index.html</field>
<field name="content">302 Found Found The document has moved here.</field>
<field name="important">302 Found Found The document has moved here.</field>
</doc>
<doc>
<field name="id">http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/Literatur.html</field>
<field name="title">Literatur zu HPC und MPI</field>
<field name="url">http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/Literatur.html</field>
<field name="content">Literatur zu HPC und MPI C:\Users\brf09510\svn\hpcdoku\trunk\hpcdoku\html\Literatur.html http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/Literatur.html 15.10.2013 Literaturkategorien Einf?hrungen und ?bersichten f?r parallele Programmierung: BAU06, DON03, RAB08, RAU07, KMK05 Hardwaregrundlagen: Bau06, HAG11 MPI: MPI12, BAU06, MAC182, PAC97, ALE02, RAU07, RAB08'11, HAG11 OpenMP: OMP13, OMPC13, OMPF13, HOF08, RAB08'11 Multicore: AKH08 PVM: RAU07 Threads: RAU07 CAF: RAB08'10 UPC: RAB08'10, UPC05, GHA05 Cuda, OpenCL: Matlab: KMK05 Numerik allgemein: STO99, UEB95, DEU08, PRE07 Numerik unter spezieller Ber?cksichtigung parallelisierbarer Verfahren: GOL96, ALE02, PAC97 Numerische lineare Algebra ?(LA) allgemein: MEI11,BAI00,BAR94,FIS11,GRE97,KAN05,SAA03,VOR03,WAT07,WAT10HIG08 Numerische LA unter spezieller Ber?cksichtigung parallelisierbarer Verfahren: MEI11, RAU07, BAR94,BAI00,FIS11,GRE97,KAN05,SAA03,VOR03 Numerische gew?hnliche oder partielle Differentialgleichungen (ODE/PDE) allgemein: GRO05 Numerische ODE/PDE unter spezieller Ber?cksichtigung parallelisierbarer Verfahren: GRO05, BRU06 Nichtnumerik: Alles ?ber Algorithmen und Datenstrukturen (Hier nicht weiter aufgef?hrt, da kein HPC) Nichtnumerik unter spezieller Ber?cksichtigung parallelisierbarer Verfahren: PAC97, MIL00 Fu?noten 1) Aktuelle Liste der aktuellen Kurse des HLRS: http://www.hlrs.de/organization/sos/par/services/training/course-list/ 1) Aktuelle Liste der Veranstaltungen des HLRS: http://www.hlrs.de/events/ Literaturverzeichnis zu HPC, MPI, OpenMP und PGAS Reihenfolge: Normen, weitere Werke in alphabetischer Reihenfolge nach erstem Verfasser/Editor; mehrb?ndige Werke sind nur einmal mit allen Verfassern aufgef?hrt.??Mit ebook UR und ebook HS.R werden ?ber die Bibliotheken der Universit?t und der Hochschule Regensburg verf?gbare online-B?cher gekennzeichnet. ebook TUM und andere sind nur f?r Benutzer der aufgef?hrten Universit?ten verf?gbare online-B?cher. Der Vermerk free hei?t kostenfrei. Autor Titel Jahr ISBN Signatur 17 190 Online Bewertung MPI12 MPI: A Message Passing Interface Standard 3.0 2012 17/ST 201 M 939 17 190 www.mpi-forum.org/docs/mpi-3.0/mpi30-report.pdf (free) _Der_ Standard der Parallelprogrammierung; auch: der Assembler der Parallelprogrammierung OMP13 OpenMP Application Program Interface 2013 17/ST 201 O 61 17 190 www.openmp.org/mp-documents/OpenMP4.0.0.pdf (free) wenig Aufwand, aber auch nur begrenzter Nutzen; aktuell neue Anwendung bei SIMD OMPC13 OpenMP C/C++ openmp.org/mp-documents/OpenMP-4.0-C.pdf (free) OMPF13 OpenMP Fortran openmp.org/mp-documents/OpenMP-4.0-Fortran.pdf (free) UPC05 UPC Language Specifications V1.2 2005 http://upc.lbl.gov/docs/user/upc_spec_1.2.pdf (free) wenig genutzte, ältere Idee zur Verbesserung der Parallelprogrammierung; SPMD; global arrays; fertig; abgeschlossen CAF08 Coarray Fortran (F--) 2008 ftp://ftp.nag.co.uk/sc22wg5/N1801-N1850/N1824.pdf (free) Teil des Fortran-Standards von 2008; jederzeit benutzbar TIT06 Titanium Language Reference Manual V 2.20 2006 http://titanium.cs.berkeley.edu/doc/lang-ref.pdf (free) nur für Java-Liebhaber CHA13 Chapel Language Specification V. 0.93 2013 chapel.cray.com/spec/spec-0.93.pdf (free) 2002 (Darpa); Cray; mod. Sprachkonzept; trotz langer Entwicklung Version &amp;lt; 1; dynamische, verschachtelte Parallelität; mehrdimensionale globale Felder; unfertig X1013 X10 Language Specification V. 2.4 2013 x10.sourceforge.net/documentation/languagespec/x10-latest.pdf (free) 2002 (Darpa); IBM; mod. Sprachkonzept; dynamische, verschachtelte Parallelität; mehrdimensionale globale Felder; unfertig AKH08 Shameen Akhter, Jason Roberts Multicore Programming 2008 978-3939084-70-9 17/ST 230 A315 190 Multicore-Architektur, Threading, OpenMP, Fehler (Races, Deadlock, Threadsafe, Pipeline stalls,...), Debugging, Intel-Tools ALE02 Alefeld, Lenhardt, Obermaier Parallele numerische Verfahren 2002 3-540-42519-5 17/ST 151 A366 190 Theorie, ?bungen, Clusterbau, Clusterbedienung, MPI-Bedienung (zu breit; zu wenig tief bei den Einzelthemen) BAI00 Bai, Demmel, Dongarra, Ruhe, Forst Templates for the Solution of Algebraic Eigenvalue Problems 2000 0-89871-471-0 190/SK 915 B152 190 BAR94 Barrett, Berry...Vorst Templates for the Solution of Linear Systems: Building Blocks for Iterative Methods, 2nd Edition 1994 978-0898713282 http://www.netlib.org/linalg/html_templates/report.html (free) http://www.netlib.org/linalg/html_templates/Templates.html Kurzgefasste und gut verst?ndliche ?bersicht ?ber den Stand der linearen Solver BAU06 Heiko Bauke, Stephan Mertens Cluster Computing 2006 3-540-42299-4 17/ST 160 B346 17 190 http://www.clustercomputing.de/ (Programme); ebook UR Parallelrechner, Cluster, MPI, Tools, Libraries (GSL, BLAS, LAPACK, Atlas, ...), PSE (PETSc...), Benchmarks BRU06 Bruaset Tveito Numerical Solutions of PDE on Parallel Computers 2006 978-3-540-29076-6 ebook UB ebook UB Modern, umfangreich, breites Themenspektrum (partitioning and load balancing, domain decomposition, multigrid, preconditioning, mesh generation, hypre, PETSc, ...) ? DAV06 Tim Davis Direct Methods for Sparse Linear Systems 2006 978-0-898716-13-9 80/SK 915 D264 DEU08 Deuflhard, Hohmann, Bornemann Numerische Mathematik 1, 2 2008 978-3-11-020354-7 978-3-11-020356-1 17/SK 900 D 485 17 Moderne, sorgf?ltige, gut verst?ndliche Einf?hrung in die numerische Mathematik DON03 Dongarra, Foster, Fox, Gropp, Kennedy, Torczon, White Sourcebook of Parallel Computing 2003 1-55860-871-0 17/ST 200 K21(.008)/ST 200 D 682 +1 HS.R ?berblick Hardware, Parallelrechnen, Spezialthemen (CFD, Chemie,...)Software (MPI, IO, PSE,...), Tools (Debugging), Algorithmen (Mesh, LA, PDE,...); kurz: einfach alles! FIS11 Bernd Fischer Polynomial Based Iteration Methods for Symmetric Linear Systems 2011 978-1-611971-91-0 190/SK 915 F 529 17,80,190 GHA05 Tarek El-Ghazawi, Carlson, Sterling, Yelick UPC, Distributed Shared Memory Programming 2005 0-471-22048-5 GOL96 Golub, Ortega Scientific Computing 1996 3-519-02969-3 17/SK 900 G629 17 GRE97 Anne Greenbaum Iterative Methods for Solving Linear Systems 1997 978-0-898713-96-1 190/SK 915 G 798 190 GRO96 Gropp, Lusk, Skjellum Using MPI 1996 0-262-57104-8 F 00/99 1584 http://www.mcs.anl.gov/research/projects/mpi/usingmpi/usingmpi-1st/index.html ?lter; MPI-1, noch KR-Stil in C GRO99-1 Gropp, Lusk, Skjellum Using MPI 1999 0-262-57132-3 http://www.mcs.anl.gov/research/projects/mpi/usingmpi/index.html GRO99-2 Gropp, Lusk, Thakur Using MPI-2 1999 0-262-57133-1 190/ST 151 G876 U8 http://www.mcs.anl.gov/research/projects/mpi/usingmpi2/index.html GRO94 Gro?mann, Roos Numerik partieller Differentialgleichungen 1994 3-519-12089-5 17/SK 920 G878 17 GRO05 Gro?mann, Roos Numerische Behandlung partieller Differentialgleichungen 2005 3-519-22089-X 17/SK 920 G878 (3) 17 HAG11 Georg Hager, Gerhard Wellein Introduction to High Performance Computing for Scientists and Engineers 2011 978-1-4398-1192-4 190/ST 151 H144 17,84,190 Hardware- und Softwaregrundlagen HIG08 Nickolas J. Higham Functions of Matrices 2008 978-0-898716-46-7 190/SK 220 H638 190 Theorie und Numerik der Matrizenfunktionen HOF08 S. Hoffmann, R. Lienhart OpenMP 2008 978-3-540-73122-1 17/ST 201 O61 H711 190/ST 250 C01 H 711 190 OpenMP bei Multicore in C/C++ KAN05 Christian Kanzow Numerik linearer Gleichungssysteme: Direkte und iterative Verfahren 2005 978-3-540-20654-X ebook UB/HS.R KMK05 Kim, Mullen, Kepner Introduction to Parallel Programming and pMatlab ca 2005 MAC182 Neil MacDonald, Minty, Malard, Harding, Brown, Antonioletti Writing Message Passing Parallel Programs with MPI (Version 1.8.2) http://www2.epcc.ed.ac.uk/computing/training/document_archive/mpi-course/mpi-course.pdf (free) ?lter, nicht MPI-2 MAT08 Mattson, Sanders, Massinggill Patterns for Parallel Programming 2008 978-0-321-22811-6 190/ST 230 M 444 190 Auch wenn es der Titel anders suggeriert: es werden L?sungsmuster f?r alle Sprachen und nicht nur f?r objektorientierte Sprachen vorgestellt. MEI11 Andreas Meister Numerik linearer Gleichungssysteme 2011 978-3-8348-0431-0 978-3-8348-1550-7 ebook UB, 17,18,80, 190/SK 915 M 515 190 ebook UB MIL00 Russ Miller, Laurence Boxer Algorithms Sequential &amp; Parallel 2000 0-13-086373-4 MIN20 Elspeth Minty, Robert Davey, Alan Simpson, David Henty Decomposing the Potentially Parallel (Version 2.0) http://www2.epcc.ed.ac.uk/computing/training/document_archive/decomp-course/Decomposing.pdf (free) ?lter, aber von den Konzepten noch informativ PAC97 Peter Pacheco Parallel Programming with MPI 1997 1-55860-339-5 17,190/ST 151 P 116,F 03/ST 151 P 116 http://www.cs.usfca.edu/~peter/ppmpi/ Hervorragendes Lehrbuch (MPI-1) PRE07 Press, Teukolsky, Vetterling, Flannery Numerical Recipes: The Art of Scientific Computing 2007 0-521-43108-5 978-0-521-88068-8 190/SK 900 P935 C1 (2.002) http://www.nr.com/ RAB08'10 Rabenseifner1 Parallel Programming Workshop (UPC, CAF) 2008 17/ST 150 R 361 I 6 (55) 17 https://fs.hlrs.de/projects/par/events/2009/parallel_prog_spring2009/UPC1.html RAB08'11 Rabenseifner1 Parallel Programming Workshop (MPI, OpenMP, PETSc) 2008 17/ST 150 R 361 (56) 17 https://fs.hlrs.de/projects/par/events/2009/parallel_prog_spring2009/H.html https://fs.hlrs.de//projects/par/par_prog_ws/ RAU00 T. Rauber, G. R?nger Parallele und verteilte Programmierung 2000 3-540-66009-7 ST 230 R 239 +1 Parallelarchitektur, Programmierung, Algorithmen; Inhalt RAU07 T. Rauber G. R?nger Parallele Programmierung 2007 978-3-540-46549-2 ebook HS.R ebook HS.R RAU00 neu bearbeitet und erweitert; Inhalt RAU08 T. Rauber, G. R?nger Multicore: Parallele Programmierung 2008 978-3-540-73113-9 190/ST 230 R 239 190 Die UR-Signatur suggeriert eine einfache Neuauflage von RAU00. Das ist nicht der Fall! Themen: Multicore, Programmier-Konzepte, Threads, OpenMP. SAA98 Yousef Saad Numerical Methods for Large Eigenvalue Problems 1998 (?) http://www-users.cs.umn.edu/~saad/books.html (free) SAA03 Yousef Saad Iterative Methods for Sparse Linear Systems, 2nd ed. 2003 978-0-898715-34-7 190/SK 915 S 111 190 http://www-users.cs.umn.edu/~saad/books.html (1st ed. free) STO99 Stoer, Bulirsch Numerische Mathematik 1, 2 1999 3-540-66154-9 3-540-67644-9 17/SK 900 S872 I6-1 17/SK 900 S872 I6-2 17 UEB95 Christian W. Ueberhuber Numerical Computation 1, 2 1995 3-540-62058-3 3-540-62057-5 VOR03 Henk van der Vorst Iterative Krylov Methods for Large Linear Systems 2003 978-0-521-18370-3 190/SK 915 V232 190 _Das_ Standardwerk der linearen Solver WAT07 David S. Watkins The Matrix Eigenvalue Problem 2007 978-0898716412 ebook TUM Alles ?ber das numerische Eigenwertproblem WAT10 David S. Watkins Fundamentals of Matrix Computations 2010 978-0470528334 ebook UB Alles ?ber numerische Matrizenberechnungen</field>
<field name="important">Literatur zu HPC und MPI C:\Users\brf09510\svn\hpcdoku\trunk\hpcdoku\html\Literatur.html http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/Literatur.html 15.10.2013 Literaturkategorien Einf?hrungen und ?bersichten f?r parallele Programmierung: BAU06, DON03, RAB08, RAU07, KMK05 Hardwaregrundlagen: Bau06, HAG11 MPI: MPI12, BAU06, MAC182, PAC97, ALE02, RAU07, RAB08'11, HAG11 OpenMP: OMP13, OMPC13, OMPF13, HOF08, RAB08'11 Multicore: AKH08 PVM: RAU07 Threads: RAU07 CAF: RAB08'10 UPC: RAB08'10, UPC05, GHA05 Cuda, OpenCL: Matlab: KMK05 Numerik allgemein: STO99, UEB95, DEU08, PRE07 Numerik unter spezieller Ber?cksichtigung parallelisierbarer Verfahren: GOL96, ALE02, PAC97 Numerische lineare Algebra ?(LA) allgemein: MEI11,BAI00,BAR94,FIS11,GRE97,KAN05,SAA03,VOR03,WAT07,WAT10HIG08 Numerische LA unter spezieller Ber?cksichtigung parallelisierbarer Verfahren: MEI11, RAU07, BAR94,BAI00,FIS11,GRE97,KAN05,SAA03,VOR03 Numerische gew?hnliche oder partielle Differentialgleichungen (ODE/PDE) allgemein: GRO05 Numerische ODE/PDE unter spezieller Ber?cksichtigung parallelisierbarer Verfahren: GRO05, BRU06 Nichtnumerik: Alles ?ber Algorithmen und Datenstrukturen (Hier nicht weiter aufgef?hrt, da kein HPC) Nichtnumerik unter spezieller Ber?cksichtigung parallelisierbarer Verfahren: PAC97, MIL00 Fu?noten 1) Aktuelle Liste der aktuellen Kurse des HLRS: http://www.hlrs.de/organization/sos/par/services/training/course-list/ 1) Aktuelle Liste der Veranstaltungen des HLRS: http://www.hlrs.de/events/ Literaturverzeichnis zu HPC, MPI, OpenMP und PGAS Reihenfolge: Normen, weitere Werke in alphabetischer Reihenfolge nach erstem Verfasser/Editor; mehrb?ndige Werke sind nur einmal mit allen Verfassern aufgef?hrt.??Mit ebook UR und ebook HS.R werden ?ber die Bibliotheken der Universit?t und der Hochschule Regensburg verf?gbare online-B?cher gekennzeichnet. ebook TUM und andere sind nur f?r Benutzer der aufgef?hrten Universit?ten verf?gbare online-B?cher. Der Vermerk free hei?t kostenfrei. Autor Titel Jahr ISBN Signatur 17 190 Online Bewertung MPI12 MPI: A Message Passing Interface Standard 3.0 2012 17/ST 201 M 939 17 190 www.mpi-forum.org/docs/mpi-3.0/mpi30-report.pdf (free) _Der_ Standard der Parallelprogrammierung; auch: der Assembler der Parallelprogrammierung OMP13 OpenMP Application Program Interface 2013 17/ST 201 O 61 17 190 www.openmp.org/mp-documents/OpenMP4.0.0.pdf (free) wenig Aufwand, aber auch nur begrenzter Nutzen; aktuell neue Anwendung bei SIMD OMPC13 OpenMP C/C++ openmp.org/mp-documents/OpenMP-4.0-C.pdf (free) OMPF13 OpenMP Fortran openmp.org/mp-documents/OpenMP-4.0-Fortran.pdf (free) UPC05 UPC Language Specifications V1.2 2005 http://upc.lbl.gov/docs/user/upc_spec_1.2.pdf (free) wenig genutzte, ältere Idee zur Verbesserung der Parallelprogrammierung; SPMD; global arrays; fertig; abgeschlossen CAF08 Coarray Fortran (F--) 2008 ftp://ftp.nag.co.uk/sc22wg5/N1801-N1850/N1824.pdf (free) Teil des Fortran-Standards von 2008; jederzeit benutzbar TIT06 Titanium Language Reference Manual V 2.20 2006 http://titanium.cs.berkeley.edu/doc/lang-ref.pdf (free) nur für Java-Liebhaber CHA13 Chapel Language Specification V. 0.93 2013 chapel.cray.com/spec/spec-0.93.pdf (free) 2002 (Darpa); Cray; mod. Sprachkonzept; trotz langer Entwicklung Version &amp;lt; 1; dynamische, verschachtelte Parallelität; mehrdimensionale globale Felder; unfertig X1013 X10 Language Specification V. 2.4 2013 x10.sourceforge.net/documentation/languagespec/x10-latest.pdf (free) 2002 (Darpa); IBM; mod. Sprachkonzept; dynamische, verschachtelte Parallelität; mehrdimensionale globale Felder; unfertig AKH08 Shameen Akhter, Jason Roberts Multicore Programming 2008 978-3939084-70-9 17/ST 230 A315 190 Multicore-Architektur, Threading, OpenMP, Fehler (Races, Deadlock, Threadsafe, Pipeline stalls,...), Debugging, Intel-Tools ALE02 Alefeld, Lenhardt, Obermaier Parallele numerische Verfahren 2002 3-540-42519-5 17/ST 151 A366 190 Theorie, ?bungen, Clusterbau, Clusterbedienung, MPI-Bedienung (zu breit; zu wenig tief bei den Einzelthemen) BAI00 Bai, Demmel, Dongarra, Ruhe, Forst Templates for the Solution of Algebraic Eigenvalue Problems 2000 0-89871-471-0 190/SK 915 B152 190 BAR94 Barrett, Berry...Vorst Templates for the Solution of Linear Systems: Building Blocks for Iterative Methods, 2nd Edition 1994 978-0898713282 http://www.netlib.org/linalg/html_templates/report.html (free) http://www.netlib.org/linalg/html_templates/Templates.html Kurzgefasste und gut verst?ndliche ?bersicht ?ber den Stand der linearen Solver BAU06 Heiko Bauke, Stephan Mertens Cluster Computing 2006 3-540-42299-4 17/ST 160 B346 17 190 http://www.clustercomputing.de/ (Programme); ebook UR Parallelrechner, Cluster, MPI, Tools, Libraries (GSL, BLAS, LAPACK, Atlas, ...), PSE (PETSc...), Benchmarks BRU06 Bruaset Tveito Numerical Solutions of PDE on Parallel Computers 2006 978-3-540-29076-6 ebook UB ebook UB Modern, umfangreich, breites Themenspektrum (partitioning and load balancing, domain decomposition, multigrid, preconditioning, mesh generation, hypre, PETSc, ...) ? DAV06 Tim Davis Direct Methods for Sparse Linear Systems 2006 978-0-898716-13-9 80/SK 915 D264 DEU08 Deuflhard, Hohmann, Bornemann Numerische Mathematik 1, 2 2008 978-3-11-020354-7 978-3-11-020356-1 17/SK 900 D 485 17 Moderne, sorgf?ltige, gut verst?ndliche Einf?hrung in die numerische Mathematik DON03 Dongarra, Foster, Fox, Gropp, Kennedy, Torczon, White Sourcebook of Parallel Computing 2003 1-55860-871-0 17/ST 200 K21(.008)/ST 200 D 682 +1 HS.R ?berblick Hardware, Parallelrechnen, Spezialthemen (CFD, Chemie,...)Software (MPI, IO, PSE,...), Tools (Debugging), Algorithmen (Mesh, LA, PDE,...); kurz: einfach alles! FIS11 Bernd Fischer Polynomial Based Iteration Methods for Symmetric Linear Systems 2011 978-1-611971-91-0 190/SK 915 F 529 17,80,190 GHA05 Tarek El-Ghazawi, Carlson, Sterling, Yelick UPC, Distributed Shared Memory Programming 2005 0-471-22048-5 GOL96 Golub, Ortega Scientific Computing 1996 3-519-02969-3 17/SK 900 G629 17 GRE97 Anne Greenbaum Iterative Methods for Solving Linear Systems 1997 978-0-898713-96-1 190/SK 915 G 798 190 GRO96 Gropp, Lusk, Skjellum Using MPI 1996 0-262-57104-8 F 00/99 1584 http://www.mcs.anl.gov/research/projects/mpi/usingmpi/usingmpi-1st/index.html ?lter; MPI-1, noch KR-Stil in C GRO99-1 Gropp, Lusk, Skjellum Using MPI 1999 0-262-57132-3 http://www.mcs.anl.gov/research/projects/mpi/usingmpi/index.html GRO99-2 Gropp, Lusk, Thakur Using MPI-2 1999 0-262-57133-1 190/ST 151 G876 U8 http://www.mcs.anl.gov/research/projects/mpi/usingmpi2/index.html GRO94 Gro?mann, Roos Numerik partieller Differentialgleichungen 1994 3-519-12089-5 17/SK 920 G878 17 GRO05 Gro?mann, Roos Numerische Behandlung partieller Differentialgleichungen 2005 3-519-22089-X 17/SK 920 G878 (3) 17 HAG11 Georg Hager, Gerhard Wellein Introduction to High Performance Computing for Scientists and Engineers 2011 978-1-4398-1192-4 190/ST 151 H144 17,84,190 Hardware- und Softwaregrundlagen HIG08 Nickolas J. Higham Functions of Matrices 2008 978-0-898716-46-7 190/SK 220 H638 190 Theorie und Numerik der Matrizenfunktionen HOF08 S. Hoffmann, R. Lienhart OpenMP 2008 978-3-540-73122-1 17/ST 201 O61 H711 190/ST 250 C01 H 711 190 OpenMP bei Multicore in C/C++ KAN05 Christian Kanzow Numerik linearer Gleichungssysteme: Direkte und iterative Verfahren 2005 978-3-540-20654-X ebook UB/HS.R KMK05 Kim, Mullen, Kepner Introduction to Parallel Programming and pMatlab ca 2005 MAC182 Neil MacDonald, Minty, Malard, Harding, Brown, Antonioletti Writing Message Passing Parallel Programs with MPI (Version 1.8.2) http://www2.epcc.ed.ac.uk/computing/training/document_archive/mpi-course/mpi-course.pdf (free) ?lter, nicht MPI-2 MAT08 Mattson, Sanders, Massinggill Patterns for Parallel Programming 2008 978-0-321-22811-6 190/ST 230 M 444 190 Auch wenn es der Titel anders suggeriert: es werden L?sungsmuster f?r alle Sprachen und nicht nur f?r objektorientierte Sprachen vorgestellt. MEI11 Andreas Meister Numerik linearer Gleichungssysteme 2011 978-3-8348-0431-0 978-3-8348-1550-7 ebook UB, 17,18,80, 190/SK 915 M 515 190 ebook UB MIL00 Russ Miller, Laurence Boxer Algorithms Sequential &amp; Parallel 2000 0-13-086373-4 MIN20 Elspeth Minty, Robert Davey, Alan Simpson, David Henty Decomposing the Potentially Parallel (Version 2.0) http://www2.epcc.ed.ac.uk/computing/training/document_archive/decomp-course/Decomposing.pdf (free) ?lter, aber von den Konzepten noch informativ PAC97 Peter Pacheco Parallel Programming with MPI 1997 1-55860-339-5 17,190/ST 151 P 116,F 03/ST 151 P 116 http://www.cs.usfca.edu/~peter/ppmpi/ Hervorragendes Lehrbuch (MPI-1) PRE07 Press, Teukolsky, Vetterling, Flannery Numerical Recipes: The Art of Scientific Computing 2007 0-521-43108-5 978-0-521-88068-8 190/SK 900 P935 C1 (2.002) http://www.nr.com/ RAB08'10 Rabenseifner1 Parallel Programming Workshop (UPC, CAF) 2008 17/ST 150 R 361 I 6 (55) 17 https://fs.hlrs.de/projects/par/events/2009/parallel_prog_spring2009/UPC1.html RAB08'11 Rabenseifner1 Parallel Programming Workshop (MPI, OpenMP, PETSc) 2008 17/ST 150 R 361 (56) 17 https://fs.hlrs.de/projects/par/events/2009/parallel_prog_spring2009/H.html https://fs.hlrs.de//projects/par/par_prog_ws/ RAU00 T. Rauber, G. R?nger Parallele und verteilte Programmierung 2000 3-540-66009-7 ST 230 R 239 +1 Parallelarchitektur, Programmierung, Algorithmen; Inhalt RAU07 T. Rauber G. R?nger Parallele Programmierung 2007 978-3-540-46549-2 ebook HS.R ebook HS.R RAU00 neu bearbeitet und erweitert; Inhalt RAU08 T. Rauber, G. R?nger Multicore: Parallele Programmierung 2008 978-3-540-73113-9 190/ST 230 R 239 190 Die UR-Signatur suggeriert eine einfache Neuauflage von RAU00. Das ist nicht der Fall! Themen: Multicore, Programmier-Konzepte, Threads, OpenMP. SAA98 Yousef Saad Numerical Methods for Large Eigenvalue Problems 1998 (?) http://www-users.cs.umn.edu/~saad/books.html (free) SAA03 Yousef Saad Iterative Methods for Sparse Linear Systems, 2nd ed. 2003 978-0-898715-34-7 190/SK 915 S 111 190 http://www-users.cs.umn.edu/~saad/books.html (1st ed. free) STO99 Stoer, Bulirsch Numerische Mathematik 1, 2 1999 3-540-66154-9 3-540-67644-9 17/SK 900 S872 I6-1 17/SK 900 S872 I6-2 17 UEB95 Christian W. Ueberhuber Numerical Computation 1, 2 1995 3-540-62058-3 3-540-62057-5 VOR03 Henk van der Vorst Iterative Krylov Methods for Large Linear Systems 2003 978-0-521-18370-3 190/SK 915 V232 190 _Das_ Standardwerk der linearen Solver WAT07 David S. Watkins The Matrix Eigenvalue Problem 2007 978-0898716412 ebook TUM Alles ?ber das numerische Eigenwertproblem WAT10 David S. Watkins Fundamentals of Matrix Computations 2010 978-0470528334 ebook UB Alles ?ber numerische Matrizenberechnungen</field>
</doc>
<doc>
<field name="id">http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/hpc08.html</field>
<field name="title">Athene HPC-Cluster \@ Uni-Regensburg</field>
<field name="url">http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/hpc08.html</field>
<field name="content">Athene HPC-Cluster \@ Uni-Regensburg Athene HPC-Cluster Uni-Regensburg http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/hpc08.html http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/hpc08.pdf http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/hpc08.dvi Feb 25, 2013 Chapter 1 What's New - Neuigkeiten 10'2012: Neue Kommandos: wip, qparams common 10'2012: Neue Graphikkarten 2012: Neuinstallation wegen Auslaufen der Wartungsverträge 13.6.2011: Neuer Knoten mit 2 Tesla M2070 GPGPU-Karten 10.1.2011: Neue Knoten 798, 801-816 11.2.2010: Neue Knoten 785-797 16.11.2009: Chapel von Cray, eine PGAS-Sprache mit Ziel hoher Produktivität, funktioniert. http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/hpccpl.html 10.11.2009: UPC, eine PGAS-Sprache, funktioniert. http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgasupc.html 30.10.2009: Titanium, eine PGAS-Sprache, funktioniert. http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgastit.html Chapter 2 Probleme module load parastation-gcc geht nicht Chapter 3 Schnelleinstieg Zum Rechnen auf der Athene benötigt man einen Athene-Account den Login-Knoten Athene1 zum Einloggen einen Parallel-Compiler (FSF/Gnu, Intel) eine Parallel-Bibliothek (meist eine der MPI-Bibliotheken) das Torque-Batch-System zum Starten der Jobs auf den Knotenrechnern 3.1  Account Bitte stellen Sie einen Antrag auf Clusterbenutzung im Rechenzentrum. Ihr normaler NDS-Account wird nach Genehmnigung auf die Athene übertragen. Ein elektronisches Antragsformular finden Sie in http://www-cgi.uni-regensburg.de/RZ/Dienste/Linux/HPC/index.phtml 3.2  Login Der sog. Loginknoten ist Athene1; zum Arbeiten an der Athene müssen Sie sich dort einloggen. Als Account wird Ihr normaler NDS-Account verwendet. Beispiel mit ssh unter Linux: ssh bbbxxxx@athene1 (aus dem Intranet) Eine direkte Einwahl aus dem Internet ist verboten; Sie müssen von einem Rechner aus dem Intranet kommen. Für Studenten ist das vorzugsweise rex1, für wissenschaftliche Mitarbeiter rex2: ssh bbbxxxx@rex1.rz.uni-regensburg.de ssh athene1 Bildschirmprotokoll: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/ssh.txt) 3.3  Wahl von Compiler und MPI-Library Es stehen mehrere Werkzeuge zur Programmentwicklung zur Verfügung. Um sie benutzen zu können, müssen diverse Umgebungsvariable gesetzt werden. Das kann direkt geschehen, wenn Sie sich auskennen oder mit dem module-System automatisiert erfolgen. In jedem Fall wird ein Compiler benötigt. Derzeit sind zwei Hersteller (FSF/Gnu, Intel), drei Sprachen (Fortran, C, C++) und ihre Versionsvarianten (Intel 10, Intel 11, gnu 4.1, gnu 4.4) verfügbar. Hersteller Aufruf Sprache Compiler Version (Stand Oktober 2009) FSF/Gnu gfortran Fortran gfortran 4.1.2, 4.4.1 FSF/Gnu gcc C gcc 4.1.2, 4.4 FSF/Gnu g++ C++ g++ 4.1.2, 4.4.1 Intel ifort Fortran ifort 10.0, 11.0 Intel icc C icc 10.0, 11.0 Intel icpc C++ icpc 10.0, 11.0 Über den aktuellen Stand können Sie sich jederzeit mit dem Kommando module avail informieren. Die wichtigste Parallelbibliothek ist MPI, die auf der Athene in derzeit drei Varianten vorliegt. MPI-Bibliothek Beschreibung Webseite für weitere Informationen Parastation MPI MPICH für Infiniband MVAPICH2 MPICH2 für IB mit VAPI http://mvapich.cse.ohio-state.edu/ Intel MPI (impi) Die vierte Variante openMPI ist derzeit nur für den internen Gebrauch vorgesehen. 3.3.1  Wahl von Compiler/MPI-Library mit module   Eine ausführliche Beschreibung von module finden Sie unter http://modules.sourceforge.net/ http://modules.sourceforge.net/man/module.html module ist ein Alias für die folgende Kommandofolge mit dem Kommandokern /usr/bin/modulecmd ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/modalias.txt) Die häufigsten module-Kommandos sind: module avail (Welche Module existieren?) module load parastation-gcc (Laden eines Moduls - hier impi-intel) module list (Welche Module sind geladen?) module unload parastation-gcc (Entfernen eines Moduls - hier parastation-gcc) Manche Module schließen sich wechselseitig aus. Beim Wechsel muss dann vorher das alte Modul erst entfernt werden. Module-Argument dot GraphViz: Tool zur Erzeugung von Graphen gcc-4.4 Gnu Compiler Collection 4.4 (C/C++/Fortran unterstützt OpenMP V3) impi-gcc impi übersetzt mit gcc impi-intel impi übersetzt mit icc intel-10.0-icc Intel icc 10.0 intel-10.0-ifort Intel ifort 10.0 intel-11.0 Intel icc/ifort 11.0 module-cvs module-info modules mvapich2-gcc MVAPICH2 übersetzt mit gcc mvapich2-intel MVAPICH2 übersetzt mit icc null parastation-gcc Parastation MPI übersetzt mit gcc parastation-intel Parastation MPI übersetzt mit icc use.own Zu OpenMP siehe http://sites.google.com/site/gfortransite/ Zu gfortran siehe http://gcc.gnu.org/wiki/GFortran 3.4  Übersetzung Die Übersetzung normaler Programme und ihr Start sollte Linux-Kundigen keine Probleme bereiten. Nur die zusätzliche Verwendung paralleler Bibliotheken wie MPI erfordert Änderungen bei der gewohnten Bedienung. In diesen Schnelleinstieg wird nur die Kombination FSF/Gnu mit Parastation-MPI beschrieben. Andere Kombinationen lesen Sie bitte in der ausführlicheren Dokumentation weiter unten nach. Wir verwenden ein Hello-World-Programm mit MPI: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/helmpi.c) Es wird mit gcc übersetzt, anschließend wird Parastation-MPI anmontiert. Wie das folgende Beispiel zeigt, sind trotz des Wrappers mpicc die normalen Compiler-Optionen erlaubt. Natürlich müssen Sie ein Programm nur einmal übersetzen. Die bei der Option Wall erscheinende Warnung in mpi.h kann ignoriert werden. module load parastation-gcc mpicc helmpi.c mpicc -v helmpi.c mpicc -ansi -pedantic -Wall -o hp helmpi.c In file included from helmpi.c:3: /opt/parastation/mpi2/include/mpi.h:344: warning: ISO C90 does not support 'long long' Die C++-Variante lautet: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/helmpi.cc) Es wird mit g++ übersetzt, anschließend wird Parastation-MPI anmontiert. Wie das folgende Beispiel zeigt, sind trotz des Wrappers mpicxx die normalen Compiler-Optionen erlaubt. Natürlich müssen Sie ein Programm nur einmal übersetzen. Die bei der Option Wall erscheinende Warnung in mpi.h kann ignoriert werden. module load parastation-gcc mpicxx helmpi.cc mpicxx -v helmpi.cc mpicxx -ansi -pedantic -Wall -o hp helmpi.cc 3.5  Start von HPC-Jobs Das übersetzte Programm sollte normalerweise als Batchjob zur parallelen Ausführung auf den Knotenrechnern gestartet werden. Dazu wird Torque verwendet. Es ermöglicht sowohl einen interaktiven Start von Jobs (z.B. zum Debuggen) als auch den Start von Batch-Jobs. Torque ist aus dem älteren OpenPBS hervorgegangen. Deshalb taucht das Kürzel PBS in den Submit-Scripts auf. Der Scheduler heißt Maui. Beschreibung: http://www.clusterresources.com/pages/resources/documentation.php http://www.clusterresources.com/pages/products/torque-resource-manager.php http://www-theor.ch.cam.ac.uk/IT/servers/maui/maui-pbs-introduction.html Der Batchjob wird in einem modifizierten Shell-Script, einem sog. PBS-Script aufgerufen. Als Script-Prozessor eignen sich alle Linux-Script-Prozessoren (bash, csh, sh,...). ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/batch.sh) Mit der ersten Pseudokommentarzeile (Shebang #!/bin/bash) wird bash zur Ausführung gestartet. Die folgenden PBS-Direktiven ( #PBS directive) sind mit dem Schlüsselwort PBS als Direktiven gekennzeichnet. Zeile 2 fordert 4 Knotenrechner (nodes) mit je 8 CPUs (ppn - processors per node, cores), also insgesamt 32 Cores an. Zeile 3 stellt eine maximale Verweilzeit (walltime - Wanduhr) des Jobs von 1 Minute ein. Verweilt der Job länger als die hier angegebene Zeit im System, wird er automatisch abgebrochen. Kleine Werte führen andereseits zu einem früheren Jobstart als größere. Wählen Sie also die Werte nach dem Prinzip so klein wie möglich, so groß wie nötig, vielleicht mit einem moderaten Sicherheitszuschlag nach oben. Diese Angabe wird also vom Batchsystem verwendet, um den Zeitpunkt des Jobstarts zu bestimmen und um zu lange (möglicherweise fehlerhafte) Jobs wieder zu entfernen. Der folgende Kommentar in Zeile 5 begrenzt die Rechenzeit (cput - CPU Time pro Core) auf 1 Minute. Dieser Wert kann angegeben werden, spielt jedoch keine Rolle, da er vom Batchsystem nicht verwendet wird. Der Rest der Datei besteht aus normalen Shellscript-Kommandos. Das cd-Kommando wechselt vom möglicherweise falschen Verzeichnis ${HOME} in das Verzeichnis ${PBS_O_WORKDIR}, aus dem das PBS-Script aufgerufen wurde. Hier werden auch die Resultate gespeichert. Das letzte Kommando mpiexec startet das Programm in der Datei hp auf 32 Cores (die Datei hp wurde wie in der letzten Übersetzung weiter oben erstellt). Der Job wird mit dem Kommando qsub batch.sh in die Queue gestellt und abgearbeitet, sobald genügend Knoten frei geworden sind und der Job unter allen mit ihm konkurrierenden die höchste Priorität bekommen hat. Auch im qsub-Kommando können begrenzende Limits als Option wie im PBS-Script selbst angegeben werden. Im folgenden Beispiel wird mit der Option -l (limit) die maximale walltime begrenzt. Von mehreren konkurrierenden Angaben gilt zunächst die qsub-Angabe, dann die PBS-Angabe und zuletzt die Voreinstellung. qsub -l walltime=2:0:0 batch.sh (beim Start) #PBS -l walltime=2:00:00 (im PBS-Script) Mit dieser Beispiel-Option wird die maximale Verweilzeit (walltime) auf 2 Stunden begrenzt. Begrenzung der CPU-Zeit (cput) hat keine Wirkung. Über den Status von Jobs, Queues und Server gibt das Kommando qstat Auskunft. qstat qstat  job-id qstat -f  job-id qstat -q  Queue-Übersicht qstat -Q  Queue-Übersicht Versehentlich gestartete Jobs können mit qdel wieder gelöscht werden: qdel job-id Nach dem normalen Ende eines Jobs werden die nach stdout und stderr geschriebenen Programmergebnisse in zwei Dateien geschrieben, deren Namen mit dem PBS-Scriptnamen beginnen und die Jobnummer enthalten. Im Beispiel sind das ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/eofiles.txt) Ein interaktiver Job wird gestartet mit qsub -I Queue-Übersicht (Jan'2011): common common32 striegnitz rzkurs spang_i merkl bocola condmat serial develop express dick Chapter 4 Allgemeines 4.1  Zeittafel Abnahme: 26.2.2009 Testbetrieb: Februar 2009 Einweihung: 29.4.2009 Inbetriebnahme: 1.4.2009 Chapter 5 Hardware In der veralteten und zu groben Taxonomie nach Flynn ist die Athene als MIMD-Architektur aufgebaut. Die Struktur des gesamten Clusters ist eine Distributed Memory Architektur. Jeder Knoten hat seinen eigenen Speicher, die Kommunikation erfolgt über eines der beiden Netze (Infiniband, GigE). Jeder einzelne Knoten verfügt über zwei Prozessoren mit je eigenem Speicher, der jedoch prinzipiell von beiden Prozessoren genutzt werden kann, also eine ccNUMA-Architektur. Jeder der beiden Prozessoren besteht aus vier Rechnerkernen mit gemeinsamem Speicher, bildet also eine SMP-Architektur. 5.1  Rechner Bei der Erstinstallation war der Cluster fast homogen. Bei Erweiterungen kann diese Homogenität nicht erhalten bleiben. 5.1.1  Übersicht   Login Node (Athene 1), Typ S1 Master Node (Athene 2), Typ S1 File Server (Athene 3-4), 2 Typ S1 Node 1-122 (Infiniband), 122 Typ O1 Node 123-143 (Infiniband), 21 Typ O2 Node 144-176 (Infiniband), 33 Typ O3 Node 769-776, 780 (Gigabit Ethernet), 9 Typ O4 Node 777-779 (Gigabit Ethernet), 3 Typ O5 Node 785-797 (Gigabit Ethernet), 13 Typ X1 Node 798,801-816 (Gigabit Ethernet), 17 Typ X2 Node 833-834 (Infiniband), 2 Typ X3 Zusammen 220 Knoten, 402 × Quadcore-CPUs, 38 × Hexacore-CPUs und 1836 Cores (1504 Opteron, 104+228 Xeon). Gesamtspeicher: 4352 GiB (Damit kann grob im gesamten Cluster eine dichte n×n-Matrix, n=700000 gespeichert werden. Die Größenordnung der Rechenzeit für eine Gausselimination bei dieser Matrix ist bei 220 Knoten = 1760 Cores mit 2 GHz rechnerisch mindestens t=20 h.) Nicht jeder node ist allgemein verfügbar. 5.1.2  Ausstattung der Rechenknoten Typ O1, 1-122   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 16 GiB HDD: 250 GB Interconnect: GbE, 4X-DDR IB 5.1.3  Ausstattung der Rechenknoten Typ O2, 123-143   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 16 GiB HDD: 500 GB Interconnect: GbE, 4X-DDR IB 5.1.4  Ausstattung der Rechenknoten Typ O3, 144-176   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 32 GiB HDD: 500 GB Interconnect: GbE, 4X-DDR IB 5.1.5  Ausstattung der Rechenknoten Typ O4, 769-776,780   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 16 GiB HDD: 500 GB Interconnect: GbE 5.1.6  Ausstattung der Rechenknoten Typ O5, 777-779   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 32 GiB HDD: 1 TB Interconnect: GbE 5.1.7  Ausstattung der Rechenknoten Typ S1, athene[1-4]   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 32 GiB HDD: 146 GB SAS Interconnect: 10 GbE, 4X-DDR IB 5.1.8  Ausstattung der Rechenknoten, Typ X1, 785-797   CPU: 2 × Intel Xeon, 2,4 GHz (E5530, Nehalem-EP "Gainestown" [4 Cores, 8 Threads]) RAM: 24 GiB HDD: 250 GB Interconnect: GbE 5.1.9  Ausstattung der Rechenknoten, Typ X2, 798, 801-816   CPU: 2 × Intel Xeon, 2,66 GHz (X5650, Westmere-EP "Gulftown" [6 Cores, 12 Threads]) RAM: 24 GiB HDD: 250 GB Interconnect: GbE 5.1.10  Ausstattung der Rechenknoten, Typ X3, 833,834   CPU: 2 × Intel Xeon, 2,8 GHz (X5660, Westmere-EP "Gulftown" [6 Cores, 12 Threads]) GPU: 1 × M2070 (nVidia Tesla "Fermi"), 6 GiB ECC-RAM, 448 CUDA-Recheneinheiten (Organisation: 14 Shadercluster a 32 Streamprozessoren; theoretische Leistung: Rpeak_SP 1.03TFlops, Rpeak_DP 515GFlops) RAM: 24 GiB HDD: 250 GB Interconnect: GbE, 4X-QDR IB System: Debian 5.1.11  Zugriffsrechte   public: 1-108, 144-176 (common queue) seriell: 769 - 780 common32: 144-176 (4GiB pro Prozess) Striegnitz: 109-122 Spang: 123-134, 769-776 Merkl: 135-143 Bocola: 777-779 condmat (Richter/Grifoni): 785-797, 801-816 dick: 798 tesla: 833,834 (currently in development) 5.1.12  Voreinstellung der Queues common, common32, serial, express und develop   min.nodect = 2 max.nodect = 32 default.pmem = 1 GiB max.pmem = 2 GiB default.nodes = 2:ppn = 8 max.walltime = 48:00 h max_user_queuable = 20 default.nodes = 1:ppn = 1 (serial queue) default.pmem = 2 GiB (common32) max.pmem = 4 GiB (common32) max.walltime = 5:00 h (express) max.nodect = 4 (express) max.walltime = 0:10 h (develop) Aktuelle Angaben mit qstat -q und qstat -Q erfragen! 5.2  Netz Gigabit Ethernet (Broadcom Corporation NetXtreme Gigabit Ethernet PCI Express (rev 21)) Infiniband (DDR 4x, 20 GBit/s, InfiniBand: Mellanox Technologies MT25204 [InfiniHost III Lx HCA] (rev 20)) Zwei unabhängige Netze, die beide für Message Passing verwendet werden können. Das Ethernet wird eher für Verwaltungszwecke, Infiniband eher für Message Passing eingesetzt. Message Passing mit Ethernet bremst Programme um einen Faktor von etwa 8. 5.3  Dateisystem 5.3.1  Dateiserver Athene3 Athene4 Zwei NFS-Server für die Dateisysteme $HOME (quotiert, 3GiB/15000 files), /scratch und /data. Derzeit existiert kein paralleles Filesystem. 5.3.2  Lokale Filesysteme: NFS /tmp kann auch für lokale temporäre Daten verwendet werden; ist bei verteilter Anwendung mit vielen Knoten unter Umständen schneller als /scratch. 5.3.3  Umgang mit den Scratch-Verzeichnissen Lokales Scratch wird nach jedem Jobende gelöscht. Benutzung unter /scratch/${PBS_JOBID} NFS-Scratch1 und -Scratch2: Hier existiert pro Benutzer ein Unterverzeichnis. Bei 80% Füllstand werden älteste Dateien automatisch gelöscht, bis ein Füllstand von 60% erreicht wird. Achtung: Es ist unfair und wird überwacht, ob Dateien mit touch aufgefrischt werden. Chapter 6 Betriebssystem SLES10 SP2 Enterprise Linux (Novell) Chapter 7 Sprachen und Compiler 7.1  FSF/Gnu Alle Gnu-Compiler stehen ohne weitere Vorbereitung direkt zur Verfügung (gfortran, gcc, g++). Für MPI-Programme sollte ein Wrapper zur Übersetzung benutzt werden (mpicc). 7.2  Intel Intel muss mit module load aktiviert werden. module load intel-11.0 module load intel-10.0-icc module load intel-10.0-ifort Die Compiler heißen mit ifort, icc und icpc. /opt/intel/Compiler/11.0/074/Documentation http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/Documentation/getting_started_c.htm http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/Documentation/getting_started_f.htm Es wird mit dem Compiler von Intel und der MPI-Bibliothek von MVAPICH übersetzt: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/mpicc.txt) 7.3  OpenMP OpenMP (Open Multiprocessing) ermöglicht parallele Ausführung in mehreren Threads, die durch Compiler-Direktiven in C, C++ und Fortran gesteuert werden. Derzeit mit den Intel- und mit Gnu-Compilern (Version 4.4) möglich. Zu OpenMP siehe http://sites.google.com/site/gfortransite/ Zu gfortran siehe http://gcc.gnu.org/wiki/GFortran Umgebungsvariable für OpenMP: setenv OMP_NUM_THREADS 5 (c-shell) export OMP_NUM_THREADS=5 (bash) Übersetzung mit gcc -fopenmp x.c 7.4  PGAS 7.4.1  co-Array Fortran siehe http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgascaf.html 7.4.2  UPC: Unified parallel C siehe http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgasupc.html 7.4.3  Titanium: PGAS-Sprache auf Java-Gundlage siehe http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgastit.html Titanium ist eine in Berkeley entwickelte Java-basierte PGAS-Sprache. Webseite: http://titanium.cs.berkeley.edu/ Im Verzeichnis /home/brf09510/tc existiert eine clusterfähige Titaniuminstallation. Sie kann benutzt werden, wenn ihr Verzeichnisname in den Pfad eingetragen wird. setenv PATH "${PATH}:/home/brf09510/tc/bin" Der Compiler kann (fast) jedes Java-Programm und jedes Titanum-Programm übersetzen. Die umfangreiche Java-Bibliothek steht natürlich nur sehr eingeschränkt zur Verfügung. Der Compileraufruf ist tcbuild --help tcbuild --backend gasnet-ibv-uni hello.ti tcbuild --backend mpi-cluster-uniprocess hello.ti tcbuild --backend sequential hello.ti tcbuild --backend smp hello.ti Übersetzte Titanium-Programme werden mit normalen PBS-Jobs auf den Clusterknoten gestartet. Das folgende Beispiel startet ein Programm in der Datei ./hello. ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/titjob.sh) 7.4.4  X10 http://x10-lang.org/ http://dist.codehaus.org/x10/documentation/languagespec/x10-latest.pdf http://domino.research.ibm.com/comm/research_projects.nsf/pages/x10.index.html. 7.4.5  Chapel http://chapel.cray.com/spec/spec-0.795.pdf http://chapel.cray.com/. 7.4.6  Fortress Chapter 8 Bibliotheken 8.1  Parallelrechnen 8.1.1  Parastation-MPI (modifiziertes MPICH mit Infiniband-Kommunikation) 8.1.2  mvapich 8.1.3  Intel-MPI /opt/intel/impi/3.2.0.011/Doc_Index.html http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/impi/3.2.0.011/Doc_Index.html 8.1.4  OpenMP 8.2  Atlas Die Bibliothek steht im Verzeichnis /opt/lapack/atlas-3.8.2 Mit dem folgenden Beispielprogramm (Quelle: http://math-atlas.sourceforge.net/faq.html) wird die Versionsnummer der Bibliothek am Bildschirm ausgegeben: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/atlasv.c) Übersetzung des Beispiels und Start: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/atlasv.r) 8.3  MKL Math Kernel Library /opt/intel/Compiler/11.0/074/Documentation/mkl http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/Documentation/mkl/mkl_documentation.htm Chapter 9 Torque und Maui 9.1  Torque 9.1.1  Übersicht siehe http://www.clusterresources.com/products/torque/docs/a.acommands.shtml 9.1.2  qsub siehe http://www.clusterresources.com/products/torque/docs/commands/qsub.shtml 9.1.3  Ressourcen siehe http://www.clusterresources.com/products/torque/docs/2.1jobsubmission.shtml\#resources Ressource Wert Bedeutung cput [[hh:]mm:]ss Maximale CPU-Zeit pro core des Jobs walltime [[hh:]mm:]ss Maximale Verweilzeit des Jobs 9.1.4  qstat 9.1.5  qdel 9.2  PBS 9.2.1  PBS Umgebungsvariable   Die folgenden Umgebungsvariable werden von der Umgebung des qsub-Kommandos weitergereicht: Variable Wert (Bsp) Beschreibung PBS_ENVIRONMENT PBS_BATCH set to PBS_BATCH to indicate that the job is a batch job; otherwise set to PBS_INTERACTIVE to indicate that the job is a PBS interactive job PBS_JOBID 165139.Athene2 the job identifier assigned to the job by the batch system PBS_JOBNAME batch.sh the job name supplied by the user PBS_NODEFILE /var/spool/torque/aux// the name of the file that contains the list of the nodes 165139.Athene2 assigned to the job PBS_QUEUE common the name of the queue from which the job is executed PBS_TMPDIR Die Umgebungsvariable X aus der Umgebung des qsub-Kommandos wird als Variable PBS_O_X weitergereicht. Variable Wert (Bsp) Beschreibung PBS_O_HOME /home/brf09510 HOME variable in the evvironm. in which qsub was executed PBS_O_LANG en_US.UTF-8 LANG variable in the evvironm. in which qsub was executed PBS_O_LOGNAME brf09510 LOGNAME variable in the evvironm. in which qsub was executed PBS_O_PATH /usr/bin:/bin:/ PATH variable in the evvironm. in which qsub was executed PBS_O_MAIL /var/mail/brf09510 MAIL variable in the evvironm. in which qsub was executed PBS_O_SHELL /bin/tcsh SHELL variable in the evvironm. in which qsub was executed PBS_O_TZ TZ variable in the evvironm. in which qsub was executed PBS_O_HOST Athene1.uni-regensburg.de the name of the host upon which the qsub command is running. PBS_SERVER Athene1.uni-regensburg.de the hostname of the pbs_server which qsub submits the job to. PBS_O_QUEUE batch the name of the original queue to which the job was submitted. PBS_ARRAYID each member of a job array is assigned a unique identifier (see -t) PBS_O_WORKDIR /home/brf09510 the abs. path of the current working dir. of the qsub command Zusätzlich werden die folgenden Umgebungsvariable definiert: Variable Wert (Bsp) Beschreibung PBS_O_HOST Athene1.uni-regensburg.de the name of the host upon which the qsub command is running PBS_O_QUEUE batch the name of the original queue to which the job was submitted PBS_O_WORKDIR /home/brf09510 the absolute path of the current working directory of the qsub command 9.3  Maui Chapter 10 Debuggen Intel /opt/intel/Compiler/11.0/074/Documentation/idb /opt/intel/Compiler/11.0/074/idb/Getting_Started.html http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/Documentation/idb/Getting_Started.html http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/Documentation/idb/debugger_documentation.htm Chapter 11 Weitere Details Parastation zur Steuerung des Clusters (Process Management) Gridmonitor Webseite: http://cluster-competence-center.com/support.php Chapter 12 Glossar AMD: CPU-Hersteller (K10). ATLAS: Automatically Tuned Linear Algebra Software. Zur Zeit stehen C- und F77-Schnittstellen bereit, die effiziente parallele BLAS- und LAPACK-Funktionen aufrufen. Bandbreite ( bandwidth): Maximale Frequenz, mit der Daten über eine Verbindung des Netzes geschickt werden können. Einheit: Byte pro Sekunde. Daraus folgt die Übertragungszeit t für n Byte mit der Bandbreite b: t = n /b. Barcelona: Quadcore-Chip von AMD mit vier K10-Architekturen. BSP: Bulk Synchroneous Programming; älteres Software-Modell mit Message Passing; http://www.bsp-worldwide.org/. CAF: siehe Co-Array Fortran ccNUMA: Cluster-Architektur (Cache Coherent Nonuniform Memory Access). Jede CPU verfügt über einen Cache zum Speicher; manchmal teilen sich CPU-Gruppen einen gemeinsamen Cache. Jede CPU kann aber prinzipiell (schlimmstenfalls nach Wartezeit) auf jede Speicherzelle zugreifen. Die Caches werden automatisch synchronisiert. Der Cache beschleunigt die Speicherzugriffe im Vergleich zu NUMA. Chapel: Eine PGAS-Sprache von Cray http://chapel.cray.com/spec/spec-0.795.pdf http://chapel.cray.com/. CMF: nicht mehr aktuelles Software-Modell. Co-Array Fortran: PGAS-Sprache; http://www.nag.co.uk/SC22WG5/. http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgascaf.html (Skript) CUDA: Software-Modell von NVidia (siehe GPU). Core: CPU-Kern (Unabhängig agierende ALU/FPU, die ein Programm eigenständig abarbeiten kann). DARPA: Defense Advanced Research Projects Agency (U.S Department of Defense institute) Urheber eines Projektes für den Entwurf neuer paralleler Programmiersprachen 2002. Seit 2006 konkurrieren noch die Entwürfe X10 (IBM), Chapel (Cray) und Fortress (Sun). http://www.hpcx.ac.uk/research/hpc/technical_reports/HPCxTR0706.pdf. Distributed Memory: Cluster-Architektur. Jeder Prozessor hat seinen eigenen Speicher. Datenaustausch zwischen den Prozessoren erfolgt über ein unabhängiges Netz. DM/DMEM: Distributed memory; viele Prozessoren haben je einen eigenen Speicher; vermeidet Flaschenhälse; erfordert Kommunikation. DMP: Distributed Memory Processing; Jede CPU ist mit eigenem Speicher ausgestattet. Alternative zu SMP. Fortress: PGAS-Sprache von Sun. http://projectfortress.sun.com/Projects/Community/ http://research.sun.com/projects/plrg/fortress.pdf http://research.sun.com/projects/plrg/Publications/GSPx-Lecture2006public.pdf. GAS: Global address space GASNET: Global-Address Space Networking. GASNet is a language-independent, low-level networking layer that provides network-independent, high-performance communication primitives tailored for implementing parallel global address space SPMD languages such as UPC, Titanium, and Co-Array Fortran. The interface is primarily intended as a compilation target and for use by runtime library writers (as opposed to end users), and the primary goals are high performance, interface portability, and expressiveness. http://gasnet.cs.berkeley.edu/ GigE: Gigabit Ethernet. GPU-Programming (siehe CUDA): Graphik-Prozessor. HPF: High Performance Fortran. IB: Infiniband. IPMI: Intelligent Platform Management Interface - Protokoll. K10: CPU-Architektur von AMD (auch AMD Opteron (K10)). Latenz: Verweilzeit einer Nachricht im Netz. Latenz T für n Byte mit Bandbreite b bei einem Overhead o: T = o + n / b. Der Overhead besteht aus den meist konstanten Zeiten, die zum Start und Empfang der Nachricht benötigt werden und der Signalllaufzeit für 1 Bit. MIMD: (Flynn); Multiple Instruction Multiple Data; mehrere unabhängige Prozessoren bearbeiten mehrere Befehlsströme mit unabhängigen Daten. Je nach Speicherarchitektur unterscheidet man SM/SHMEM, DM/DMEM und VSM. MISD: (Flynn); Multiple Instruction Single Data; eigentlich überflüssige Einstufung, die nur zur Vervollständigung von SISD, SIMD, MISD, MIMD eingeführt wurde. Um dem Ausdruck nachträglich doch noch Sinn zu verleihen, wurden hier Pipeline-Architekuren, die ja hintereinander mit demselben Datum arbeiten, subsummiert. Eigentlich jedoch liegt aber nach jedem Pipeline-Schritt ein anderes modifiziertes Datum vor. Weiter werden hier fehlerredundante Mehrfacharchitekturen genannt, wo mehrere Prozessoren mit demselben Datum rechnen, deren Ergebnis nur akzeptiert wird, wenn es überall gleich ist. MPI: Message Passing Interface (MPI-1, MPI-2); wichtigstes Software-Modell http://www.mpi-forum.org/docs/. MPICH Das CH von MPICH kommt von CHameleon, eine Bezeichnung für die Portabilitätsschicht im ursprünglichen MPICH, die den Anschluss an beliebige Message-Passing-Systeme gewährleistet. http://wiki.mcs.anl.gov/mpich2/index.php/Frequently_Asked_Questions MVAPICH Der Name MVAPICH signalisiert, dass die zugrundeliegende MPI-Implementierung MPICH die InfiniBand VAPI-Schnittstelle benutzt. Die offizielle Aussprache ist Emwahpitsch. http://mvapich.cse.ohio-state.edu/ http://mvapich.cse.ohio-state.edu/support/faq.shtml Node: Knotenrechner mit ggf mehreren CPU-Kernen. NUMA: Cluster-Architektur. (Non Uniform Memory Access).Vielen Prozessoren ist je ein eigener Speicher zugeordnet, aber prinzipiell kann jeder Prozessor, ggf. nach einer Wartezeit, jede Speicherzelle, auch die anderer Prozessoren, benutzen. OpenMP: Open Multiprocessing; Thread-basiertes Software-Modell http://openmp.org/wp/. Open MPI: Open Source MPI-Implementierung. Jünger als MPICH. Vorsicht: hat soviel mit OpenMP zu tun wie Javascript mit Java! http://www.open-mpi.org/ PBS: Portable Batch System. PGAS: Partitioned global address space; Software-Modell mit global nutzbarem, aber bereichsweise den Prozessoren zugeteiltem Speicher. PThreads: Thread-Modell für C von POSIX. PVM: Parallel Virtual Machine; Software-Modell mit Message Passing http://www.csm.ornl.gov/pvm/. Shebang, auch Magic Line: mit #! beginnende Scriptzeile, die als Kommando mit der Scriptdatei als Argument ausgeführt wird. SISD: (Flynn); Single Instruction Single Data; der klassische sequentielle Rechner. SIMD: (Flynn); Single Instruction Multiple Data; Ein Befehlswerk holt und analysiert Befehle. Die eigentliche Ausführung wird von einem Array mehrerer Prozessoren übernommen, die dann mit mehreren Datenströmen unabhängig dieselbe Befehlssequenz durchführen können. SHMEM/SM: SHared MEMory; viele Prozessoren teilen sich einen gemeinsamen Speicher; Flaschenhals bei Speicherzugriff; Notwendigkeit der Synchronisation von Schreibzugriffen; kein Datenaustausch zwischen den Prozessoren nötig (keine Kommunikation). SHMEM ist auch eine Kommunikationebibliothek von Cray. SM/SHMEM: siehe SHMEM. SMP: Cluster-Architektur. (Symmetric MultiProcessing). Viele Prozessoren greifen gleichberechtigt auf alle restlichen Resourcen, insbesondere den gemeinsamen Speicher, zu. Der gemeinsame Datenbus bildet hier einen extremem Flaschenhals. Alternative zu DMP. Split-C: GAS-Sprache (PGAS ohne P) aus Berkeley http://www.cs.berkeley.edu/~yelick/arvindk/splitc-super93.ps. Titanium: Java-basierte PGAS-Sprache. http://titanium.cs.berkeley.edu/ http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgastit.html (Skript) Torque: Terascale Open source Resource and QUEue manager. UMA: Cluster-Architektur. (Uniform Memory Access): Viele Prozessoren greifen gleichberechtigt über mehrere Zugänge auf den gemeinsamen Speicher zu. Das beschränkt den Flaschenhals von SMP auf die Fälle, in denen auf Daten in derselben Speicherbank zugegriffen wird. UPC: C-basierte PGAS-Sprache; http://upc.gwu.edu/docs/upc_specs_1.2.pdf. http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgasupc.html (Skript) VSM: Virtual Shared Memory; Oberbegriff zu NUMA und PGAS X10: PGAS-Sprache con IBM; Java-basiert; http://x10-lang.org/ http://dist.codehaus.org/x10/documentation/languagespec/x10-latest.pdf http://domino.research.ibm.com/comm/research_projects.nsf/pages/x10.index.html. Inhalt Contents TTH-Seite: http://hutchinson.belmont.ma.us/tth/ File translated from TEX by http://hutchinson.belmont.ma.us/tth/"&amp;gt; TTH, version 3.89. On 25 Feb 2013, 12:31. ?</field>
<field name="important">Athene HPC-Cluster \@ Uni-Regensburg Athene HPC-Cluster Uni-Regensburg http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/hpc08.html http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/hpc08.pdf http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/hpc08.dvi Feb 25, 2013 Chapter 1 What's New - Neuigkeiten 10'2012: Neue Kommandos: wip, qparams common 10'2012: Neue Graphikkarten 2012: Neuinstallation wegen Auslaufen der Wartungsverträge 13.6.2011: Neuer Knoten mit 2 Tesla M2070 GPGPU-Karten 10.1.2011: Neue Knoten 798, 801-816 11.2.2010: Neue Knoten 785-797 16.11.2009: Chapel von Cray, eine PGAS-Sprache mit Ziel hoher Produktivität, funktioniert. http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/hpccpl.html 10.11.2009: UPC, eine PGAS-Sprache, funktioniert. http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgasupc.html 30.10.2009: Titanium, eine PGAS-Sprache, funktioniert. http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgastit.html Chapter 2 Probleme module load parastation-gcc geht nicht Chapter 3 Schnelleinstieg Zum Rechnen auf der Athene benötigt man einen Athene-Account den Login-Knoten Athene1 zum Einloggen einen Parallel-Compiler (FSF/Gnu, Intel) eine Parallel-Bibliothek (meist eine der MPI-Bibliotheken) das Torque-Batch-System zum Starten der Jobs auf den Knotenrechnern 3.1  Account Bitte stellen Sie einen Antrag auf Clusterbenutzung im Rechenzentrum. Ihr normaler NDS-Account wird nach Genehmnigung auf die Athene übertragen. Ein elektronisches Antragsformular finden Sie in http://www-cgi.uni-regensburg.de/RZ/Dienste/Linux/HPC/index.phtml 3.2  Login Der sog. Loginknoten ist Athene1; zum Arbeiten an der Athene müssen Sie sich dort einloggen. Als Account wird Ihr normaler NDS-Account verwendet. Beispiel mit ssh unter Linux: ssh bbbxxxx@athene1 (aus dem Intranet) Eine direkte Einwahl aus dem Internet ist verboten; Sie müssen von einem Rechner aus dem Intranet kommen. Für Studenten ist das vorzugsweise rex1, für wissenschaftliche Mitarbeiter rex2: ssh bbbxxxx@rex1.rz.uni-regensburg.de ssh athene1 Bildschirmprotokoll: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/ssh.txt) 3.3  Wahl von Compiler und MPI-Library Es stehen mehrere Werkzeuge zur Programmentwicklung zur Verfügung. Um sie benutzen zu können, müssen diverse Umgebungsvariable gesetzt werden. Das kann direkt geschehen, wenn Sie sich auskennen oder mit dem module-System automatisiert erfolgen. In jedem Fall wird ein Compiler benötigt. Derzeit sind zwei Hersteller (FSF/Gnu, Intel), drei Sprachen (Fortran, C, C++) und ihre Versionsvarianten (Intel 10, Intel 11, gnu 4.1, gnu 4.4) verfügbar. Hersteller Aufruf Sprache Compiler Version (Stand Oktober 2009) FSF/Gnu gfortran Fortran gfortran 4.1.2, 4.4.1 FSF/Gnu gcc C gcc 4.1.2, 4.4 FSF/Gnu g++ C++ g++ 4.1.2, 4.4.1 Intel ifort Fortran ifort 10.0, 11.0 Intel icc C icc 10.0, 11.0 Intel icpc C++ icpc 10.0, 11.0 Über den aktuellen Stand können Sie sich jederzeit mit dem Kommando module avail informieren. Die wichtigste Parallelbibliothek ist MPI, die auf der Athene in derzeit drei Varianten vorliegt. MPI-Bibliothek Beschreibung Webseite für weitere Informationen Parastation MPI MPICH für Infiniband MVAPICH2 MPICH2 für IB mit VAPI http://mvapich.cse.ohio-state.edu/ Intel MPI (impi) Die vierte Variante openMPI ist derzeit nur für den internen Gebrauch vorgesehen. 3.3.1  Wahl von Compiler/MPI-Library mit module   Eine ausführliche Beschreibung von module finden Sie unter http://modules.sourceforge.net/ http://modules.sourceforge.net/man/module.html module ist ein Alias für die folgende Kommandofolge mit dem Kommandokern /usr/bin/modulecmd ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/modalias.txt) Die häufigsten module-Kommandos sind: module avail (Welche Module existieren?) module load parastation-gcc (Laden eines Moduls - hier impi-intel) module list (Welche Module sind geladen?) module unload parastation-gcc (Entfernen eines Moduls - hier parastation-gcc) Manche Module schließen sich wechselseitig aus. Beim Wechsel muss dann vorher das alte Modul erst entfernt werden. Module-Argument dot GraphViz: Tool zur Erzeugung von Graphen gcc-4.4 Gnu Compiler Collection 4.4 (C/C++/Fortran unterstützt OpenMP V3) impi-gcc impi übersetzt mit gcc impi-intel impi übersetzt mit icc intel-10.0-icc Intel icc 10.0 intel-10.0-ifort Intel ifort 10.0 intel-11.0 Intel icc/ifort 11.0 module-cvs module-info modules mvapich2-gcc MVAPICH2 übersetzt mit gcc mvapich2-intel MVAPICH2 übersetzt mit icc null parastation-gcc Parastation MPI übersetzt mit gcc parastation-intel Parastation MPI übersetzt mit icc use.own Zu OpenMP siehe http://sites.google.com/site/gfortransite/ Zu gfortran siehe http://gcc.gnu.org/wiki/GFortran 3.4  Übersetzung Die Übersetzung normaler Programme und ihr Start sollte Linux-Kundigen keine Probleme bereiten. Nur die zusätzliche Verwendung paralleler Bibliotheken wie MPI erfordert Änderungen bei der gewohnten Bedienung. In diesen Schnelleinstieg wird nur die Kombination FSF/Gnu mit Parastation-MPI beschrieben. Andere Kombinationen lesen Sie bitte in der ausführlicheren Dokumentation weiter unten nach. Wir verwenden ein Hello-World-Programm mit MPI: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/helmpi.c) Es wird mit gcc übersetzt, anschließend wird Parastation-MPI anmontiert. Wie das folgende Beispiel zeigt, sind trotz des Wrappers mpicc die normalen Compiler-Optionen erlaubt. Natürlich müssen Sie ein Programm nur einmal übersetzen. Die bei der Option Wall erscheinende Warnung in mpi.h kann ignoriert werden. module load parastation-gcc mpicc helmpi.c mpicc -v helmpi.c mpicc -ansi -pedantic -Wall -o hp helmpi.c In file included from helmpi.c:3: /opt/parastation/mpi2/include/mpi.h:344: warning: ISO C90 does not support 'long long' Die C++-Variante lautet: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/helmpi.cc) Es wird mit g++ übersetzt, anschließend wird Parastation-MPI anmontiert. Wie das folgende Beispiel zeigt, sind trotz des Wrappers mpicxx die normalen Compiler-Optionen erlaubt. Natürlich müssen Sie ein Programm nur einmal übersetzen. Die bei der Option Wall erscheinende Warnung in mpi.h kann ignoriert werden. module load parastation-gcc mpicxx helmpi.cc mpicxx -v helmpi.cc mpicxx -ansi -pedantic -Wall -o hp helmpi.cc 3.5  Start von HPC-Jobs Das übersetzte Programm sollte normalerweise als Batchjob zur parallelen Ausführung auf den Knotenrechnern gestartet werden. Dazu wird Torque verwendet. Es ermöglicht sowohl einen interaktiven Start von Jobs (z.B. zum Debuggen) als auch den Start von Batch-Jobs. Torque ist aus dem älteren OpenPBS hervorgegangen. Deshalb taucht das Kürzel PBS in den Submit-Scripts auf. Der Scheduler heißt Maui. Beschreibung: http://www.clusterresources.com/pages/resources/documentation.php http://www.clusterresources.com/pages/products/torque-resource-manager.php http://www-theor.ch.cam.ac.uk/IT/servers/maui/maui-pbs-introduction.html Der Batchjob wird in einem modifizierten Shell-Script, einem sog. PBS-Script aufgerufen. Als Script-Prozessor eignen sich alle Linux-Script-Prozessoren (bash, csh, sh,...). ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/batch.sh) Mit der ersten Pseudokommentarzeile (Shebang #!/bin/bash) wird bash zur Ausführung gestartet. Die folgenden PBS-Direktiven ( #PBS directive) sind mit dem Schlüsselwort PBS als Direktiven gekennzeichnet. Zeile 2 fordert 4 Knotenrechner (nodes) mit je 8 CPUs (ppn - processors per node, cores), also insgesamt 32 Cores an. Zeile 3 stellt eine maximale Verweilzeit (walltime - Wanduhr) des Jobs von 1 Minute ein. Verweilt der Job länger als die hier angegebene Zeit im System, wird er automatisch abgebrochen. Kleine Werte führen andereseits zu einem früheren Jobstart als größere. Wählen Sie also die Werte nach dem Prinzip so klein wie möglich, so groß wie nötig, vielleicht mit einem moderaten Sicherheitszuschlag nach oben. Diese Angabe wird also vom Batchsystem verwendet, um den Zeitpunkt des Jobstarts zu bestimmen und um zu lange (möglicherweise fehlerhafte) Jobs wieder zu entfernen. Der folgende Kommentar in Zeile 5 begrenzt die Rechenzeit (cput - CPU Time pro Core) auf 1 Minute. Dieser Wert kann angegeben werden, spielt jedoch keine Rolle, da er vom Batchsystem nicht verwendet wird. Der Rest der Datei besteht aus normalen Shellscript-Kommandos. Das cd-Kommando wechselt vom möglicherweise falschen Verzeichnis ${HOME} in das Verzeichnis ${PBS_O_WORKDIR}, aus dem das PBS-Script aufgerufen wurde. Hier werden auch die Resultate gespeichert. Das letzte Kommando mpiexec startet das Programm in der Datei hp auf 32 Cores (die Datei hp wurde wie in der letzten Übersetzung weiter oben erstellt). Der Job wird mit dem Kommando qsub batch.sh in die Queue gestellt und abgearbeitet, sobald genügend Knoten frei geworden sind und der Job unter allen mit ihm konkurrierenden die höchste Priorität bekommen hat. Auch im qsub-Kommando können begrenzende Limits als Option wie im PBS-Script selbst angegeben werden. Im folgenden Beispiel wird mit der Option -l (limit) die maximale walltime begrenzt. Von mehreren konkurrierenden Angaben gilt zunächst die qsub-Angabe, dann die PBS-Angabe und zuletzt die Voreinstellung. qsub -l walltime=2:0:0 batch.sh (beim Start) #PBS -l walltime=2:00:00 (im PBS-Script) Mit dieser Beispiel-Option wird die maximale Verweilzeit (walltime) auf 2 Stunden begrenzt. Begrenzung der CPU-Zeit (cput) hat keine Wirkung. Über den Status von Jobs, Queues und Server gibt das Kommando qstat Auskunft. qstat qstat  job-id qstat -f  job-id qstat -q  Queue-Übersicht qstat -Q  Queue-Übersicht Versehentlich gestartete Jobs können mit qdel wieder gelöscht werden: qdel job-id Nach dem normalen Ende eines Jobs werden die nach stdout und stderr geschriebenen Programmergebnisse in zwei Dateien geschrieben, deren Namen mit dem PBS-Scriptnamen beginnen und die Jobnummer enthalten. Im Beispiel sind das ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/eofiles.txt) Ein interaktiver Job wird gestartet mit qsub -I Queue-Übersicht (Jan'2011): common common32 striegnitz rzkurs spang_i merkl bocola condmat serial develop express dick Chapter 4 Allgemeines 4.1  Zeittafel Abnahme: 26.2.2009 Testbetrieb: Februar 2009 Einweihung: 29.4.2009 Inbetriebnahme: 1.4.2009 Chapter 5 Hardware In der veralteten und zu groben Taxonomie nach Flynn ist die Athene als MIMD-Architektur aufgebaut. Die Struktur des gesamten Clusters ist eine Distributed Memory Architektur. Jeder Knoten hat seinen eigenen Speicher, die Kommunikation erfolgt über eines der beiden Netze (Infiniband, GigE). Jeder einzelne Knoten verfügt über zwei Prozessoren mit je eigenem Speicher, der jedoch prinzipiell von beiden Prozessoren genutzt werden kann, also eine ccNUMA-Architektur. Jeder der beiden Prozessoren besteht aus vier Rechnerkernen mit gemeinsamem Speicher, bildet also eine SMP-Architektur. 5.1  Rechner Bei der Erstinstallation war der Cluster fast homogen. Bei Erweiterungen kann diese Homogenität nicht erhalten bleiben. 5.1.1  Übersicht   Login Node (Athene 1), Typ S1 Master Node (Athene 2), Typ S1 File Server (Athene 3-4), 2 Typ S1 Node 1-122 (Infiniband), 122 Typ O1 Node 123-143 (Infiniband), 21 Typ O2 Node 144-176 (Infiniband), 33 Typ O3 Node 769-776, 780 (Gigabit Ethernet), 9 Typ O4 Node 777-779 (Gigabit Ethernet), 3 Typ O5 Node 785-797 (Gigabit Ethernet), 13 Typ X1 Node 798,801-816 (Gigabit Ethernet), 17 Typ X2 Node 833-834 (Infiniband), 2 Typ X3 Zusammen 220 Knoten, 402 × Quadcore-CPUs, 38 × Hexacore-CPUs und 1836 Cores (1504 Opteron, 104+228 Xeon). Gesamtspeicher: 4352 GiB (Damit kann grob im gesamten Cluster eine dichte n×n-Matrix, n=700000 gespeichert werden. Die Größenordnung der Rechenzeit für eine Gausselimination bei dieser Matrix ist bei 220 Knoten = 1760 Cores mit 2 GHz rechnerisch mindestens t=20 h.) Nicht jeder node ist allgemein verfügbar. 5.1.2  Ausstattung der Rechenknoten Typ O1, 1-122   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 16 GiB HDD: 250 GB Interconnect: GbE, 4X-DDR IB 5.1.3  Ausstattung der Rechenknoten Typ O2, 123-143   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 16 GiB HDD: 500 GB Interconnect: GbE, 4X-DDR IB 5.1.4  Ausstattung der Rechenknoten Typ O3, 144-176   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 32 GiB HDD: 500 GB Interconnect: GbE, 4X-DDR IB 5.1.5  Ausstattung der Rechenknoten Typ O4, 769-776,780   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 16 GiB HDD: 500 GB Interconnect: GbE 5.1.6  Ausstattung der Rechenknoten Typ O5, 777-779   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 32 GiB HDD: 1 TB Interconnect: GbE 5.1.7  Ausstattung der Rechenknoten Typ S1, athene[1-4]   CPU: 2 × AMD K10 Quad-Core, 2,2 GHz (Opteron 2354, Barcelona B3) RAM: 32 GiB HDD: 146 GB SAS Interconnect: 10 GbE, 4X-DDR IB 5.1.8  Ausstattung der Rechenknoten, Typ X1, 785-797   CPU: 2 × Intel Xeon, 2,4 GHz (E5530, Nehalem-EP "Gainestown" [4 Cores, 8 Threads]) RAM: 24 GiB HDD: 250 GB Interconnect: GbE 5.1.9  Ausstattung der Rechenknoten, Typ X2, 798, 801-816   CPU: 2 × Intel Xeon, 2,66 GHz (X5650, Westmere-EP "Gulftown" [6 Cores, 12 Threads]) RAM: 24 GiB HDD: 250 GB Interconnect: GbE 5.1.10  Ausstattung der Rechenknoten, Typ X3, 833,834   CPU: 2 × Intel Xeon, 2,8 GHz (X5660, Westmere-EP "Gulftown" [6 Cores, 12 Threads]) GPU: 1 × M2070 (nVidia Tesla "Fermi"), 6 GiB ECC-RAM, 448 CUDA-Recheneinheiten (Organisation: 14 Shadercluster a 32 Streamprozessoren; theoretische Leistung: Rpeak_SP 1.03TFlops, Rpeak_DP 515GFlops) RAM: 24 GiB HDD: 250 GB Interconnect: GbE, 4X-QDR IB System: Debian 5.1.11  Zugriffsrechte   public: 1-108, 144-176 (common queue) seriell: 769 - 780 common32: 144-176 (4GiB pro Prozess) Striegnitz: 109-122 Spang: 123-134, 769-776 Merkl: 135-143 Bocola: 777-779 condmat (Richter/Grifoni): 785-797, 801-816 dick: 798 tesla: 833,834 (currently in development) 5.1.12  Voreinstellung der Queues common, common32, serial, express und develop   min.nodect = 2 max.nodect = 32 default.pmem = 1 GiB max.pmem = 2 GiB default.nodes = 2:ppn = 8 max.walltime = 48:00 h max_user_queuable = 20 default.nodes = 1:ppn = 1 (serial queue) default.pmem = 2 GiB (common32) max.pmem = 4 GiB (common32) max.walltime = 5:00 h (express) max.nodect = 4 (express) max.walltime = 0:10 h (develop) Aktuelle Angaben mit qstat -q und qstat -Q erfragen! 5.2  Netz Gigabit Ethernet (Broadcom Corporation NetXtreme Gigabit Ethernet PCI Express (rev 21)) Infiniband (DDR 4x, 20 GBit/s, InfiniBand: Mellanox Technologies MT25204 [InfiniHost III Lx HCA] (rev 20)) Zwei unabhängige Netze, die beide für Message Passing verwendet werden können. Das Ethernet wird eher für Verwaltungszwecke, Infiniband eher für Message Passing eingesetzt. Message Passing mit Ethernet bremst Programme um einen Faktor von etwa 8. 5.3  Dateisystem 5.3.1  Dateiserver Athene3 Athene4 Zwei NFS-Server für die Dateisysteme $HOME (quotiert, 3GiB/15000 files), /scratch und /data. Derzeit existiert kein paralleles Filesystem. 5.3.2  Lokale Filesysteme: NFS /tmp kann auch für lokale temporäre Daten verwendet werden; ist bei verteilter Anwendung mit vielen Knoten unter Umständen schneller als /scratch. 5.3.3  Umgang mit den Scratch-Verzeichnissen Lokales Scratch wird nach jedem Jobende gelöscht. Benutzung unter /scratch/${PBS_JOBID} NFS-Scratch1 und -Scratch2: Hier existiert pro Benutzer ein Unterverzeichnis. Bei 80% Füllstand werden älteste Dateien automatisch gelöscht, bis ein Füllstand von 60% erreicht wird. Achtung: Es ist unfair und wird überwacht, ob Dateien mit touch aufgefrischt werden. Chapter 6 Betriebssystem SLES10 SP2 Enterprise Linux (Novell) Chapter 7 Sprachen und Compiler 7.1  FSF/Gnu Alle Gnu-Compiler stehen ohne weitere Vorbereitung direkt zur Verfügung (gfortran, gcc, g++). Für MPI-Programme sollte ein Wrapper zur Übersetzung benutzt werden (mpicc). 7.2  Intel Intel muss mit module load aktiviert werden. module load intel-11.0 module load intel-10.0-icc module load intel-10.0-ifort Die Compiler heißen mit ifort, icc und icpc. /opt/intel/Compiler/11.0/074/Documentation http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/Documentation/getting_started_c.htm http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/Documentation/getting_started_f.htm Es wird mit dem Compiler von Intel und der MPI-Bibliothek von MVAPICH übersetzt: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/mpicc.txt) 7.3  OpenMP OpenMP (Open Multiprocessing) ermöglicht parallele Ausführung in mehreren Threads, die durch Compiler-Direktiven in C, C++ und Fortran gesteuert werden. Derzeit mit den Intel- und mit Gnu-Compilern (Version 4.4) möglich. Zu OpenMP siehe http://sites.google.com/site/gfortransite/ Zu gfortran siehe http://gcc.gnu.org/wiki/GFortran Umgebungsvariable für OpenMP: setenv OMP_NUM_THREADS 5 (c-shell) export OMP_NUM_THREADS=5 (bash) Übersetzung mit gcc -fopenmp x.c 7.4  PGAS 7.4.1  co-Array Fortran siehe http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgascaf.html 7.4.2  UPC: Unified parallel C siehe http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgasupc.html 7.4.3  Titanium: PGAS-Sprache auf Java-Gundlage siehe http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgastit.html Titanium ist eine in Berkeley entwickelte Java-basierte PGAS-Sprache. Webseite: http://titanium.cs.berkeley.edu/ Im Verzeichnis /home/brf09510/tc existiert eine clusterfähige Titaniuminstallation. Sie kann benutzt werden, wenn ihr Verzeichnisname in den Pfad eingetragen wird. setenv PATH "${PATH}:/home/brf09510/tc/bin" Der Compiler kann (fast) jedes Java-Programm und jedes Titanum-Programm übersetzen. Die umfangreiche Java-Bibliothek steht natürlich nur sehr eingeschränkt zur Verfügung. Der Compileraufruf ist tcbuild --help tcbuild --backend gasnet-ibv-uni hello.ti tcbuild --backend mpi-cluster-uniprocess hello.ti tcbuild --backend sequential hello.ti tcbuild --backend smp hello.ti Übersetzte Titanium-Programme werden mit normalen PBS-Jobs auf den Clusterknoten gestartet. Das folgende Beispiel startet ein Programm in der Datei ./hello. ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/titjob.sh) 7.4.4  X10 http://x10-lang.org/ http://dist.codehaus.org/x10/documentation/languagespec/x10-latest.pdf http://domino.research.ibm.com/comm/research_projects.nsf/pages/x10.index.html. 7.4.5  Chapel http://chapel.cray.com/spec/spec-0.795.pdf http://chapel.cray.com/. 7.4.6  Fortress Chapter 8 Bibliotheken 8.1  Parallelrechnen 8.1.1  Parastation-MPI (modifiziertes MPICH mit Infiniband-Kommunikation) 8.1.2  mvapich 8.1.3  Intel-MPI /opt/intel/impi/3.2.0.011/Doc_Index.html http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/impi/3.2.0.011/Doc_Index.html 8.1.4  OpenMP 8.2  Atlas Die Bibliothek steht im Verzeichnis /opt/lapack/atlas-3.8.2 Mit dem folgenden Beispielprogramm (Quelle: http://math-atlas.sourceforge.net/faq.html) wird die Versionsnummer der Bibliothek am Bildschirm ausgegeben: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/atlasv.c) Übersetzung des Beispiels und Start: ( http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/atlasv.r) 8.3  MKL Math Kernel Library /opt/intel/Compiler/11.0/074/Documentation/mkl http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/Documentation/mkl/mkl_documentation.htm Chapter 9 Torque und Maui 9.1  Torque 9.1.1  Übersicht siehe http://www.clusterresources.com/products/torque/docs/a.acommands.shtml 9.1.2  qsub siehe http://www.clusterresources.com/products/torque/docs/commands/qsub.shtml 9.1.3  Ressourcen siehe http://www.clusterresources.com/products/torque/docs/2.1jobsubmission.shtml\#resources Ressource Wert Bedeutung cput [[hh:]mm:]ss Maximale CPU-Zeit pro core des Jobs walltime [[hh:]mm:]ss Maximale Verweilzeit des Jobs 9.1.4  qstat 9.1.5  qdel 9.2  PBS 9.2.1  PBS Umgebungsvariable   Die folgenden Umgebungsvariable werden von der Umgebung des qsub-Kommandos weitergereicht: Variable Wert (Bsp) Beschreibung PBS_ENVIRONMENT PBS_BATCH set to PBS_BATCH to indicate that the job is a batch job; otherwise set to PBS_INTERACTIVE to indicate that the job is a PBS interactive job PBS_JOBID 165139.Athene2 the job identifier assigned to the job by the batch system PBS_JOBNAME batch.sh the job name supplied by the user PBS_NODEFILE /var/spool/torque/aux// the name of the file that contains the list of the nodes 165139.Athene2 assigned to the job PBS_QUEUE common the name of the queue from which the job is executed PBS_TMPDIR Die Umgebungsvariable X aus der Umgebung des qsub-Kommandos wird als Variable PBS_O_X weitergereicht. Variable Wert (Bsp) Beschreibung PBS_O_HOME /home/brf09510 HOME variable in the evvironm. in which qsub was executed PBS_O_LANG en_US.UTF-8 LANG variable in the evvironm. in which qsub was executed PBS_O_LOGNAME brf09510 LOGNAME variable in the evvironm. in which qsub was executed PBS_O_PATH /usr/bin:/bin:/ PATH variable in the evvironm. in which qsub was executed PBS_O_MAIL /var/mail/brf09510 MAIL variable in the evvironm. in which qsub was executed PBS_O_SHELL /bin/tcsh SHELL variable in the evvironm. in which qsub was executed PBS_O_TZ TZ variable in the evvironm. in which qsub was executed PBS_O_HOST Athene1.uni-regensburg.de the name of the host upon which the qsub command is running. PBS_SERVER Athene1.uni-regensburg.de the hostname of the pbs_server which qsub submits the job to. PBS_O_QUEUE batch the name of the original queue to which the job was submitted. PBS_ARRAYID each member of a job array is assigned a unique identifier (see -t) PBS_O_WORKDIR /home/brf09510 the abs. path of the current working dir. of the qsub command Zusätzlich werden die folgenden Umgebungsvariable definiert: Variable Wert (Bsp) Beschreibung PBS_O_HOST Athene1.uni-regensburg.de the name of the host upon which the qsub command is running PBS_O_QUEUE batch the name of the original queue to which the job was submitted PBS_O_WORKDIR /home/brf09510 the absolute path of the current working directory of the qsub command 9.3  Maui Chapter 10 Debuggen Intel /opt/intel/Compiler/11.0/074/Documentation/idb /opt/intel/Compiler/11.0/074/idb/Getting_Started.html http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/Documentation/idb/Getting_Started.html http://www.uni-r.de/EDV/kurs_info/brf09510/hpc/opt/intel/Documentation/idb/debugger_documentation.htm Chapter 11 Weitere Details Parastation zur Steuerung des Clusters (Process Management) Gridmonitor Webseite: http://cluster-competence-center.com/support.php Chapter 12 Glossar AMD: CPU-Hersteller (K10). ATLAS: Automatically Tuned Linear Algebra Software. Zur Zeit stehen C- und F77-Schnittstellen bereit, die effiziente parallele BLAS- und LAPACK-Funktionen aufrufen. Bandbreite ( bandwidth): Maximale Frequenz, mit der Daten über eine Verbindung des Netzes geschickt werden können. Einheit: Byte pro Sekunde. Daraus folgt die Übertragungszeit t für n Byte mit der Bandbreite b: t = n /b. Barcelona: Quadcore-Chip von AMD mit vier K10-Architekturen. BSP: Bulk Synchroneous Programming; älteres Software-Modell mit Message Passing; http://www.bsp-worldwide.org/. CAF: siehe Co-Array Fortran ccNUMA: Cluster-Architektur (Cache Coherent Nonuniform Memory Access). Jede CPU verfügt über einen Cache zum Speicher; manchmal teilen sich CPU-Gruppen einen gemeinsamen Cache. Jede CPU kann aber prinzipiell (schlimmstenfalls nach Wartezeit) auf jede Speicherzelle zugreifen. Die Caches werden automatisch synchronisiert. Der Cache beschleunigt die Speicherzugriffe im Vergleich zu NUMA. Chapel: Eine PGAS-Sprache von Cray http://chapel.cray.com/spec/spec-0.795.pdf http://chapel.cray.com/. CMF: nicht mehr aktuelles Software-Modell. Co-Array Fortran: PGAS-Sprache; http://www.nag.co.uk/SC22WG5/. http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgascaf.html (Skript) CUDA: Software-Modell von NVidia (siehe GPU). Core: CPU-Kern (Unabhängig agierende ALU/FPU, die ein Programm eigenständig abarbeiten kann). DARPA: Defense Advanced Research Projects Agency (U.S Department of Defense institute) Urheber eines Projektes für den Entwurf neuer paralleler Programmiersprachen 2002. Seit 2006 konkurrieren noch die Entwürfe X10 (IBM), Chapel (Cray) und Fortress (Sun). http://www.hpcx.ac.uk/research/hpc/technical_reports/HPCxTR0706.pdf. Distributed Memory: Cluster-Architektur. Jeder Prozessor hat seinen eigenen Speicher. Datenaustausch zwischen den Prozessoren erfolgt über ein unabhängiges Netz. DM/DMEM: Distributed memory; viele Prozessoren haben je einen eigenen Speicher; vermeidet Flaschenhälse; erfordert Kommunikation. DMP: Distributed Memory Processing; Jede CPU ist mit eigenem Speicher ausgestattet. Alternative zu SMP. Fortress: PGAS-Sprache von Sun. http://projectfortress.sun.com/Projects/Community/ http://research.sun.com/projects/plrg/fortress.pdf http://research.sun.com/projects/plrg/Publications/GSPx-Lecture2006public.pdf. GAS: Global address space GASNET: Global-Address Space Networking. GASNet is a language-independent, low-level networking layer that provides network-independent, high-performance communication primitives tailored for implementing parallel global address space SPMD languages such as UPC, Titanium, and Co-Array Fortran. The interface is primarily intended as a compilation target and for use by runtime library writers (as opposed to end users), and the primary goals are high performance, interface portability, and expressiveness. http://gasnet.cs.berkeley.edu/ GigE: Gigabit Ethernet. GPU-Programming (siehe CUDA): Graphik-Prozessor. HPF: High Performance Fortran. IB: Infiniband. IPMI: Intelligent Platform Management Interface - Protokoll. K10: CPU-Architektur von AMD (auch AMD Opteron (K10)). Latenz: Verweilzeit einer Nachricht im Netz. Latenz T für n Byte mit Bandbreite b bei einem Overhead o: T = o + n / b. Der Overhead besteht aus den meist konstanten Zeiten, die zum Start und Empfang der Nachricht benötigt werden und der Signalllaufzeit für 1 Bit. MIMD: (Flynn); Multiple Instruction Multiple Data; mehrere unabhängige Prozessoren bearbeiten mehrere Befehlsströme mit unabhängigen Daten. Je nach Speicherarchitektur unterscheidet man SM/SHMEM, DM/DMEM und VSM. MISD: (Flynn); Multiple Instruction Single Data; eigentlich überflüssige Einstufung, die nur zur Vervollständigung von SISD, SIMD, MISD, MIMD eingeführt wurde. Um dem Ausdruck nachträglich doch noch Sinn zu verleihen, wurden hier Pipeline-Architekuren, die ja hintereinander mit demselben Datum arbeiten, subsummiert. Eigentlich jedoch liegt aber nach jedem Pipeline-Schritt ein anderes modifiziertes Datum vor. Weiter werden hier fehlerredundante Mehrfacharchitekturen genannt, wo mehrere Prozessoren mit demselben Datum rechnen, deren Ergebnis nur akzeptiert wird, wenn es überall gleich ist. MPI: Message Passing Interface (MPI-1, MPI-2); wichtigstes Software-Modell http://www.mpi-forum.org/docs/. MPICH Das CH von MPICH kommt von CHameleon, eine Bezeichnung für die Portabilitätsschicht im ursprünglichen MPICH, die den Anschluss an beliebige Message-Passing-Systeme gewährleistet. http://wiki.mcs.anl.gov/mpich2/index.php/Frequently_Asked_Questions MVAPICH Der Name MVAPICH signalisiert, dass die zugrundeliegende MPI-Implementierung MPICH die InfiniBand VAPI-Schnittstelle benutzt. Die offizielle Aussprache ist Emwahpitsch. http://mvapich.cse.ohio-state.edu/ http://mvapich.cse.ohio-state.edu/support/faq.shtml Node: Knotenrechner mit ggf mehreren CPU-Kernen. NUMA: Cluster-Architektur. (Non Uniform Memory Access).Vielen Prozessoren ist je ein eigener Speicher zugeordnet, aber prinzipiell kann jeder Prozessor, ggf. nach einer Wartezeit, jede Speicherzelle, auch die anderer Prozessoren, benutzen. OpenMP: Open Multiprocessing; Thread-basiertes Software-Modell http://openmp.org/wp/. Open MPI: Open Source MPI-Implementierung. Jünger als MPICH. Vorsicht: hat soviel mit OpenMP zu tun wie Javascript mit Java! http://www.open-mpi.org/ PBS: Portable Batch System. PGAS: Partitioned global address space; Software-Modell mit global nutzbarem, aber bereichsweise den Prozessoren zugeteiltem Speicher. PThreads: Thread-Modell für C von POSIX. PVM: Parallel Virtual Machine; Software-Modell mit Message Passing http://www.csm.ornl.gov/pvm/. Shebang, auch Magic Line: mit #! beginnende Scriptzeile, die als Kommando mit der Scriptdatei als Argument ausgeführt wird. SISD: (Flynn); Single Instruction Single Data; der klassische sequentielle Rechner. SIMD: (Flynn); Single Instruction Multiple Data; Ein Befehlswerk holt und analysiert Befehle. Die eigentliche Ausführung wird von einem Array mehrerer Prozessoren übernommen, die dann mit mehreren Datenströmen unabhängig dieselbe Befehlssequenz durchführen können. SHMEM/SM: SHared MEMory; viele Prozessoren teilen sich einen gemeinsamen Speicher; Flaschenhals bei Speicherzugriff; Notwendigkeit der Synchronisation von Schreibzugriffen; kein Datenaustausch zwischen den Prozessoren nötig (keine Kommunikation). SHMEM ist auch eine Kommunikationebibliothek von Cray. SM/SHMEM: siehe SHMEM. SMP: Cluster-Architektur. (Symmetric MultiProcessing). Viele Prozessoren greifen gleichberechtigt auf alle restlichen Resourcen, insbesondere den gemeinsamen Speicher, zu. Der gemeinsame Datenbus bildet hier einen extremem Flaschenhals. Alternative zu DMP. Split-C: GAS-Sprache (PGAS ohne P) aus Berkeley http://www.cs.berkeley.edu/~yelick/arvindk/splitc-super93.ps. Titanium: Java-basierte PGAS-Sprache. http://titanium.cs.berkeley.edu/ http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgastit.html (Skript) Torque: Terascale Open source Resource and QUEue manager. UMA: Cluster-Architektur. (Uniform Memory Access): Viele Prozessoren greifen gleichberechtigt über mehrere Zugänge auf den gemeinsamen Speicher zu. Das beschränkt den Flaschenhals von SMP auf die Fälle, in denen auf Daten in derselben Speicherbank zugegriffen wird. UPC: C-basierte PGAS-Sprache; http://upc.gwu.edu/docs/upc_specs_1.2.pdf. http://www.uni-regensburg.de/EDV/kurs_info/brf09510/hpc/pgasupc.html (Skript) VSM: Virtual Shared Memory; Oberbegriff zu NUMA und PGAS X10: PGAS-Sprache con IBM; Java-basiert; http://x10-lang.org/ http://dist.codehaus.org/x10/documentation/languagespec/x10-latest.pdf http://domino.research.ibm.com/comm/research_projects.nsf/pages/x10.index.html. Inhalt Contents TTH-Seite: http://hutchinson.belmont.ma.us/tth/ File translated from TEX by http://hutchinson.belmont.ma.us/tth/"&amp;gt; TTH, version 3.89. On 25 Feb 2013, 12:31. ?</field>
</doc>

</add>